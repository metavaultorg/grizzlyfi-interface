{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_esMvx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bnMvx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvlp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeMvlp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeMvx",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeMvlp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnstakeMvx",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MVX_USDC_POOL_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "acceptTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        }
      ],
      "name": "batchCompoundForAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchStakeMvxForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bnMvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusMvxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEsMvx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "compoundForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esMvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMvlpTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMvxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldClaimMvx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeMvx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldClaimEsMvx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeEsMvx",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldStakeMultiplierPoints",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldClaimWeth",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldConvertWethToEth",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldAddIntoMVLP",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldConvertMvxAndStake",
          "type": "bool"
        }
      ],
      "name": "handleRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedMvxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusMvxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeMvxTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeMvlpTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakedMvlpTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvlpManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvxVester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvlpVester",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minUsdm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMvlp",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeMvlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minUsdm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMvlp",
          "type": "uint256"
        }
      ],
      "name": "mintAndStakeMvlpETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvlp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvlpManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvlpVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvxVester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingReceivers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "signalTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeEsMvx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeMvx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeMvxForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedMvlpTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedMvxTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mvlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemMvlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mvlpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeAndRedeemMvlpETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeEsMvx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeMvx",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7d9a0b411af04dfe7f53efba660fdcaf89c85f2a75681b5ed28ada30fd50a2db",
  "receipt": {
    "to": null,
    "from": "0xc1048DB8e91E68b468b1d7B513fbB666C6e1622D",
    "contractAddress": "0xD82Beaf2B820fD7CDA5D4F2E376307db4Ac1E2CB",
    "transactionIndex": 0,
    "gasUsed": "4937758",
    "logsBloom": "0x
    "blockHash": "0x8b22ffc9427c1e6c23d15ba8ba361b036f03ebc47cd58e3dacbd713878247cbb",
    "transactionHash": "0x7d9a0b411af04dfe7f53efba660fdcaf89c85f2a75681b5ed28ada30fd50a2db",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32446621,
        "transactionHash": "0x7d9a0b411af04dfe7f53efba660fdcaf89c85f2a75681b5ed28ada30fd50a2db",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1048db8e91e68b468b1d7b513fbb666c6e1622d",
          "0x000000000000000000000000742d13f0b2a19c823bdd362b16305e4704b97a38"
        ],
        "data": "0x000000000000000000000000000000000000000000000000448670bd54b90e5c00000000000000000000000000000000000000000000000144fa760a575eb5fa000000000000000000000000000000000000000000000a92c9ba3e64d9debdd80000000000000000000000000000000000000000000000010074054d02a5a79e000000000000000000000000000000000000000000000a930e40af222e97cc34",
        "logIndex": 0,
        "blockHash": "0x8b22ffc9427c1e6c23d15ba8ba361b036f03ebc47cd58e3dacbd713878247cbb"
      }
    ],
    "blockNumber": 32446621,
    "cumulativeGasUsed": "4937758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0x2760e46d9bb43dafcbecaad1f64b93207f9f0ed7",
    "0xd1b2f8DFF8437BE57430Ee98767d512F252ead61",
    "0xB6BDd10A12286401C8DfaC93Fe933c7abBD6d0aF",
    "0x9F4f8bc00F48663B7C204c96b932C29ccc43A2E8",
    "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
    "0x32848E2d3aeCFA7364595609FB050A301050A6B4"
  ],
  "numDeployments": 1,
  "solcInputHash": "b5601d5b33335c91a153889fab6fff3f",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esMvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnMvx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMvlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeMvx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeMvlp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeMvx\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MVX_USDC_POOL_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"batchCompoundForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeMvxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnMvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"compoundForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esMvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMvlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldClaimMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimEsMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeEsMvx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldStakeMultiplierPoints\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldClaimWeth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertWethToEth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldAddIntoMVLP\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldConvertMvxAndStake\",\"type\":\"bool\"}],\"name\":\"handleRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMvxTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMvlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedMvlpTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvxVester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvlpVester\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMvlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMvlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMvlp\",\"type\":\"uint256\"}],\"name\":\"mintAndStakeMvlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvlpVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvxVester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"signalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeMvxForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMvlpTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedMvxTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mvlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMvlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mvlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeAndRedeemMvlpETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEsMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeMvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reward/RewardRouter.sol\":\"RewardRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/core/interfaces/IMvlpManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMvlpManager {\\n    function cooldownDuration() external returns (uint256);\\n\\n    function lastAddedAt(address _account) external returns (uint256);\\n\\n    function addLiquidity(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdm,\\n        uint256 _minMvlp\\n    ) external returns (uint256);\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdm,\\n        uint256 _minMvlp\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        address _tokenOut,\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        address _tokenOut,\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6ab889302a24d487bf9439ccced1742e629f73817d326c5ff23016fd12e04ff5\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdm() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdmAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdmAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xc247c3dc87351e3bdc8dc14694ca7ee035b9e52ccfd7abcfe0f6e59f1d1598e0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken,\\n        address _indexToken\\n    ) external returns (bool);\\n\\n    function validateIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external view;\\n\\n    function validateDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external view;\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function getEntryFundingRate(\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getPositionFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getFundingFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _usdmAmount\\n    ) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xafc12294f1c958c02e178106e3db33710a7f4c904f8ef5f1549ceba151427509\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2179c12e4ac50e8a769b1b43f43558f42bf511fcd7236e034c13c6e4450dbe85\",\"license\":\"MIT\"},\"contracts/libraries/token/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"STF\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST\\\");\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\",\"keccak256\":\"0x12e6a16dc8858829d5f98b47a06385ce57c7094d9f2950cc2f30feb058b1ebb8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ac6523715fd08440082ed1ab1db37b7b5a009f9948c29ce1e63d17171e1ba6\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x223b08d372e9f820805da8b8cbc742bf4c0b7e9fdd1cab8165006ba570ce0b52\",\"license\":\"MIT\"},\"contracts/peripherals/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\",\"keccak256\":\"0x1e1cb4e4c27dd48ce1621441e9984be5e54a306affa8a72e6bea802a65bf53ae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/peripherals/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x0b55e4b363711251c767e2ea579cdab2625e81857b2ccebe26060ce5bcf428f8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/reward/RewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/token/TransferHelper.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"./interfaces/IVester.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../core/interfaces/IMvlpManager.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../peripherals/interfaces/ISwapRouter.sol\\\";\\n\\ncontract RewardRouter is ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    bool public isInitialized;\\n\\n    address public weth;\\n\\n\\n    ISwapRouter public immutable swapRouter;\\n\\n    address public vault;\\n    address public usdc;\\n    address public mvx;\\n    address public esMvx;\\n    address public bnMvx;\\n\\n    address public mvlp; // MVX Liquidity Provider token\\n\\n    address public stakedMvxTracker;\\n    address public bonusMvxTracker;\\n    address public feeMvxTracker;\\n\\n    address public stakedMvlpTracker;\\n    address public feeMvlpTracker;\\n\\n    address public mvlpManager;\\n\\n    address public mvxVester;\\n    address public mvlpVester;\\n\\n    mapping(address => address) public pendingReceivers;\\n\\n    event StakeMvx(address account, address token, uint256 amount);\\n    event UnstakeMvx(address account, address token, uint256 amount);\\n\\n    event StakeMvlp(address account, uint256 amount);\\n    event UnstakeMvlp(address account, uint256 amount);\\n\\n    receive() external payable {\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\n    }\\n\\n    uint24 public constant MVX_USDC_POOL_FEE = 10000;\\n\\n    constructor(address _swapRouter,\\n        address _weth,\\n        address _mvx,\\n        address _esMvx,\\n        address _bnMvx,\\n        address _mvlp,       \\n        address _usdc,\\n        address _vault    \\n    ) public{\\n        swapRouter = ISwapRouter(_swapRouter);\\n        weth = _weth;\\n        mvx = _mvx;\\n        esMvx = _esMvx;\\n        bnMvx = _bnMvx;\\n        mvlp = _mvlp;        \\n        usdc = _usdc;\\n        vault = _vault;\\n    }\\n\\n    function initialize(\\n        address _stakedMvxTracker,\\n        address _bonusMvxTracker,\\n        address _feeMvxTracker,\\n        address _feeMvlpTracker,\\n        address _stakedMvlpTracker,\\n        address _mvlpManager,\\n        address _mvxVester,\\n        address _mvlpVester\\n    ) external onlyGov {\\n        require(!isInitialized, \\\"RewardRouter: already initialized\\\");\\n        isInitialized = true;\\n\\n        stakedMvxTracker = _stakedMvxTracker;\\n        bonusMvxTracker = _bonusMvxTracker;\\n        feeMvxTracker = _feeMvxTracker;\\n\\n        feeMvlpTracker = _feeMvlpTracker;\\n        stakedMvlpTracker = _stakedMvlpTracker;\\n\\n        mvlpManager = _mvlpManager;\\n\\n        mvxVester = _mvxVester;\\n        mvlpVester = _mvlpVester;\\n\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function batchStakeMvxForAccount(address[] memory _accounts, uint256[] memory _amounts) external nonReentrant onlyGov {\\n        address _mvx = mvx;\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _stakeMvx(msg.sender, _accounts[i], _mvx, _amounts[i]);\\n        }\\n    }\\n\\n    function stakeMvxForAccount(address _account, uint256 _amount) external nonReentrant onlyGov {\\n        _stakeMvx(msg.sender, _account, mvx, _amount);\\n    }\\n\\n    function stakeMvx(uint256 _amount) external nonReentrant {\\n        _stakeMvx(msg.sender, msg.sender, mvx, _amount);\\n    }\\n\\n    function stakeEsMvx(uint256 _amount) external nonReentrant {\\n        _stakeMvx(msg.sender, msg.sender, esMvx, _amount);\\n    }\\n\\n    function unstakeMvx(uint256 _amount) external nonReentrant {\\n        _unstakeMvx(msg.sender, mvx, _amount, true);\\n    }\\n\\n    function unstakeEsMvx(uint256 _amount) external nonReentrant {\\n        _unstakeMvx(msg.sender, esMvx, _amount, true);\\n    }\\n\\n    function mintAndStakeMvlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdm,\\n        uint256 _minMvlp\\n    ) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        address account = msg.sender;\\n        uint256 mvlpAmount = IMvlpManager(mvlpManager).addLiquidityForAccount(account, account, _token, _amount, _minUsdm, _minMvlp);\\n        IRewardTracker(feeMvlpTracker).stakeForAccount(account, account, mvlp, mvlpAmount);\\n        IRewardTracker(stakedMvlpTracker).stakeForAccount(account, account, feeMvlpTracker, mvlpAmount);\\n\\n        emit StakeMvlp(account, mvlpAmount);\\n\\n        return mvlpAmount;\\n    }\\n\\n    function mintAndStakeMvlpETH(uint256 _minUsdm, uint256 _minMvlp) external payable nonReentrant returns (uint256) {\\n        require(msg.value > 0, \\\"RewardRouter: invalid msg.value\\\");\\n\\n        IWETH(weth).deposit{value: msg.value}();\\n        return _mintAndStakeMvlpETH(msg.value,_minUsdm, _minMvlp);\\n    }\\n\\n    function _mintAndStakeMvlpETH(uint256 _amount,uint256 _minUsdm, uint256 _minMvlp) private returns (uint256) {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IERC20(weth).approve(mvlpManager, _amount);\\n\\n        address account = msg.sender;\\n        uint256 mvlpAmount = IMvlpManager(mvlpManager).addLiquidityForAccount(address(this), account, weth, _amount, _minUsdm, _minMvlp);\\n\\n        IRewardTracker(feeMvlpTracker).stakeForAccount(account, account, mvlp, mvlpAmount);\\n        IRewardTracker(stakedMvlpTracker).stakeForAccount(account, account, feeMvlpTracker, mvlpAmount);\\n\\n        emit StakeMvlp(account, mvlpAmount);\\n\\n        return mvlpAmount;\\n    }\\n\\n    function unstakeAndRedeemMvlp(\\n        address _tokenOut,\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external nonReentrant returns (uint256) {\\n        require(_mvlpAmount > 0, \\\"RewardRouter: invalid _mvlpAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedMvlpTracker).unstakeForAccount(account, feeMvlpTracker, _mvlpAmount, account);\\n        IRewardTracker(feeMvlpTracker).unstakeForAccount(account, mvlp, _mvlpAmount, account);\\n        uint256 amountOut = IMvlpManager(mvlpManager).removeLiquidityForAccount(account, _tokenOut, _mvlpAmount, _minOut, _receiver);\\n\\n        emit UnstakeMvlp(account, _mvlpAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function unstakeAndRedeemMvlpETH(\\n        uint256 _mvlpAmount,\\n        uint256 _minOut,\\n        address payable _receiver\\n    ) external nonReentrant returns (uint256) {\\n        require(_mvlpAmount > 0, \\\"RewardRouter: invalid _mvlpAmount\\\");\\n\\n        address account = msg.sender;\\n        IRewardTracker(stakedMvlpTracker).unstakeForAccount(account, feeMvlpTracker, _mvlpAmount, account);\\n        IRewardTracker(feeMvlpTracker).unstakeForAccount(account, mvlp, _mvlpAmount, account);\\n        uint256 amountOut = IMvlpManager(mvlpManager).removeLiquidityForAccount(account, weth, _mvlpAmount, _minOut, address(this));\\n\\n        IWETH(weth).withdraw(amountOut);\\n\\n        _receiver.sendValue(amountOut);\\n\\n        emit UnstakeMvlp(account, _mvlpAmount);\\n\\n        return amountOut;\\n    }\\n\\n    function claim() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n\\n        IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimEsMvx() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function claimFees() external nonReentrant {\\n        address account = msg.sender;\\n\\n        IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n        IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n    }\\n\\n    function compound() external nonReentrant {\\n        _compound(msg.sender);\\n    }\\n\\n    function compoundForAccount(address _account) external nonReentrant onlyGov {\\n        _compound(_account);\\n    }\\n\\n    function handleRewards(\\n        bool _shouldClaimMvx,\\n        bool _shouldStakeMvx,\\n        bool _shouldClaimEsMvx,\\n        bool _shouldStakeEsMvx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth,\\n        bool _shouldAddIntoMVLP,\\n        bool _shouldConvertMvxAndStake\\n    ) external nonReentrant returns (uint256 amountOut) {\\n        address account = msg.sender;\\n\\n        uint256 mvxAmount = 0;\\n        if (_shouldClaimMvx) {\\n            uint256 mvxAmount0 = IVester(mvxVester).claimForAccount(account, account);\\n            uint256 mvxAmount1 = IVester(mvlpVester).claimForAccount(account, account);\\n            mvxAmount = mvxAmount0.add(mvxAmount1);\\n        }\\n\\n        if (_shouldStakeMvx && mvxAmount > 0) {\\n            _stakeMvx(account, account, mvx, mvxAmount);\\n        }\\n\\n        uint256 esMvxAmount = 0;\\n        if (_shouldClaimEsMvx) {\\n            uint256 esMvxAmount0 = IRewardTracker(stakedMvxTracker).claimForAccount(account, account);\\n            uint256 esMvxAmount1 = IRewardTracker(stakedMvlpTracker).claimForAccount(account, account);\\n            esMvxAmount = esMvxAmount0.add(esMvxAmount1);\\n        }\\n\\n        if (_shouldStakeEsMvx && esMvxAmount > 0) {\\n            _stakeMvx(account, account, esMvx, esMvxAmount);\\n        }\\n\\n        if (_shouldStakeMultiplierPoints) {\\n            uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(account, account);\\n            if (bnMvxAmount > 0) {\\n                IRewardTracker(feeMvxTracker).stakeForAccount(account, account, bnMvx, bnMvxAmount);\\n            }\\n        }\\n\\n        if (_shouldClaimWeth) {\\n            if (_shouldConvertWethToEth || _shouldAddIntoMVLP || _shouldConvertMvxAndStake) {\\n                uint256 weth0 = IRewardTracker(feeMvxTracker).claimForAccount(account, address(this));\\n                uint256 weth1 = IRewardTracker(feeMvlpTracker).claimForAccount(account, address(this));\\n\\n                uint256 wethAmount = weth0.add(weth1);\\n                \\n\\n                if(_shouldAddIntoMVLP){\\n                    amountOut = _mintAndStakeMvlpETH(wethAmount,0,0);\\n                }else if(_shouldConvertMvxAndStake){\\n                    //convert weth->usdc->mvx and stake\\n\\n                    IERC20(weth).safeTransfer(vault, wethAmount);\\n\\n                    //convert weth->usdc via vault\\n                    uint256 usdcAmountOut = IVault(vault).swap(weth, usdc, address(this));\\n\\n                    //convert usdc->mvx via uniswap\\n                     uint256 mvxAmountOut = _swapExactInputSingle(usdcAmountOut);\\n\\n                    if (mvxAmountOut > 0) {\\n                        TransferHelper.safeApprove(mvx, stakedMvxTracker, mvxAmountOut);\\n                        _stakeMvx(address(this), account, mvx, mvxAmountOut);\\n                        amountOut = mvxAmountOut;\\n                    }\\n\\n                }else{\\n                    IWETH(weth).withdraw(wethAmount);\\n                    payable(account).sendValue(wethAmount);\\n                }\\n            } else {\\n                IRewardTracker(feeMvxTracker).claimForAccount(account, account);\\n                IRewardTracker(feeMvlpTracker).claimForAccount(account, account);\\n            }\\n        }\\n    }\\n\\n    function _swapExactInputSingle(uint256 amountIn) private returns (uint256 amountOut) {\\n        TransferHelper.safeApprove(usdc, address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: usdc,\\n                tokenOut: mvx,\\n                fee: MVX_USDC_POOL_FEE,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function batchCompoundForAccounts(address[] memory _accounts) external nonReentrant onlyGov {\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            _compound(_accounts[i]);\\n        }\\n    }\\n\\n    function signalTransfer(address _receiver) external nonReentrant {\\n        require(IERC20(mvxVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(mvlpVester).balanceOf(msg.sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        _validateReceiver(_receiver);\\n        pendingReceivers[msg.sender] = _receiver;\\n    }\\n\\n    function acceptTransfer(address _sender) external nonReentrant {\\n        require(IERC20(mvxVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n        require(IERC20(mvlpVester).balanceOf(_sender) == 0, \\\"RewardRouter: sender has vested tokens\\\");\\n\\n        address receiver = msg.sender;\\n        require(pendingReceivers[_sender] == receiver, \\\"RewardRouter: transfer not signalled\\\");\\n        delete pendingReceivers[_sender];\\n\\n        _validateReceiver(receiver);\\n        _compound(_sender);\\n\\n        uint256 stakedMvx = IRewardTracker(stakedMvxTracker).depositBalances(_sender, mvx);\\n        if (stakedMvx > 0) {\\n            _unstakeMvx(_sender, mvx, stakedMvx, false);\\n            _stakeMvx(_sender, receiver, mvx, stakedMvx);\\n        }\\n\\n        uint256 stakedEsMvx = IRewardTracker(stakedMvxTracker).depositBalances(_sender, esMvx);\\n        if (stakedEsMvx > 0) {\\n            _unstakeMvx(_sender, esMvx, stakedEsMvx, false);\\n            _stakeMvx(_sender, receiver, esMvx, stakedEsMvx);\\n        }\\n\\n        uint256 stakedBnMvx = IRewardTracker(feeMvxTracker).depositBalances(_sender, bnMvx);\\n        if (stakedBnMvx > 0) {\\n            IRewardTracker(feeMvxTracker).unstakeForAccount(_sender, bnMvx, stakedBnMvx, _sender);\\n            IRewardTracker(feeMvxTracker).stakeForAccount(_sender, receiver, bnMvx, stakedBnMvx);\\n        }\\n\\n        uint256 esMvxBalance = IERC20(esMvx).balanceOf(_sender);\\n        if (esMvxBalance > 0) {\\n            IERC20(esMvx).transferFrom(_sender, receiver, esMvxBalance);\\n        }\\n\\n        uint256 mvlpAmount = IRewardTracker(feeMvlpTracker).depositBalances(_sender, mvlp);\\n        if (mvlpAmount > 0) {\\n            IRewardTracker(stakedMvlpTracker).unstakeForAccount(_sender, feeMvlpTracker, mvlpAmount, _sender);\\n            IRewardTracker(feeMvlpTracker).unstakeForAccount(_sender, mvlp, mvlpAmount, _sender);\\n\\n            IRewardTracker(feeMvlpTracker).stakeForAccount(_sender, receiver, mvlp, mvlpAmount);\\n            IRewardTracker(stakedMvlpTracker).stakeForAccount(receiver, receiver, feeMvlpTracker, mvlpAmount);\\n        }\\n\\n        IVester(mvxVester).transferStakeValues(_sender, receiver);\\n        IVester(mvlpVester).transferStakeValues(_sender, receiver);\\n    }\\n\\n    function _validateReceiver(address _receiver) private view {\\n        require(IRewardTracker(stakedMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(bonusMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: bonusMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(bonusMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: bonusMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeMvxTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeMvxTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeMvxTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeMvxTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(mvxVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(mvxVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(stakedMvlpTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: stakedMvlpTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(stakedMvlpTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: stakedMvlpTracker.cumulativeRewards > 0\\\");\\n\\n        require(IRewardTracker(feeMvlpTracker).averageStakedAmounts(_receiver) == 0, \\\"RewardRouter: feeMvlpTracker.averageStakedAmounts > 0\\\");\\n        require(IRewardTracker(feeMvlpTracker).cumulativeRewards(_receiver) == 0, \\\"RewardRouter: feeMvlpTracker.cumulativeRewards > 0\\\");\\n\\n        require(IVester(mvlpVester).transferredAverageStakedAmounts(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredAverageStakedAmounts > 0\\\");\\n        require(IVester(mvlpVester).transferredCumulativeRewards(_receiver) == 0, \\\"RewardRouter: mvxVester.transferredCumulativeRewards > 0\\\");\\n\\n        require(IERC20(mvxVester).balanceOf(_receiver) == 0, \\\"RewardRouter: mvxVester.balance > 0\\\");\\n        require(IERC20(mvlpVester).balanceOf(_receiver) == 0, \\\"RewardRouter: mvlpVester.balance > 0\\\");\\n    }\\n\\n    function _compound(address _account) private {\\n        _compoundMvx(_account);\\n        _compoundMvlp(_account);\\n    }\\n\\n    function _compoundMvx(address _account) private {\\n        uint256 esMvxAmount = IRewardTracker(stakedMvxTracker).claimForAccount(_account, _account);\\n        if (esMvxAmount > 0) {\\n            _stakeMvx(_account, _account, esMvx, esMvxAmount);\\n        }\\n\\n        uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(_account, _account);\\n        if (bnMvxAmount > 0) {\\n            IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bnMvx, bnMvxAmount);\\n        }\\n    }\\n\\n    function _compoundMvlp(address _account) private {\\n        uint256 esMvxAmount = IRewardTracker(stakedMvlpTracker).claimForAccount(_account, _account);\\n        if (esMvxAmount > 0) {\\n            _stakeMvx(_account, _account, esMvx, esMvxAmount);\\n        }\\n    }\\n\\n    function _stakeMvx(\\n        address _fundingAccount,\\n        address _account,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        IRewardTracker(stakedMvxTracker).stakeForAccount(_fundingAccount, _account, _token, _amount);\\n        IRewardTracker(bonusMvxTracker).stakeForAccount(_account, _account, stakedMvxTracker, _amount);\\n        IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bonusMvxTracker, _amount);\\n\\n        emit StakeMvx(_account, _token, _amount);\\n    }\\n\\n    function _unstakeMvx(\\n        address _account,\\n        address _token,\\n        uint256 _amount,\\n        bool _shouldReduceBnMvx\\n    ) private {\\n        require(_amount > 0, \\\"RewardRouter: invalid _amount\\\");\\n\\n        uint256 balance = IRewardTracker(stakedMvxTracker).stakedAmounts(_account);\\n\\n        IRewardTracker(feeMvxTracker).unstakeForAccount(_account, bonusMvxTracker, _amount, _account);\\n        IRewardTracker(bonusMvxTracker).unstakeForAccount(_account, stakedMvxTracker, _amount, _account);\\n        IRewardTracker(stakedMvxTracker).unstakeForAccount(_account, _token, _amount, _account);\\n\\n        if (_shouldReduceBnMvx) {\\n            uint256 bnMvxAmount = IRewardTracker(bonusMvxTracker).claimForAccount(_account, _account);\\n            if (bnMvxAmount > 0) {\\n                IRewardTracker(feeMvxTracker).stakeForAccount(_account, _account, bnMvx, bnMvxAmount);\\n            }\\n\\n            uint256 stakedBnMvx = IRewardTracker(feeMvxTracker).depositBalances(_account, bnMvx);\\n            if (stakedBnMvx > 0) {\\n                uint256 reductionAmount = stakedBnMvx.mul(_amount).div(balance);\\n                IRewardTracker(feeMvxTracker).unstakeForAccount(_account, bnMvx, reductionAmount, _account);\\n                IMintable(bnMvx).burn(_account, reductionAmount);\\n            }\\n        }\\n\\n        emit UnstakeMvx(_account, _token, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe27ba6919e8ecc7a434d5224ad2c2f46bfe5f505bbf499404955e5b3ed5467f5\",\"license\":\"MIT\"},\"contracts/reward/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards() external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval() external view returns (uint256);\\n    function claim(address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n    function claimable(address _account) external view returns (uint256);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaaacb5c485b9aaf2a290489fe212471580e5a7ba8ac022fe6d7fdd1e864a5330\",\"license\":\"MIT\"},\"contracts/reward/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVester {\\n    function rewardTracker() external view returns (address);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n    function claimedAmounts(address _account) external view returns (uint256);\\n    function pairAmounts(address _account) external view returns (uint256);\\n    function getVestedAmount(address _account) external view returns (uint256);\\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n    function bonusRewards(address _account) external view returns (uint256);\\n\\n    function transferStakeValues(address _sender, address _receiver) external;\\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n    function setBonusRewards(address _account, uint256 _amount) external;\\n\\n    function getMaxVestableAmount(address _account) external view returns (uint256);\\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xae96cdbfc636a9af965a3805d09626e578845b3e04eb54960c277cda55bc1855\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n    function setMinter(address _minter, bool _isActive) external;\\n    function mint(address _account, uint256 _amount) external;\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb1174808dcd4195a8fadf042f9e8e3808ae61842af7ed29b3ec059a206c7f1fe\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x29613132c0162f9cdc8336e895d1da9aaf3660909adcf1a0134d714e53524ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c8063655603a411610139578063d294f093116100b6578063ebe1b08c1161007a578063ebe1b08c14610673578063ef9aacfd14610688578063f69786df146106a8578063f69e2046146106bd578063f963ba68146106d2578063fbfa77cf146106f25761028f565b8063d294f093146105f4578063dc1e316414610609578063e1b9db8914610629578063e616254914610649578063eb81fabf1461065e5761028f565b80638a29e2de116100fd5780638a29e2de1461056a57806390ee4ce71461058a578063c31c9c071461059f578063cfad57a2146105b4578063cfe623e5146105d45761028f565b8063655603a4146104d557806377a83086146104f55780637ca2577914610515578063877d5ffc14610535578063878a068a146105555761028f565b80633b873237116101d2578063447f0bc911610196578063447f0bc91461044e57806346156a5e146104635780634c19b6ce146104765780634e71d92d1461048b5780634fbb6103146104a057806362e20739146104b55761028f565b80633b873237146103cf5780633e413bee146103ef5780633f4b8f3d146104045780633fc8cef31461042457806342a19ca2146104395761028f565b80631af276a6116102195780631af276a61461032b5780631fdcbc481461034b57806326425f56146103785780632a9f40831461038d578063392e53cd146103ad5761028f565b8063018e84911461029457806301e33667146102bf5780630af5db5a146102df57806312d43a511461030157806318a42040146103165761028f565b3661028f576002546001600160a01b0316331461028d5760405162461bcd60e51b815260040161028490614ba6565b60405180910390fd5b005b600080fd5b3480156102a057600080fd5b506102a9610707565b6040516102b691906153d9565b60405180910390f35b3480156102cb57600080fd5b5061028d6102da3660046145ec565b61070d565b3480156102eb57600080fd5b506102f4610750565b6040516102b69190614952565b34801561030d57600080fd5b506102f461075f565b34801561032257600080fd5b506102f461076e565b34801561033757600080fd5b5061028d6103463660046146da565b61077d565b34801561035757600080fd5b5061036b610366366004614657565b610808565b6040516102b691906153e9565b34801561038457600080fd5b506102f46109fe565b34801561039957600080fd5b5061028d6103a8366004614528565b610a0d565b3480156103b957600080fd5b506103c2610a70565b6040516102b69190614a9e565b3480156103db57600080fd5b5061036b6103ea3660046148ee565b610a80565b3480156103fb57600080fd5b506102f4610cee565b34801561041057600080fd5b5061036b61041f3660046147e2565b610cfd565b34801561043057600080fd5b506102f46114d1565b34801561044557600080fd5b506102f46114e0565b34801561045a57600080fd5b506102f46114ef565b61036b6104713660046148cd565b6114fe565b34801561048257600080fd5b506102f46115c5565b34801561049757600080fd5b5061028d6115d4565b3480156104ac57600080fd5b506102f461180f565b3480156104c157600080fd5b5061028d6104d036600461489d565b61181e565b3480156104e157600080fd5b5061028d6104f0366004614528565b611860565b34801561050157600080fd5b5061028d61051036600461489d565b61214f565b34801561052157600080fd5b5061028d61053036600461462c565b612191565b34801561054157600080fd5b5061028d61055036600461489d565b6121fd565b34801561056157600080fd5b5061028d61223f565b34801561057657600080fd5b5061028d610585366004614544565b612299565b34801561059657600080fd5b506102f4612390565b3480156105ab57600080fd5b506102f461239f565b3480156105c057600080fd5b5061028d6105cf366004614528565b6123c3565b3480156105e057600080fd5b5061028d6105ef36600461489d565b61240f565b34801561060057600080fd5b5061028d612451565b34801561061557600080fd5b5061028d61062436600461470d565b612530565b34801561063557600080fd5b506102f4610644366004614528565b6125df565b34801561065557600080fd5b506102f46125fa565b34801561066a57600080fd5b506102f4612609565b34801561067f57600080fd5b506102f4612618565b34801561069457600080fd5b5061028d6106a3366004614528565b612627565b3480156106b457600080fd5b506102f46127c6565b3480156106c957600080fd5b5061028d6127d5565b3480156106de57600080fd5b5061036b6106ed3660046146a0565b61280d565b3480156106fe57600080fd5b506102f46129f2565b61271081565b6001546001600160a01b031633146107375760405162461bcd60e51b815260040161028490614f4c565b61074b6001600160a01b0384168383612a01565b505050565b600b546001600160a01b031681565b6001546001600160a01b031681565b6009546001600160a01b031681565b600260005414156107a05760405162461bcd60e51b8152600401610284906152d8565b60026000556001546001600160a01b031633146107cf5760405162461bcd60e51b815260040161028490614f4c565b60005b81518110156107ff576107f78282815181106107ea57fe5b6020026020010151612a57565b6001016107d2565b50506001600055565b60006002600054141561082d5760405162461bcd60e51b8152600401610284906152d8565b60026000558361084f5760405162461bcd60e51b815260040161028490615297565b600c54600d5460405163098bf59d60e01b815233926001600160a01b039081169263098bf59d9261088a92869216908a908390600401614a2a565b600060405180830381600087803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b5050600d5460085460405163098bf59d60e01b81526001600160a01b03928316945063098bf59d93506108f592869216908a908390600401614a2a565b600060405180830381600087803b15801561090f57600080fd5b505af1158015610923573d6000803e3d6000fd5b5050600e546040516371d597ad60e01b8152600093506001600160a01b0390911691506371d597ad906109629085908b908b908b908b90600401614a55565b602060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b491906148b5565b90507ff684faf593dafe878a9fdccfb0b06ed0463d9a5350c68300efcd3da6113820eb82876040516109e7929190614a85565b60405180910390a160016000559695505050505050565b6010546001600160a01b031681565b60026000541415610a305760405162461bcd60e51b8152600401610284906152d8565b60026000556001546001600160a01b03163314610a5f5760405162461bcd60e51b815260040161028490614f4c565b610a6881612a57565b506001600055565b600154600160a01b900460ff1681565b600060026000541415610aa55760405162461bcd60e51b8152600401610284906152d8565b600260005583610ac75760405162461bcd60e51b815260040161028490615297565b600c54600d5460405163098bf59d60e01b815233926001600160a01b039081169263098bf59d92610b0292869216908a908390600401614a2a565b600060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b5050600d5460085460405163098bf59d60e01b81526001600160a01b03928316945063098bf59d9350610b6d92869216908a908390600401614a2a565b600060405180830381600087803b158015610b8757600080fd5b505af1158015610b9b573d6000803e3d6000fd5b5050600e546002546040516371d597ad60e01b8152600094506001600160a01b0392831693506371d597ad92610bde9287929116908b908b903090600401614a55565b602060405180830381600087803b158015610bf857600080fd5b505af1158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3091906148b5565b600254604051632e1a7d4d60e01b81529192506001600160a01b031690632e1a7d4d90610c619084906004016153e9565b600060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b50610ca7925050506001600160a01b03851682612a6c565b7ff684faf593dafe878a9fdccfb0b06ed0463d9a5350c68300efcd3da6113820eb8287604051610cd8929190614a85565b60405180910390a1600160005595945050505050565b6004546001600160a01b031681565b600060026000541415610d225760405162461bcd60e51b8152600401610284906152d8565b6002600090815533908b15610e5157600f546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a90610d64908690819060040161499f565b602060405180830381600087803b158015610d7e57600080fd5b505af1158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db691906148b5565b6010546040516309f4173d60e11b81529192506000916001600160a01b03909116906313e82e7a90610dee908790819060040161499f565b602060405180830381600087803b158015610e0857600080fd5b505af1158015610e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4091906148b5565b9050610e4c8282612b08565b925050505b8a8015610e5e5750600081115b15610e7d57600554610e7d90839081906001600160a01b031684612b36565b60008a15610fa5576009546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a90610eb8908790819060040161499f565b602060405180830381600087803b158015610ed257600080fd5b505af1158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a91906148b5565b600c546040516309f4173d60e11b81529192506000916001600160a01b03909116906313e82e7a90610f42908890819060040161499f565b602060405180830381600087803b158015610f5c57600080fd5b505af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9491906148b5565b9050610fa08282612b08565b925050505b898015610fb25750600081115b15610fd157600654610fd190849081906001600160a01b031684612b36565b88156110d257600a546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a9061100a908790819060040161499f565b602060405180830381600087803b15801561102457600080fd5b505af1158015611038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105c91906148b5565b905080156110d057600b54600754604051631e42d69b60e21b81526001600160a01b039283169263790b5a6c9261109d9289928392169087906004016149dc565b600060405180830381600087803b1580156110b757600080fd5b505af11580156110cb573d6000803e3d6000fd5b505050505b505b87156114bc5786806110e15750855b806110e95750845b156113b157600b546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a90611121908790309060040161499f565b602060405180830381600087803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117391906148b5565b600d546040516309f4173d60e11b81529192506000916001600160a01b03909116906313e82e7a906111ab908890309060040161499f565b602060405180830381600087803b1580156111c557600080fd5b505af11580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd91906148b5565b9050600061120b8383612b08565b905088156112265761121f81600080612cd7565b96506113a9565b871561133357600354600254611249916001600160a01b03918216911683612a01565b60035460025460048054604051634998b10960e11b81526000946001600160a01b039081169463933162129461128a949183169391909216913091016149b9565b602060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906148b5565b905060006112e982612f37565b9050801561132c5760055460095461130e916001600160a01b0390811691168361305d565b6005546113289030908a906001600160a01b031684612b36565b8098505b50506113a9565b600254604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d906113639084906004016153e9565b600060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b506113a9925050506001600160a01b03871682612a6c565b5050506114bc565b600b546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a906113e3908690819060040161499f565b602060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143591906148b5565b50600d546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a90611468908690819060040161499f565b602060405180830381600087803b15801561148257600080fd5b505af1158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba91906148b5565b505b50506001600055509998505050505050505050565b6002546001600160a01b031681565b6007546001600160a01b031681565b600c546001600160a01b031681565b6000600260005414156115235760405162461bcd60e51b8152600401610284906152d8565b6002600055346115455760405162461bcd60e51b815260040161028490614ca7565b600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561159557600080fd5b505af11580156115a9573d6000803e3d6000fd5b50505050506115b9348484612cd7565b60016000559392505050565b6006546001600160a01b031681565b600260005414156115f75760405162461bcd60e51b8152600401610284906152d8565b6002600055600b546040516309f4173d60e11b815233916001600160a01b0316906313e82e7a9061162e908490819060040161499f565b602060405180830381600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168091906148b5565b50600d546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a906116b3908490819060040161499f565b602060405180830381600087803b1580156116cd57600080fd5b505af11580156116e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170591906148b5565b506009546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a90611738908490819060040161499f565b602060405180830381600087803b15801561175257600080fd5b505af1158015611766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178a91906148b5565b50600c546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a906117bd908490819060040161499f565b602060405180830381600087803b1580156117d757600080fd5b505af11580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906148b5565b600d546001600160a01b031681565b600260005414156118415760405162461bcd60e51b8152600401610284906152d8565b6002600055600654610a6890339081906001600160a01b031684612b36565b600260005414156118835760405162461bcd60e51b8152600401610284906152d8565b6002600055600f546040516370a0823160e01b81526001600160a01b03909116906370a08231906118b8908490600401614952565b60206040518083038186803b1580156118d057600080fd5b505afa1580156118e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190891906148b5565b156119255760405162461bcd60e51b815260040161028490614bd6565b6010546040516370a0823160e01b81526001600160a01b03909116906370a0823190611955908490600401614952565b60206040518083038186803b15801561196d57600080fd5b505afa158015611981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a591906148b5565b156119c25760405162461bcd60e51b815260040161028490614bd6565b6001600160a01b0381811660009081526011602052604090205433911681146119fd5760405162461bcd60e51b815260040161028490614f08565b6001600160a01b038216600090815260116020526040902080546001600160a01b0319169055611a2c81613153565b611a3582612a57565b600954600554604051637aeceb1f60e11b81526000926001600160a01b039081169263f5d9d63e92611a6d928892169060040161499f565b60206040518083038186803b158015611a8557600080fd5b505afa158015611a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abd91906148b5565b90508015611af957600554611adf9084906001600160a01b0316836000613b23565b600554611af990849084906001600160a01b031684612b36565b600954600654604051637aeceb1f60e11b81526000926001600160a01b039081169263f5d9d63e92611b31928992169060040161499f565b60206040518083038186803b158015611b4957600080fd5b505afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8191906148b5565b90508015611bbd57600654611ba39085906001600160a01b0316836000613b23565b600654611bbd90859085906001600160a01b031684612b36565b600b54600754604051637aeceb1f60e11b81526000926001600160a01b039081169263f5d9d63e92611bf5928a92169060040161499f565b60206040518083038186803b158015611c0d57600080fd5b505afa158015611c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4591906148b5565b90508015611d2757600b5460075460405163098bf59d60e01b81526001600160a01b039283169263098bf59d92611c88928a929091169086908390600401614a2a565b600060405180830381600087803b158015611ca257600080fd5b505af1158015611cb6573d6000803e3d6000fd5b5050600b54600754604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350611cf4928a928a9291169087906004016149dc565b600060405180830381600087803b158015611d0e57600080fd5b505af1158015611d22573d6000803e3d6000fd5b505050505b6006546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611d58908990600401614952565b60206040518083038186803b158015611d7057600080fd5b505afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da891906148b5565b90508015611e38576006546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611de490899089908690600401614a06565b602060405180830381600087803b158015611dfe57600080fd5b505af1158015611e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3691906147c6565b505b600d54600854604051637aeceb1f60e11b81526000926001600160a01b039081169263f5d9d63e92611e70928c92169060040161499f565b60206040518083038186803b158015611e8857600080fd5b505afa158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec091906148b5565b9050801561207957600c54600d5460405163098bf59d60e01b81526001600160a01b039283169263098bf59d92611f03928c929091169086908390600401614a2a565b600060405180830381600087803b158015611f1d57600080fd5b505af1158015611f31573d6000803e3d6000fd5b5050600d5460085460405163098bf59d60e01b81526001600160a01b03928316945063098bf59d9350611f6e928c92169086908390600401614a2a565b600060405180830381600087803b158015611f8857600080fd5b505af1158015611f9c573d6000803e3d6000fd5b5050600d54600854604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350611fda928c928c9291169087906004016149dc565b600060405180830381600087803b158015611ff457600080fd5b505af1158015612008573d6000803e3d6000fd5b5050600c54600d54604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350612046928b92839291169087906004016149dc565b600060405180830381600087803b15801561206057600080fd5b505af1158015612074573d6000803e3d6000fd5b505050505b600f54604051630f713c2360e41b81526001600160a01b039091169063f713c230906120ab908a908a9060040161499f565b600060405180830381600087803b1580156120c557600080fd5b505af11580156120d9573d6000803e3d6000fd5b5050601054604051630f713c2360e41b81526001600160a01b03909116925063f713c230915061210f908a908a9060040161499f565b600060405180830381600087803b15801561212957600080fd5b505af115801561213d573d6000803e3d6000fd5b50506001600055505050505050505050565b600260005414156121725760405162461bcd60e51b8152600401610284906152d8565b6002600055600554610a6890339081906001600160a01b031684612b36565b600260005414156121b45760405162461bcd60e51b8152600401610284906152d8565b60026000556001546001600160a01b031633146121e35760405162461bcd60e51b815260040161028490614f4c565b6005546107ff90339084906001600160a01b031684612b36565b600260005414156122205760405162461bcd60e51b8152600401610284906152d8565b6002600055600654610a689033906001600160a01b0316836001613b23565b600260005414156122625760405162461bcd60e51b8152600401610284906152d8565b60026000556009546040516309f4173d60e11b815233916001600160a01b0316906313e82e7a90611738908490819060040161499f565b6001546001600160a01b031633146122c35760405162461bcd60e51b815260040161028490614f4c565b600154600160a01b900460ff16156122ed5760405162461bcd60e51b815260040161028490614d8c565b60018054600160a01b60ff60a01b19909116179055600980546001600160a01b03199081166001600160a01b039a8b1617909155600a80548216988a1698909817909755600b8054881696891696909617909555600d8054871694881694909417909355600c8054861692871692909217909155600e80548516918616919091179055600f80548416918516919091179055601080549092169216919091179055565b600f546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b031633146123ed5760405162461bcd60e51b815260040161028490614f4c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156124325760405162461bcd60e51b8152600401610284906152d8565b6002600055600554610a689033906001600160a01b0316836001613b23565b600260005414156124745760405162461bcd60e51b8152600401610284906152d8565b6002600055600b546040516309f4173d60e11b815233916001600160a01b0316906313e82e7a906124ab908490819060040161499f565b602060405180830381600087803b1580156124c557600080fd5b505af11580156124d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fd91906148b5565b50600d546040516309f4173d60e11b81526001600160a01b03909116906313e82e7a906117bd908490819060040161499f565b600260005414156125535760405162461bcd60e51b8152600401610284906152d8565b60026000556001546001600160a01b031633146125825760405162461bcd60e51b815260040161028490614f4c565b6005546001600160a01b031660005b83518110156125d4576125cc338583815181106125aa57fe5b6020026020010151848685815181106125bf57fe5b6020026020010151612b36565b600101612591565b505060016000555050565b6011602052600090815260409020546001600160a01b031681565b600e546001600160a01b031681565b6005546001600160a01b031681565b6008546001600160a01b031681565b6002600054141561264a5760405162461bcd60e51b8152600401610284906152d8565b6002600055600f546040516370a0823160e01b81526001600160a01b03909116906370a082319061267f903390600401614952565b60206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf91906148b5565b156126ec5760405162461bcd60e51b815260040161028490614bd6565b6010546040516370a0823160e01b81526001600160a01b03909116906370a082319061271c903390600401614952565b60206040518083038186803b15801561273457600080fd5b505afa158015612748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276c91906148b5565b156127895760405162461bcd60e51b815260040161028490614bd6565b61279281613153565b33600090815260116020526040812080546001600160a01b0319166001600160a01b03939093169290921790915560019055565b600a546001600160a01b031681565b600260005414156127f85760405162461bcd60e51b8152600401610284906152d8565b600260005561280633612a57565b6001600055565b6000600260005414156128325760405162461bcd60e51b8152600401610284906152d8565b6002600055836128545760405162461bcd60e51b815260040161028490614ed1565b600e546040516317eb2a1560e01b815233916000916001600160a01b03909116906317eb2a159061289390859081908c908c908c908c90600401614966565b602060405180830381600087803b1580156128ad57600080fd5b505af11580156128c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e591906148b5565b600d54600854604051631e42d69b60e21b81529293506001600160a01b039182169263790b5a6c9261292392879283929091169087906004016149dc565b600060405180830381600087803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b5050600c54600d54604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c935061298f928792839291169087906004016149dc565b600060405180830381600087803b1580156129a957600080fd5b505af11580156129bd573d6000803e3d6000fd5b505050507ffce3ee85e2e412ef09992db90b048aff7ae30eb1013ba5b9ab3d8604d2336d4982826040516109e7929190614a85565b6003546001600160a01b031681565b61074b8363a9059cbb60e01b8484604051602401612a20929190614a85565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613fc5565b612a6081614054565b612a69816141f8565b50565b80471015612a8c5760405162461bcd60e51b815260040161028490614dcd565b6000826001600160a01b031682604051612aa59061494f565b60006040518083038185875af1925050503d8060008114612ae2576040519150601f19603f3d011682016040523d82523d6000602084013e612ae7565b606091505b505090508061074b5760405162461bcd60e51b815260040161028490614cde565b600082820183811015612b2d5760405162461bcd60e51b815260040161028490614c1c565b90505b92915050565b60008111612b565760405162461bcd60e51b815260040161028490614ed1565b600954604051631e42d69b60e21b81526001600160a01b039091169063790b5a6c90612b8c9087908790879087906004016149dc565b600060405180830381600087803b158015612ba657600080fd5b505af1158015612bba573d6000803e3d6000fd5b5050600a54600954604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350612bf8928892839291169087906004016149dc565b600060405180830381600087803b158015612c1257600080fd5b505af1158015612c26573d6000803e3d6000fd5b5050600b54600a54604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350612c64928892839291169087906004016149dc565b600060405180830381600087803b158015612c7e57600080fd5b505af1158015612c92573d6000803e3d6000fd5b505050507fa69efa6d0ae966c7903f49691b8d8e4ae5cb51adb92e07d0ee4438dc7fddb583838383604051612cc993929190614a06565b60405180910390a150505050565b6000808411612cf85760405162461bcd60e51b815260040161028490614ed1565b600254600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392612d2e929116908890600401614a85565b602060405180830381600087803b158015612d4857600080fd5b505af1158015612d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8091906147c6565b50600e546002546040516317eb2a1560e01b815233926000926001600160a01b03918216926317eb2a1592612dc59230928892909116908c908c908c90600401614966565b602060405180830381600087803b158015612ddf57600080fd5b505af1158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1791906148b5565b600d54600854604051631e42d69b60e21b81529293506001600160a01b039182169263790b5a6c92612e5592879283929091169087906004016149dc565b600060405180830381600087803b158015612e6f57600080fd5b505af1158015612e83573d6000803e3d6000fd5b5050600c54600d54604051631e42d69b60e21b81526001600160a01b03928316945063790b5a6c9350612ec1928792839291169087906004016149dc565b600060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b505050507ffce3ee85e2e412ef09992db90b048aff7ae30eb1013ba5b9ab3d8604d2336d498282604051612f24929190614a85565b60405180910390a19150505b9392505050565b600454600090612f71906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008461305d565b612f7961446d565b506040805161010081018252600480546001600160a01b039081168352600554811660208401526127108385015230606084015242608084015260a08301869052600060c0840181905260e0840152925163414bf38960e01b815291927f0000000000000000000000000000000000000000000000000000000000000000169163414bf3899161300b91859101615364565b602060405180830381600087803b15801561302557600080fd5b505af1158015613039573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3091906148b5565b60006060846001600160a01b031663095ea7b360e01b8585604051602401613086929190614a85565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516130c49190614933565b6000604051808303816000865af19150503d8060008114613101576040519150601f19603f3d011682016040523d82523d6000602084013e613106565b606091505b509150915081801561313057508051158061313057508080602001905181019061313091906147c6565b61314c5760405162461bcd60e51b815260040161028490614b8a565b5050505050565b60095460405163a318021760e01b81526001600160a01b039091169063a318021790613183908490600401614952565b60206040518083038186803b15801561319b57600080fd5b505afa1580156131af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d391906148b5565b156131f05760405162461bcd60e51b81526004016102849061506c565b600954604051633792def360e01b81526001600160a01b0390911690633792def390613220908490600401614952565b60206040518083038186803b15801561323857600080fd5b505afa15801561324c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327091906148b5565b1561328d5760405162461bcd60e51b8152600401610284906150fa565b600a5460405163a318021760e01b81526001600160a01b039091169063a3180217906132bd908490600401614952565b60206040518083038186803b1580156132d557600080fd5b505afa1580156132e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330d91906148b5565b1561332a5760405162461bcd60e51b815260040161028490614b34565b600a54604051633792def360e01b81526001600160a01b0390911690633792def39061335a908490600401614952565b60206040518083038186803b15801561337257600080fd5b505afa158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa91906148b5565b156133c75760405162461bcd60e51b815260040161028490614f7b565b600b5460405163a318021760e01b81526001600160a01b039091169063a3180217906133f7908490600401614952565b60206040518083038186803b15801561340f57600080fd5b505afa158015613423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344791906148b5565b156134645760405162461bcd60e51b815260040161028490614c53565b600b54604051633792def360e01b81526001600160a01b0390911690633792def390613494908490600401614952565b60206040518083038186803b1580156134ac57600080fd5b505afa1580156134c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134e491906148b5565b156135015760405162461bcd60e51b815260040161028490614d3b565b600f54604051631ccdc0d760e21b81526001600160a01b0390911690637337035c90613531908490600401614952565b60206040518083038186803b15801561354957600080fd5b505afa15801561355d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061358191906148b5565b1561359e5760405162461bcd60e51b815260040161028490614fce565b600f54604051635b8de71560e11b81526001600160a01b039091169063b71bce2a906135ce908490600401614952565b60206040518083038186803b1580156135e657600080fd5b505afa1580156135fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361e91906148b5565b1561363b5760405162461bcd60e51b81526004016102849061514e565b600c5460405163a318021760e01b81526001600160a01b039091169063a31802179061366b908490600401614952565b60206040518083038186803b15801561368357600080fd5b505afa158015613697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bb91906148b5565b156136d85760405162461bcd60e51b815260040161028490614adc565b600c54604051633792def360e01b81526001600160a01b0390911690633792def390613708908490600401614952565b60206040518083038186803b15801561372057600080fd5b505afa158015613734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375891906148b5565b156137755760405162461bcd60e51b81526004016102849061530f565b600d5460405163a318021760e01b81526001600160a01b039091169063a3180217906137a5908490600401614952565b60206040518083038186803b1580156137bd57600080fd5b505afa1580156137d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f591906148b5565b156138125760405162461bcd60e51b8152600401610284906151f0565b600d54604051633792def360e01b81526001600160a01b0390911690633792def390613842908490600401614952565b60206040518083038186803b15801561385a57600080fd5b505afa15801561386e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389291906148b5565b156138af5760405162461bcd60e51b815260040161028490615245565b601054604051631ccdc0d760e21b81526001600160a01b0390911690637337035c906138df908490600401614952565b60206040518083038186803b1580156138f757600080fd5b505afa15801561390b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392f91906148b5565b1561394c5760405162461bcd60e51b815260040161028490614fce565b601054604051635b8de71560e11b81526001600160a01b039091169063b71bce2a9061397c908490600401614952565b60206040518083038186803b15801561399457600080fd5b505afa1580156139a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139cc91906148b5565b156139e95760405162461bcd60e51b81526004016102849061514e565b600f546040516370a0823160e01b81526001600160a01b03909116906370a0823190613a19908490600401614952565b60206040518083038186803b158015613a3157600080fd5b505afa158015613a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6991906148b5565b15613a865760405162461bcd60e51b815260040161028490614e4a565b6010546040516370a0823160e01b81526001600160a01b03909116906370a0823190613ab6908490600401614952565b60206040518083038186803b158015613ace57600080fd5b505afa158015613ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0691906148b5565b15612a695760405162461bcd60e51b815260040161028490614e8d565b60008211613b435760405162461bcd60e51b815260040161028490614ed1565b6009546040516310c1c10360e01b81526000916001600160a01b0316906310c1c10390613b74908890600401614952565b60206040518083038186803b158015613b8c57600080fd5b505afa158015613ba0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc491906148b5565b600b54600a5460405163098bf59d60e01b81529293506001600160a01b039182169263098bf59d92613c01928a9291169088908390600401614a2a565b600060405180830381600087803b158015613c1b57600080fd5b505af1158015613c2f573d6000803e3d6000fd5b5050600a5460095460405163098bf59d60e01b81526001600160a01b03928316945063098bf59d9350613c6c928a92169088908390600401614a2a565b600060405180830381600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b505060095460405163098bf59d60e01b81526001600160a01b03909116925063098bf59d9150613cd4908890889088908390600401614a2a565b600060405180830381600087803b158015613cee57600080fd5b505af1158015613d02573d6000803e3d6000fd5b505050508115613f8357600a546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a90613d3f908990819060040161499f565b602060405180830381600087803b158015613d5957600080fd5b505af1158015613d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9191906148b5565b90508015613e0557600b54600754604051631e42d69b60e21b81526001600160a01b039283169263790b5a6c92613dd2928b928392169087906004016149dc565b600060405180830381600087803b158015613dec57600080fd5b505af1158015613e00573d6000803e3d6000fd5b505050505b600b54600754604051637aeceb1f60e11b81526000926001600160a01b039081169263f5d9d63e92613e3d928c92169060040161499f565b60206040518083038186803b158015613e5557600080fd5b505afa158015613e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8d91906148b5565b90508015613f80576000613eab84613ea584896142a3565b906142dd565b600b5460075460405163098bf59d60e01b81529293506001600160a01b039182169263098bf59d92613ee8928d9291169086908390600401614a2a565b600060405180830381600087803b158015613f0257600080fd5b505af1158015613f16573d6000803e3d6000fd5b5050600754604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac9150613f4c908b908590600401614a85565b600060405180830381600087803b158015613f6657600080fd5b505af1158015613f7a573d6000803e3d6000fd5b50505050505b50505b7f4ec9c81e92795d300fa492175fce6418403e87faed90b688be8867b5067e10e8858585604051613fb693929190614a06565b60405180910390a15050505050565b606061401a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661431f9092919063ffffffff16565b80519091501561074b578080602001905181019061403891906147c6565b61074b5760405162461bcd60e51b8152600401610284906151a6565b6009546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a90614087908590819060040161499f565b602060405180830381600087803b1580156140a157600080fd5b505af11580156140b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140d991906148b5565b905080156140fb576006546140fb90839081906001600160a01b031684612b36565b600a546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a9061412e908690819060040161499f565b602060405180830381600087803b15801561414857600080fd5b505af115801561415c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061418091906148b5565b9050801561074b57600b54600754604051631e42d69b60e21b81526001600160a01b039283169263790b5a6c926141c19288928392169087906004016149dc565b600060405180830381600087803b1580156141db57600080fd5b505af11580156141ef573d6000803e3d6000fd5b50505050505050565b600c546040516309f4173d60e11b81526000916001600160a01b0316906313e82e7a9061422b908590819060040161499f565b602060405180830381600087803b15801561424557600080fd5b505af1158015614259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061427d91906148b5565b9050801561429f5760065461429f90839081906001600160a01b031684612b36565b5050565b6000826142b257506000612b30565b828202828482816142bf57fe5b0414612b2d5760405162461bcd60e51b81526004016102849061502b565b6000612b2d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614336565b606061432e848460008561436d565b949350505050565b600081836143575760405162461bcd60e51b81526004016102849190614aa9565b50600083858161436357fe5b0495945050505050565b60608247101561438f5760405162461bcd60e51b815260040161028490614e04565b6143988561442e565b6143b45760405162461bcd60e51b8152600401610284906150c3565b60006060866001600160a01b031685876040516143d19190614933565b60006040518083038185875af1925050503d806000811461440e576040519150601f19603f3d011682016040523d82523d6000602084013e614413565b606091505b5091509150614423828286614434565b979650505050505050565b3b151590565b60608315614443575081612f30565b8251156144535782518084602001fd5b8160405162461bcd60e51b81526004016102849190614aa9565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b600082601f8301126144c1578081fd5b81356144d46144cf82615419565b6153f2565b8181529150602080830190848101818402860182018710156144f557600080fd5b60005b8481101561451d57813561450b81615469565b845292820192908201906001016144f8565b505050505092915050565b600060208284031215614539578081fd5b8135612b2d81615469565b600080600080600080600080610100898b031215614560578384fd5b883561456b81615469565b9750602089013561457b81615469565b9650604089013561458b81615469565b9550606089013561459b81615469565b945060808901356145ab81615469565b935060a08901356145bb81615469565b925060c08901356145cb81615469565b915060e08901356145db81615469565b809150509295985092959890939650565b600080600060608486031215614600578283fd5b833561460b81615469565b9250602084013561461b81615469565b929592945050506040919091013590565b6000806040838503121561463e578182fd5b823561464981615469565b946020939093013593505050565b6000806000806080858703121561466c578384fd5b843561467781615469565b93506020850135925060408501359150606085013561469581615469565b939692955090935050565b600080600080608085870312156146b5578384fd5b84356146c081615469565b966020860135965060408601359560600135945092505050565b6000602082840312156146eb578081fd5b813567ffffffffffffffff811115614701578182fd5b61432e848285016144b1565b6000806040838503121561471f578182fd5b823567ffffffffffffffff80821115614736578384fd5b614742868387016144b1565b9350602091508185013581811115614758578384fd5b85019050601f8101861361476a578283fd5b80356147786144cf82615419565b81815283810190838501858402850186018a1015614794578687fd5b8694505b838510156147b6578035835260019490940193918501918501614798565b5080955050505050509250929050565b6000602082840312156147d7578081fd5b8151612b2d8161547e565b60008060008060008060008060006101208a8c031215614800578081fd5b893561480b8161547e565b985060208a013561481b8161547e565b975060408a013561482b8161547e565b965060608a013561483b8161547e565b955060808a013561484b8161547e565b945060a08a013561485b8161547e565b935060c08a013561486b8161547e565b925060e08a013561487b8161547e565b91506101008a013561488c8161547e565b809150509295985092959850929598565b6000602082840312156148ae578081fd5b5035919050565b6000602082840312156148c6578081fd5b5051919050565b600080604083850312156148df578182fd5b50508035926020909101359150565b600080600060608486031215614902578081fd5b8335925060208401359150604084013561491b81615469565b809150509250925092565b6001600160a01b03169052565b60008251614945818460208701615439565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925260a081019190915260c00190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152614ac8816040850160208701615439565b601f01601f19169190910160400192915050565b60208082526038908201527f526577617264526f757465723a207374616b65644d766c70547261636b65722e6040820152770617665726167655374616b6564416d6f756e7473203e20360441b606082015260800190565b60208082526036908201527f526577617264526f757465723a20626f6e75734d7678547261636b65722e6176604082015275065726167655374616b6564416d6f756e7473203e20360541b606082015260800190565b602080825260029082015261534160f01b604082015260600190565b6020808252601690820152752937baba32b91d1034b73b30b634b21039b2b73232b960511b604082015260600190565b60208082526026908201527f526577617264526f757465723a2073656e646572206861732076657374656420604082015265746f6b656e7360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f526577617264526f757465723a206665654d7678547261636b65722e6176657260408201527306167655374616b6564416d6f756e7473203e20360641b606082015260800190565b6020808252601f908201527f526577617264526f757465723a20696e76616c6964206d73672e76616c756500604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260408201527f6563697069656e74206d61792068617665207265766572746564000000000000606082015260800190565b60208082526031908201527f526577617264526f757465723a206665654d7678547261636b65722e63756d7560408201527006c617469766552657761726473203e203607c1b606082015260800190565b60208082526021908201527f526577617264526f757465723a20616c726561647920696e697469616c697a656040820152601960fa1b606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526023908201527f526577617264526f757465723a206d76785665737465722e62616c616e63652060408201526203e20360ec1b606082015260800190565b60208082526024908201527f526577617264526f757465723a206d766c705665737465722e62616c616e63656040820152630203e20360e41b606082015260800190565b6020808252601d908201527f526577617264526f757465723a20696e76616c6964205f616d6f756e74000000604082015260600190565b60208082526024908201527f526577617264526f757465723a207472616e73666572206e6f74207369676e616040820152631b1b195960e21b606082015260800190565b60208082526015908201527423b7bb32b93730b136329d103337b93134b23232b760591b604082015260600190565b60208082526033908201527f526577617264526f757465723a20626f6e75734d7678547261636b65722e637560408201527206d756c617469766552657761726473203e203606c1b606082015260800190565b6020808252603b908201527f526577617264526f757465723a206d76785665737465722e7472616e7366657260408201527f726564417665726167655374616b6564416d6f756e7473203e20300000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526037908201527f526577617264526f757465723a207374616b65644d7678547261636b65722e6160408201527607665726167655374616b6564416d6f756e7473203e203604c1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526034908201527f526577617264526f757465723a207374616b65644d7678547261636b65722e636040820152730756d756c617469766552657761726473203e20360641b606082015260800190565b60208082526038908201527f526577617264526f757465723a206d76785665737465722e7472616e73666572604082015277072656443756d756c617469766552657761726473203e20360441b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526035908201527f526577617264526f757465723a206665654d766c70547261636b65722e6176656040820152740726167655374616b6564416d6f756e7473203e203605c1b606082015260800190565b60208082526032908201527f526577617264526f757465723a206665654d766c70547261636b65722e63756d6040820152710756c617469766552657761726473203e20360741b606082015260800190565b60208082526021908201527f526577617264526f757465723a20696e76616c6964205f6d766c70416d6f756e6040820152601d60fa1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526035908201527f526577617264526f757465723a207374616b65644d766c70547261636b65722e604082015274063756d756c617469766552657761726473203e203605c1b606082015260800190565b60006101008201905060018060a01b0380845116835280602085015116602084015262ffffff6040850151166040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e08301516153d260e0840182614926565b5092915050565b62ffffff91909116815260200190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561541157600080fd5b604052919050565b600067ffffffffffffffff82111561542f578081fd5b5060209081020190565b60005b8381101561545457818101518382015260200161543c565b83811115615463576000848401525b50505050565b6001600160a01b0381168114612a6957600080fd5b8015158114612a6957600080fdfea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23428,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 34580,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 34582,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 34586,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 34588,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "usdc",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 34590,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "mvx",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 34592,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "esMvx",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 34594,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "bnMvx",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 34596,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "mvlp",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 34598,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "stakedMvxTracker",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 34600,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "bonusMvxTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 34602,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "feeMvxTracker",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 34604,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "stakedMvlpTracker",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 34606,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "feeMvlpTracker",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 34608,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "mvlpManager",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 34610,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "mvxVester",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 34612,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "mvlpVester",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 34616,
        "contract": "contracts/reward/RewardRouter.sol:RewardRouter",
        "label": "pendingReceivers",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}