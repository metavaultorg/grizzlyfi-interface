{
  "address": "0xd3Ee28CB8ed02a5641DFA02624dF399b01f1e131",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTracker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distribute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensPerIntervalChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allRewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "distribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDistributionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTokensPerInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensPerInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAllLastDistributionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "updateLastDistributionTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2efdd7e556a9df8c4d18d1630bc3375ca0f1390aa4d1e964b3a7790a006b4c7",
  "receipt": {
    "to": null,
    "from": "0x58f4D26CC145EEa7006ACFbf3ea50BaBC372f0a5",
    "contractAddress": "0xd3Ee28CB8ed02a5641DFA02624dF399b01f1e131",
    "transactionIndex": 0,
    "gasUsed": "1275049",
    "logsBloom": "0x
    "blockHash": "0x42ff07a3d97aa6cccce78c5a210d7d27d70813b853137d1b477a7495420602f8",
    "transactionHash": "0xc2efdd7e556a9df8c4d18d1630bc3375ca0f1390aa4d1e964b3a7790a006b4c7",
    "logs": [],
    "blockNumber": 744990,
    "cumulativeGasUsed": "1275049",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDd780758d9631153D5641B3F542B644F93AAbF58"
  ],
  "numDeployments": 1,
  "solcInputHash": "46b6ba796414a87d1bf6e0894b0ec801",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPerIntervalChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDistributionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokensPerInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensPerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllLastDistributionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"updateLastDistributionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenDistributors.sol\":\"FeeQlpDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2179c12e4ac50e8a769b1b43f43558f42bf511fcd7236e034c13c6e4450dbe85\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ac6523715fd08440082ed1ab1db37b7b5a009f9948c29ce1e63d17171e1ba6\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x223b08d372e9f820805da8b8cbc742bf4c0b7e9fdd1cab8165006ba570ce0b52\",\"license\":\"MIT\"},\"contracts/staking/RewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardDistributor is IRewardDistributor, ReentrancyGuard, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_REWARD_TOKENS = 10;\\n\\n    address[] public override allRewardTokens;\\n     mapping (address => bool) public override allTokens;    \\n\\n    // address public override rewardToken;\\n    mapping (address => bool) public override rewardTokens;\\n\\n    uint256 public override rewardTokenCount;\\n\\n\\n    // uint256 public override tokensPerInterval;\\n    mapping (address => uint256) public override tokensPerInterval;\\n\\n    // uint256 public lastDistributionTime;\\n    mapping (address => uint256) public lastDistributionTime;\\n\\n    address public rewardTracker;\\n\\n    address public admin;\\n\\n    event Distribute(address rewardToken, uint256 amount);\\n    event TokensPerIntervalChange(address rewardToken, uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"RewardDistributor: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor( address _rewardTracker) public {\\n        rewardTracker = _rewardTracker;\\n        admin = msg.sender;\\n    }\\n\\n    function setAdmin(address _admin) external onlyGov {\\n        admin = _admin;\\n    }\\n\\n    function allRewardTokensLength() external override view returns (uint256) {\\n        return allRewardTokens.length;\\n    }\\n\\n    function getAllRewardTokens() external override view returns (address[] memory) {\\n        address[] memory tokens = new address[](rewardTokenCount);\\n        uint256 index;\\n        for (uint256 i = 0; i < allRewardTokens.length; i++) {\\n            address token = allRewardTokens[i];\\n            if(!rewardTokens[token]){\\n                continue;\\n            }\\n            tokens[index] = token;\\n            index++;\\n        }\\n\\n        return tokens;\\n    }\\n\\n    function addRewardToken(\\n        address _token\\n    ) external override onlyAdmin{\\n        require(rewardTokenCount<MAX_REWARD_TOKENS,\\\"RewardDistributor: too many rewardTokens\\\");\\n\\n        if (!rewardTokens[_token]) {\\n            bool isFound;\\n            for (uint256 i = 0; i < allRewardTokens.length; i++) {\\n                if(allRewardTokens[i] == _token){\\n                    isFound = true;\\n                }\\n            }\\n            if(!isFound){\\n                allRewardTokens.push(_token);\\n                allTokens[_token] = true;\\n            }    \\n            rewardTokens[_token] = true;\\n            rewardTokenCount++;\\n        }\\n        \\n    }\\n\\n    function removeRewardToken(\\n        address _token\\n    ) external override onlyAdmin{\\n        if(rewardTokens[_token]){\\n            require(tokensPerInterval[_token] == 0,\\\"RewardDistributor: tokensPerInterval must be zero\\\");\\n            delete rewardTokens[_token];\\n            rewardTokenCount--;\\n        }\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function updateAllLastDistributionTime() external onlyAdmin {\\n        uint256 length = allRewardTokens.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = allRewardTokens[i];\\n            if(!rewardTokens[token]){\\n                continue;\\n            }\\n            _updateLastDistributionTime(token);\\n        }\\n    }\\n\\n    function updateLastDistributionTime(address _rewardToken) external onlyAdmin {\\n        require(rewardTokens[_rewardToken], \\\"RewardDistributor: invalid _rewardToken\\\");\\n        _updateLastDistributionTime(_rewardToken);\\n    }\\n\\n    function _updateLastDistributionTime(address _rewardToken) private {\\n        lastDistributionTime[_rewardToken] = block.timestamp;\\n    }\\n\\n    function setTokensPerInterval(address _rewardToken, uint256 _amount) external onlyAdmin {\\n        require(rewardTokens[_rewardToken], \\\"RewardDistributor: invalid _rewardToken\\\");\\n        require(lastDistributionTime[_rewardToken] != 0, \\\"RewardDistributor: invalid lastDistributionTime\\\");\\n        IRewardTracker(rewardTracker).updateRewards(_rewardToken);\\n        tokensPerInterval[_rewardToken] = _amount;\\n        emit TokensPerIntervalChange(_rewardToken, _amount);\\n    }\\n\\n    function pendingRewards(address _rewardToken) public view override returns (uint256) {\\n        require(allTokens[_rewardToken], \\\"RewardDistributor: invalid _rewardToken\\\");\\n        if (block.timestamp == lastDistributionTime[_rewardToken]) {\\n            return 0;\\n        }\\n\\n        uint256 timeDiff = block.timestamp.sub(lastDistributionTime[_rewardToken]);\\n        return tokensPerInterval[_rewardToken].mul(timeDiff);\\n    }\\n\\n    function distribute(address _rewardToken) external override returns (uint256) {\\n        require(msg.sender == rewardTracker, \\\"RewardDistributor: invalid msg.sender\\\");\\n        uint256 amount = pendingRewards(_rewardToken);\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        lastDistributionTime[_rewardToken] = block.timestamp;\\n\\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\\n        if (amount > balance) {\\n            amount = balance;\\n        }\\n\\n        IERC20(_rewardToken).safeTransfer(msg.sender, amount);\\n\\n        emit Distribute(_rewardToken, amount);\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0xb68358d6a4bdf05127189902301f9ea485f488310622ef067ed0e3b26b5a3b37\",\"license\":\"MIT\"},\"contracts/staking/TokenDistributors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./RewardDistributor.sol\\\";\\n\\n\\ncontract StakedQlpDistributor is RewardDistributor {\\n    constructor(address _rewardTracker) public RewardDistributor(_rewardTracker) {}\\n}\\ncontract FeeQlpDistributor is RewardDistributor {\\n    constructor(address _rewardTracker) public RewardDistributor(_rewardTracker) {}\\n}\\n\",\"keccak256\":\"0x7ae7edafe4a5f85d3145a633eac60103d4d9995c66a466c92934a5c2d479827a\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardDistributor {\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function tokensPerInterval(address _rewardToken) external view returns (uint256);\\n    function pendingRewards(address _rewardToken) external view returns (uint256);\\n    function distribute(address _rewardToken) external returns (uint256);\\n    function addRewardToken(address _token) external;\\n    function removeRewardToken(address _token) external;\\n    function allRewardTokensLength() external view returns (uint256);\\n    function allRewardTokens(uint256) external view returns (address);\\n    function rewardTokens(address _token) external view returns (bool);\\n    function allTokens(address _token) external view returns (bool);\\n    function rewardTokenCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a8a4415c15afd2f58c25144682b574c47de0a26007780a98c4f0aec27b795fe\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards(address _rewardToken) external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval(address _rewardToken) external view returns (uint256);\\n    function claim(address _rewardToken, address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _rewardToken, address _receiver) external returns (uint256);\\n    function claimAll(address _receiver) external returns (address[] memory,uint256[] memory);\\n    function claimAllForAccount(address _account, address _receiver) external returns (address[] memory,uint256[] memory);\\n    function claimable(address _account, address _rewardToken) external view returns (uint256);\\n    function claimableAll(address _account) external view  returns (address[] memory,uint256[] memory);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account, address _rewardToken) external view returns (uint256);\\n    function hasCumulativeRewards(address _account) external view returns (bool);\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function rewardTokens(address _rewardToken) external view returns (bool);\\n    function allTokens(address _rewardToken) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x8a9dd615d67ef25240e72591612c526096b1f175c77ab51ae3ed3c90901970e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101125760003560e01c806301e336671461011757806312d43a511461014f57806312edb24c1461017357806319f7ab45146101cb5780631c03e6cc146101f1578063270da24014610217578063286c6a941461024f57806331d7a262146102575780633d509c971461027d5780635d0cde97146102a357806363453ae1146102ab5780636bcb411a146102d1578063704b6c02146102d957806383b3dd24146102ff578063847ec40c1461032b57806395ded45c146103515780639ee80c5c1461038b578063abb06b95146103a8578063cfad57a2146103b0578063db65c26b146103d6578063f5ab16cc146103de578063f851a44014610404575b600080fd5b61014d6004803603606081101561012d57600080fd5b506001600160a01b0381358116916020810135909116906040013561040c565b005b61015761047c565b604080516001600160a01b039092168252519081900360200190f35b61017b61048b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b757818101518382015260200161019f565b505050509050019250505060405180910390f35b61014d600480360360208110156101e157600080fd5b50356001600160a01b0316610562565b61014d6004803603602081101561020757600080fd5b50356001600160a01b0316610612565b61023d6004803603602081101561022d57600080fd5b50356001600160a01b03166107a8565b60408051918252519081900360200190f35b61023d6107ba565b61023d6004803603602081101561026d57600080fd5b50356001600160a01b03166107c0565b61014d6004803603602081101561029357600080fd5b50356001600160a01b0316610892565b61023d610980565b61023d600480360360208110156102c157600080fd5b50356001600160a01b0316610985565b610157610ade565b61014d600480360360208110156102ef57600080fd5b50356001600160a01b0316610aed565b61014d6004803603604081101561031557600080fd5b506001600160a01b038135169060200135610b66565b61023d6004803603602081101561034157600080fd5b50356001600160a01b0316610d1c565b6103776004803603602081101561036757600080fd5b50356001600160a01b0316610d2e565b604080519115158252519081900360200190f35b610157600480360360208110156103a157600080fd5b5035610d43565b61023d610d6a565b61014d600480360360208110156103c657600080fd5b50356001600160a01b0316610d70565b61014d610de9565b610377600480360360208110156103f457600080fd5b50356001600160a01b0316610e9f565b610157610eb4565b6001546001600160a01b03163314610463576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b6104776001600160a01b0384168383610ec3565b505050565b6001546001600160a01b031681565b6060806005546001600160401b03811180156104a657600080fd5b506040519080825280602002602001820160405280156104d0578160200160208202803683370190505b5090506000805b60025481101561055a576000600282815481106104f057fe5b60009182526020808320909101546001600160a01b0316808352600490915260409091205490915060ff166105255750610552565b8084848151811061053257fe5b6001600160a01b0390921660209283029190910190910152506001909101905b6001016104d7565b509091505090565b6009546001600160a01b031633146105af576040805162461bcd60e51b815260206004820152601c602482015260008051602061136e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526004602052604090205460ff166106065760405162461bcd60e51b81526004018080602001828103825260278152602001806114166027913960400191505060405180910390fd5b61060f81610f15565b50565b6009546001600160a01b0316331461065f576040805162461bcd60e51b815260206004820152601c602482015260008051602061136e833981519152604482015290519081900360640190fd5b600a600554106106a05760405162461bcd60e51b81526004018080602001828103825260288152602001806113bf6028913960400191505060405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff1661060f576000805b60025481101561070d57826001600160a01b0316600282815481106106e557fe5b6000918252602090912001546001600160a01b0316141561070557600191505b6001016106c4565b5080610777576002805460018082019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0385169081179091556000908152600360205260409020805460ff191690911790555b506001600160a01b03166000908152600460205260409020805460ff19166001908117909155600580549091019055565b60066020526000908152604090205481565b60025490565b6001600160a01b03811660009081526003602052604081205460ff166108175760405162461bcd60e51b81526004018080602001828103825260278152602001806114166027913960400191505060405180910390fd5b6001600160a01b03821660009081526007602052604090205442141561083f5750600061088d565b6001600160a01b038216600090815260076020526040812054610863904290610f31565b6001600160a01b0384166000908152600660205260409020549091506108899082610f7c565b9150505b919050565b6009546001600160a01b031633146108df576040805162461bcd60e51b815260206004820152601c602482015260008051602061136e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526004602052604090205460ff161561060f576001600160a01b038116600090815260066020526040902054156109555760405162461bcd60e51b815260040180806020018281038252603181526020018061138e6031913960400191505060405180910390fd5b6001600160a01b03166000908152600460205260409020805460ff1916905560058054600019019055565b600a81565b6008546000906001600160a01b031633146109d15760405162461bcd60e51b81526004018080602001828103825260258152602001806113026025913960400191505060405180910390fd5b60006109dc836107c0565b9050806109ed57600091505061088d565b6001600160a01b038316600081815260076020908152604080832042905580516370a0823160e01b815230600482015290519293926370a0823192602480840193919291829003018186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d6020811015610a6f57600080fd5b5051905080821115610a7f578091505b610a936001600160a01b0385163384610ec3565b604080516001600160a01b03861681526020810184905281517fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df929181900390910190a15092915050565b6008546001600160a01b031681565b6001546001600160a01b03163314610b44576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314610bb3576040805162461bcd60e51b815260206004820152601c602482015260008051602061136e833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526004602052604090205460ff16610c0a5760405162461bcd60e51b81526004018080602001828103825260278152602001806114166027913960400191505060405180910390fd5b6001600160a01b038216600090815260076020526040902054610c5e5760405162461bcd60e51b815260040180806020018281038252602f8152602001806113e7602f913960400191505060405180910390fd5b60085460408051635fd6196560e01b81526001600160a01b03858116600483015291519190921691635fd6196591602480830192600092919082900301818387803b158015610cac57600080fd5b505af1158015610cc0573d6000803e3d6000fd5b5050506001600160a01b0383166000818152600660209081526040918290208590558151928352820184905280517f83a9322775b48550bbef762b82384c8ed0b747ff4c37188bd3bb72e3c7cca8239350918290030190a15050565b60076020526000908152604090205481565b60036020526000908152604090205460ff1681565b60028181548110610d5057fe5b6000918252602090912001546001600160a01b0316905081565b60055481565b6001546001600160a01b03163314610dc7576040805162461bcd60e51b815260206004820152601560248201527423b7bb32b93730b136329d103337b93134b23232b760591b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314610e36576040805162461bcd60e51b815260206004820152601c602482015260008051602061136e833981519152604482015290519081900360640190fd5b60025460005b81811015610e9b57600060028281548110610e5357fe5b60009182526020808320909101546001600160a01b0316808352600490915260409091205490915060ff16610e885750610e93565b610e9181610f15565b505b600101610e3c565b5050565b60046020526000908152604090205460ff1681565b6009546001600160a01b031681565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610477908490610fd5565b6001600160a01b03166000908152600760205260409020429055565b6000610f7383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611086565b90505b92915050565b600082610f8b57506000610f76565b82820282848281610f9857fe5b0414610f735760405162461bcd60e51b815260040180806020018281038252602181526020018061134d6021913960400191505060405180910390fd5b606061102a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111229092919063ffffffff16565b8051909150156104775780806020019051602081101561104957600080fd5b50516104775760405162461bcd60e51b815260040180806020018281038252602a81526020018061143d602a913960400191505060405180910390fd5b600081848411156111155760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110da5781810151838201526020016110c2565b50505050905090810190601f1680156111075780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50508183035b9392505050565b60606111318484600085611139565b949350505050565b60608247101561117a5760405162461bcd60e51b81526004018080602001828103825260268152602001806113276026913960400191505060405180910390fd5b61118385611295565b6111d4576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106112135780518252601f1990920191602091820191016111f4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611275576040519150601f19603f3d011682016040523d82523d6000602084013e61127a565b606091505b509150915061128a82828661129b565b979650505050505050565b3b151590565b606083156112aa57508161111b565b8251156112ba5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156110da5781810151838201526020016110c256fe5265776172644469737472696275746f723a20696e76616c6964206d73672e73656e646572416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775265776172644469737472696275746f723a20666f7262696464656e000000005265776172644469737472696275746f723a20746f6b656e73506572496e74657276616c206d757374206265207a65726f5265776172644469737472696275746f723a20746f6f206d616e7920726577617264546f6b656e735265776172644469737472696275746f723a20696e76616c6964206c617374446973747269627574696f6e54696d655265776172644469737472696275746f723a20696e76616c6964205f726577617264546f6b656e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22661,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 33772,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "allRewardTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 33777,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "allTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33782,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33785,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "rewardTokenCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 33790,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "tokensPerInterval",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33794,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "lastDistributionTime",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33796,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "rewardTracker",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 33798,
        "contract": "contracts/staking/TokenDistributors.sol:FeeQlpDistributor",
        "label": "admin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}