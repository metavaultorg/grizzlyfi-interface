{
  "address": "0xDd780758d9631153D5641B3F542B644F93AAbF58",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "averageStakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimAllForAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimForAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "claimableAll",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cumulativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasCumulativeRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateClaimingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateStakingMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inPrivateTransferMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_depositTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDepositToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "previousCumulatedRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDepositToken",
          "type": "bool"
        }
      ],
      "name": "setDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateClaimingMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateClaimingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateStakingMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateStakingMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_inPrivateTransferMode",
          "type": "bool"
        }
      ],
      "name": "setInPrivateTransferMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundingAccount",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "tokensPerInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDepositSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "unstakeForAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddd0e3ab456a90f2562a6d8822ce886c4afc6fbebc0f4e6f891d029f54be1e90",
  "receipt": {
    "to": null,
    "from": "0x58f4D26CC145EEa7006ACFbf3ea50BaBC372f0a5",
    "contractAddress": "0xDd780758d9631153D5641B3F542B644F93AAbF58",
    "transactionIndex": 0,
    "gasUsed": "3476982",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfd50b658923d118e7dd56024658a6362c619379cbbb1284dd7341fc4731be6c5",
    "transactionHash": "0xddd0e3ab456a90f2562a6d8822ce886c4afc6fbebc0f4e6f891d029f54be1e90",
    "logs": [],
    "blockNumber": 744989,
    "cumulativeGasUsed": "3476982",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "46b6ba796414a87d1bf6e0894b0ec801",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"averageStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimAllForAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasCumulativeRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateClaimingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateStakingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inPrivateTransferMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDepositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousCumulatedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDepositToken\",\"type\":\"bool\"}],\"name\":\"setDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateClaimingMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateClaimingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateStakingMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateStakingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_inPrivateTransferMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateTransferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundingAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"tokensPerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"unstakeForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/TokenTrackers.sol\":\"FeeQlpTracker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ncontract Governable {\\n    address public gov;\\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov, \\\"Governable: forbidden\\\");\\n        _;\\n    }\\n\\n    function setGov(address _gov) external onlyGov {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xe719b0de64ee00468f6a985c8ef08ebdd271d99d6616308cbba458f78ed8c532\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2179c12e4ac50e8a769b1b43f43558f42bf511fcd7236e034c13c6e4450dbe85\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ac6523715fd08440082ed1ab1db37b7b5a009f9948c29ce1e63d17171e1ba6\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x223b08d372e9f820805da8b8cbc742bf4c0b7e9fdd1cab8165006ba570ce0b52\",\"license\":\"MIT\"},\"contracts/staking/RewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IRewardTracker.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\ncontract RewardTracker is IERC20, ReentrancyGuard, IRewardTracker, Governable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant PRECISION = 1e30;\\n\\n    uint8 public constant decimals = 18;\\n\\n    bool public isInitialized;\\n\\n    string public name;\\n    string public symbol;\\n\\n    address public distributor;\\n    mapping(address => bool) public isDepositToken;\\n    mapping(address => mapping(address => uint256)) public override depositBalances;\\n    mapping(address => uint256) public totalDepositSupply;\\n\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public balances;\\n    mapping(address => mapping(address => uint256)) public allowances;\\n\\n    // uint256 public cumulativeRewardPerToken;\\n    mapping(address => uint256) public  cumulativeRewardPerToken;\\n\\n    mapping(address => uint256) public override stakedAmounts;\\n    // mapping(address => uint256) public claimableReward;\\n    mapping(address => mapping(address => uint256)) public  claimableReward;\\n\\n    // mapping(address => uint256) public previousCumulatedRewardPerToken;\\n    mapping(address => mapping(address => uint256)) public previousCumulatedRewardPerToken;\\n\\n    // mapping(address => uint256) public override cumulativeRewards;\\n    mapping(address => mapping(address => uint256)) public override cumulativeRewards;\\n\\n    mapping(address => uint256) public override averageStakedAmounts;\\n\\n\\n    bool public inPrivateTransferMode;\\n    bool public inPrivateStakingMode;\\n    bool public inPrivateClaimingMode;\\n    mapping(address => bool) public isHandler;\\n\\n    event Claim(address indexed receiver,address  rewardToken, uint256 amount);\\n\\n    constructor(string memory _name, string memory _symbol) public {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function initialize(address[] memory _depositTokens, address _distributor) external onlyGov {\\n        require(!isInitialized, \\\"RewardTracker: already initialized\\\");\\n        isInitialized = true;\\n\\n        for (uint256 i = 0; i < _depositTokens.length; i++) {\\n            address depositToken = _depositTokens[i];\\n            isDepositToken[depositToken] = true;\\n        }\\n\\n        distributor = _distributor;\\n    }\\n\\n    function setDepositToken(address _depositToken, bool _isDepositToken) external onlyGov {\\n        isDepositToken[_depositToken] = _isDepositToken;\\n    }\\n\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external onlyGov {\\n        inPrivateTransferMode = _inPrivateTransferMode;\\n    }\\n\\n    function setInPrivateStakingMode(bool _inPrivateStakingMode) external onlyGov {\\n        inPrivateStakingMode = _inPrivateStakingMode;\\n    }\\n\\n    function setInPrivateClaimingMode(bool _inPrivateClaimingMode) external onlyGov {\\n        inPrivateClaimingMode = _inPrivateClaimingMode;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    // to help users who accidentally send their tokens to this contract\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external onlyGov {\\n        IERC20(_token).safeTransfer(_account, _amount);\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function stake(address _depositToken, uint256 _amount) external override nonReentrant {\\n        if (inPrivateStakingMode) {\\n            revert(\\\"RewardTracker: action not enabled\\\");\\n        }\\n        _stake(msg.sender, msg.sender, _depositToken, _amount);\\n    }\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        _validateHandler();\\n        _stake(_fundingAccount, _account, _depositToken, _amount);\\n    }\\n\\n    function unstake(address _depositToken, uint256 _amount) external override nonReentrant {\\n        if (inPrivateStakingMode) {\\n            revert(\\\"RewardTracker: action not enabled\\\");\\n        }\\n        _unstake(msg.sender, _depositToken, _amount, msg.sender);\\n    }\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external override nonReentrant {\\n        _validateHandler();\\n        _unstake(_account, _depositToken, _amount, _receiver);\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override returns (bool) {\\n        if (isHandler[msg.sender]) {\\n            _transfer(_sender, _recipient, _amount);\\n            return true;\\n        }\\n\\n        uint256 nextAllowance = allowances[_sender][msg.sender].sub(_amount, \\\"RewardTracker: transfer amount exceeds allowance\\\");\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function tokensPerInterval(address _rewardToken) external view override returns (uint256) {\\n        return IRewardDistributor(distributor).tokensPerInterval(_rewardToken);\\n    }\\n\\n    function updateRewards(address _rewardToken) external override nonReentrant {\\n        require(IRewardDistributor(distributor).allTokens(_rewardToken), \\\"RewardTracker: invalid _rewardToken\\\");\\n        _updateRewards(address(0),_rewardToken);\\n    }\\n\\n    function hasCumulativeRewards(address _account) external view override returns (bool) {\\n        uint256 length = IRewardDistributor(distributor).allRewardTokensLength();\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = IRewardDistributor(distributor).allRewardTokens(i);\\n            if(!IRewardDistributor(distributor).rewardTokens(token)){\\n                continue;\\n            }\\n            if(cumulativeRewards[_account][token]>0){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function claimAll(address _receiver) external override nonReentrant returns (address[] memory,uint256[] memory) {\\n        if (inPrivateClaimingMode) {\\n            revert(\\\"RewardTracker: action not enabled\\\");\\n        }\\n        return _claimAll(msg.sender, _receiver);\\n    }\\n\\n    function claim(address _rewardToken, address _receiver) external override nonReentrant returns (uint256) {\\n        if (inPrivateClaimingMode) {\\n            revert(\\\"RewardTracker: action not enabled\\\");\\n        }\\n        require(IRewardDistributor(distributor).allTokens(_rewardToken), \\\"RewardTracker: invalid _rewardToken\\\");\\n        return _claim(msg.sender, _rewardToken, _receiver);\\n    }\\n\\n    function claimAllForAccount(address _account, address _receiver) external override nonReentrant returns (address[] memory,uint256[] memory) {\\n        _validateHandler();\\n        return _claimAll(_account, _receiver);\\n    }\\n\\n    function _claimAll(address _account, address _receiver) private returns (address[] memory,uint256[] memory) {\\n        uint256 tokenCount =  IRewardDistributor(distributor).rewardTokenCount();\\n\\n        address[] memory tokens = new address[](tokenCount);\\n        uint256[] memory amounts = new uint256[](tokenCount);\\n\\n        uint256 length = IRewardDistributor(distributor).allRewardTokensLength();\\n        uint256 index;\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = IRewardDistributor(distributor).allRewardTokens(i);\\n            if(!IRewardDistributor(distributor).rewardTokens(token)){\\n                continue;\\n            }\\n            tokens[index] = token;\\n            amounts[index] = _claim(_account, token, _receiver);\\n            index++;\\n        }\\n        return (tokens,amounts);\\n    }\\n\\n    function claimForAccount(address _account, address _rewardToken, address _receiver) external override nonReentrant returns (uint256) {\\n        _validateHandler();\\n        require(IRewardDistributor(distributor).allTokens(_rewardToken), \\\"RewardTracker: invalid _rewardToken\\\");\\n        return _claim(_account, _rewardToken, _receiver);\\n    }\\n\\n    function claimableAll(address _account) external view override returns (address[] memory,uint256[] memory) {\\n        uint256 tokenCount =  IRewardDistributor(distributor).rewardTokenCount();\\n\\n        address[] memory tokens = new address[](tokenCount);\\n        uint256[] memory amounts = new uint256[](tokenCount);\\n        \\n        uint256 length = IRewardDistributor(distributor).allRewardTokensLength();\\n        uint256 index;\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = IRewardDistributor(distributor).allRewardTokens(i);\\n            if(!IRewardDistributor(distributor).rewardTokens(token)){\\n                continue;\\n            }\\n            uint256 amount = claimable(_account, token);\\n            tokens[index] = token;\\n            amounts[index] = amount;\\n            index++;\\n        }\\n\\n\\n        return (tokens,amounts);\\n    }\\n\\n\\n    function claimable(address _account, address _rewardToken) public view override returns (uint256) {\\n        require(IRewardDistributor(distributor).allTokens(_rewardToken), \\\"RewardTracker: invalid _rewardToken\\\");\\n        uint256 stakedAmount = stakedAmounts[_account];\\n        if (stakedAmount == 0) {\\n            return claimableReward[_account][_rewardToken];\\n        }\\n        uint256 supply = totalSupply;\\n        uint256 pendingRewards = IRewardDistributor(distributor).pendingRewards(_rewardToken).mul(PRECISION);\\n        uint256 nextCumulativeRewardPerToken = cumulativeRewardPerToken[_rewardToken].add(pendingRewards.div(supply));\\n        return claimableReward[_account][_rewardToken].add(stakedAmount.mul(nextCumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account][_rewardToken])).div(PRECISION));\\n    }\\n\\n    function getAllRewardTokens() external override view returns (address[] memory) {\\n        return IRewardDistributor(distributor).getAllRewardTokens();\\n    }\\n\\n    function rewardTokens(address _rewardToken) external override view returns (bool) {\\n        return IRewardDistributor(distributor).rewardTokens(_rewardToken);\\n    }\\n\\n    function allTokens(address _rewardToken) external override view returns (bool) {\\n        return IRewardDistributor(distributor).allTokens(_rewardToken);\\n    }\\n\\n\\n    function _claim(address _account, address _rewardToken, address _receiver) private returns (uint256) {\\n        _updateRewards(_account, _rewardToken);\\n\\n        uint256 tokenAmount = claimableReward[_account][_rewardToken];\\n        claimableReward[_account][_rewardToken] = 0;\\n\\n        if (tokenAmount > 0) {\\n            IERC20(_rewardToken).safeTransfer(_receiver, tokenAmount);\\n            emit Claim(_account, _rewardToken, tokenAmount);\\n        }\\n\\n        return tokenAmount;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"RewardTracker: mint to the zero address\\\");\\n\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"RewardTracker: burn from the zero address\\\");\\n\\n        balances[_account] = balances[_account].sub(_amount, \\\"RewardTracker: burn amount exceeds balance\\\");\\n        totalSupply = totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private {\\n        require(_sender != address(0), \\\"RewardTracker: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"RewardTracker: transfer to the zero address\\\");\\n\\n        if (inPrivateTransferMode) {\\n            _validateHandler();\\n        }\\n\\n        balances[_sender] = balances[_sender].sub(_amount, \\\"RewardTracker: transfer amount exceeds balance\\\");\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) private {\\n        require(_owner != address(0), \\\"RewardTracker: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"RewardTracker: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _validateHandler() private view {\\n        require(isHandler[msg.sender], \\\"RewardTracker: forbidden\\\");\\n    }\\n\\n    function _stake(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) private {\\n        require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n        require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n        IERC20(_depositToken).safeTransferFrom(_fundingAccount, address(this), _amount);\\n\\n        _updateRewardsAll(_account);\\n\\n        stakedAmounts[_account] = stakedAmounts[_account].add(_amount);\\n        depositBalances[_account][_depositToken] = depositBalances[_account][_depositToken].add(_amount);\\n        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].add(_amount);\\n\\n        _mint(_account, _amount);\\n    }\\n\\n    function _unstake(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) private {\\n        require(_amount > 0, \\\"RewardTracker: invalid _amount\\\");\\n        require(isDepositToken[_depositToken], \\\"RewardTracker: invalid _depositToken\\\");\\n\\n        _updateRewardsAll(_account);\\n\\n        uint256 stakedAmount = stakedAmounts[_account];\\n        require(stakedAmounts[_account] >= _amount, \\\"RewardTracker: _amount exceeds stakedAmount\\\");\\n\\n        stakedAmounts[_account] = stakedAmount.sub(_amount);\\n\\n        uint256 depositBalance = depositBalances[_account][_depositToken];\\n        require(depositBalance >= _amount, \\\"RewardTracker: _amount exceeds depositBalance\\\");\\n        depositBalances[_account][_depositToken] = depositBalance.sub(_amount);\\n        totalDepositSupply[_depositToken] = totalDepositSupply[_depositToken].sub(_amount);\\n\\n        _burn(_account, _amount);\\n        IERC20(_depositToken).safeTransfer(_receiver, _amount);\\n    }\\n\\n    function _updateRewardsAll(address _account) private {\\n        uint256 length = IRewardDistributor(distributor).allRewardTokensLength();\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = IRewardDistributor(distributor).allRewardTokens(i);\\n            if(!IRewardDistributor(distributor).rewardTokens(token)){\\n                continue;\\n            }\\n            _updateRewards(_account, token);\\n        }\\n    }\\n\\n\\n\\n    function _updateRewards(address _account, address _rewardToken) private {\\n        uint256 blockReward = IRewardDistributor(distributor).distribute(_rewardToken);\\n\\n        uint256 supply = totalSupply;\\n        uint256 _cumulativeRewardPerToken = cumulativeRewardPerToken[_rewardToken];\\n        if (supply > 0 && blockReward > 0) {\\n            _cumulativeRewardPerToken = _cumulativeRewardPerToken.add(blockReward.mul(PRECISION).div(supply));\\n            cumulativeRewardPerToken[_rewardToken] = _cumulativeRewardPerToken;\\n        }\\n\\n        // cumulativeRewardPerToken can only increase\\n        // so if cumulativeRewardPerToken is zero, it means there are no rewards yet\\n        if (_cumulativeRewardPerToken == 0) {\\n            return;\\n        }\\n\\n        if (_account != address(0)) {\\n            _updateAccountRewards(_account, _rewardToken, _cumulativeRewardPerToken);\\n        }\\n    }\\n\\n    function _updateAccountRewards(address _account, address _rewardToken, uint256 _cumulativeRewardPerToken) private {\\n        uint256 stakedAmount = stakedAmounts[_account];\\n        uint256 accountReward = stakedAmount.mul(_cumulativeRewardPerToken.sub(previousCumulatedRewardPerToken[_account][_rewardToken])).div(PRECISION);\\n        uint256 _claimableReward = claimableReward[_account][_rewardToken].add(accountReward);\\n\\n        claimableReward[_account][_rewardToken] = _claimableReward;\\n        previousCumulatedRewardPerToken[_account][_rewardToken] = _cumulativeRewardPerToken;\\n\\n        if (_claimableReward > 0 && stakedAmounts[_account] > 0) {\\n            uint256 nextCumulativeReward = cumulativeRewards[_account][_rewardToken].add(accountReward);\\n\\n            averageStakedAmounts[_account] = averageStakedAmounts[_account].mul(cumulativeRewards[_account][_rewardToken]).div(nextCumulativeReward).add(\\n                stakedAmount.mul(accountReward).div(nextCumulativeReward)\\n            );\\n\\n            cumulativeRewards[_account][_rewardToken] = nextCumulativeReward;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf5e4b5e1022531aa459b6dfff37a09d8ed868fdbfffc8cd55ac808830f34d157\",\"license\":\"MIT\"},\"contracts/staking/TokenTrackers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./RewardTracker.sol\\\";\\n\\ncontract StakedQlpTracker is RewardTracker {\\n    constructor() public RewardTracker(\\\"Fee + Staked QLP\\\", \\\"fsQLP\\\") {}\\n}\\n\\ncontract FeeQlpTracker is RewardTracker {\\n    constructor() public RewardTracker(\\\"Fee QLP\\\", \\\"fQLP\\\") {}\\n}\\n\",\"keccak256\":\"0xfe76b5f47fe313f5f9a131759454c022b36fdc34e8679720d1dfdc3c181d7582\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardDistributor {\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function tokensPerInterval(address _rewardToken) external view returns (uint256);\\n    function pendingRewards(address _rewardToken) external view returns (uint256);\\n    function distribute(address _rewardToken) external returns (uint256);\\n    function addRewardToken(address _token) external;\\n    function removeRewardToken(address _token) external;\\n    function allRewardTokensLength() external view returns (uint256);\\n    function allRewardTokens(uint256) external view returns (address);\\n    function rewardTokens(address _token) external view returns (bool);\\n    function allTokens(address _token) external view returns (bool);\\n    function rewardTokenCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a8a4415c15afd2f58c25144682b574c47de0a26007780a98c4f0aec27b795fe\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n    function stakedAmounts(address _account) external view returns (uint256);\\n    function updateRewards(address _rewardToken) external;\\n    function stake(address _depositToken, uint256 _amount) external;\\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\\n    function unstake(address _depositToken, uint256 _amount) external;\\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\\n    function tokensPerInterval(address _rewardToken) external view returns (uint256);\\n    function claim(address _rewardToken, address _receiver) external returns (uint256);\\n    function claimForAccount(address _account, address _rewardToken, address _receiver) external returns (uint256);\\n    function claimAll(address _receiver) external returns (address[] memory,uint256[] memory);\\n    function claimAllForAccount(address _account, address _receiver) external returns (address[] memory,uint256[] memory);\\n    function claimable(address _account, address _rewardToken) external view returns (uint256);\\n    function claimableAll(address _account) external view  returns (address[] memory,uint256[] memory);\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n    function cumulativeRewards(address _account, address _rewardToken) external view returns (uint256);\\n    function hasCumulativeRewards(address _account) external view returns (bool);\\n    function getAllRewardTokens() external view returns (address[] memory);\\n    function rewardTokens(address _rewardToken) external view returns (bool);\\n    function allTokens(address _rewardToken) external view returns (bool);\\n\\n}\\n\",\"keccak256\":\"0x8a9dd615d67ef25240e72591612c526096b1f175c77ab51ae3ed3c90901970e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526007815266046656520514c560cc1b602080830191825283518085019094526004845263066514c560e41b908401526001600081905580546001600160a01b031916331790558151919291620000749160029162000093565b5080516200008a90600390602084019062000093565b5050506200012f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000d657805160ff191683800117855562000106565b8280016001018555821562000106579182015b8281111562000106578251825591602001919060010190620000e9565b506200011492915062000118565b5090565b5b8082111562000114576000815560010162000119565b613c3a806200013f6000396000f3fe608060405234801561001057600080fd5b50600436106102675760003560e01c806301e336671461026c57806303bc5477146102a457806306fdde03146102e4578063095ea7b314610361578063098bf59d146103a157806310c1c103146103dd578063126082cf1461040357806312d43a511461040b57806312edb24c1461042f57806318160ddd146104875780631d30d5bc1461048f57806321c0b342146104ae57806323b872dd146104dc578063270da2401461051257806327e235e314610538578063313ce5671461055e578063392e53cd1461057c5780633cd7f70014610584578063462d0b2e146105a357806346ea87af1461064f578063552ce1dc1461067557806355b6ed5c1461069b5780635a47a1a7146106c95780635aacb6f3146106e85780635fd61965146107a757806370a08231146107cd57806377329f35146107f3578063790b5a6c1461081957806395d89b411461085557806395ded45c1461085d5780639862ddb6146108835780639cb7de4b146108a95780639e2e6023146108d7578063a318021714610905578063a39331a81461092b578063a9059cbb14610959578063aaf5eb6814610985578063adc9772e1461098d578063b89e45b3146109b9578063bfe10928146109df578063c2a672e0146109e7578063c5fa273014610a13578063cb9bb45f14610a1b578063cfad57a214610a41578063d26abffa14610a67578063d4570c1c14610a95578063dd62ed3e14610ac3578063dfbaefb114610af1578063e44b755814610af9578063f5ab16cc14610b27578063f5d9d63e14610b4d578063f76033d314610b7b578063f777b81314610b83575b600080fd5b6102a26004803603606081101561028257600080fd5b506001600160a01b03813581169160208101359091169060400135610bbb565b005b6102d2600480360360408110156102ba57600080fd5b506001600160a01b0381358116916020013516610c21565b60408051918252519081900360200190f35b6102ec610c3e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032657818101518382015260200161030e565b50505050905090810190601f1680156103535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61038d6004803603604081101561037757600080fd5b506001600160a01b038135169060200135610cc9565b604080519115158252519081900360200190f35b6102a2600480360360808110156103b757600080fd5b506001600160a01b03813581169160208101358216916040820135916060013516610ce0565b6102d2600480360360208110156103f357600080fd5b50356001600160a01b0316610d4a565b6102d2610d5c565b610413610d62565b604080516001600160a01b039092168252519081900360200190f35b610437610d71565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561047357818101518382015260200161045b565b505050509050019250505060405180910390f35b6102d2610e8d565b6102a2600480360360208110156104a557600080fd5b50351515610e93565b6102d2600480360360408110156104c457600080fd5b506001600160a01b0381358116916020013516610efa565b61038d600480360360608110156104f257600080fd5b506001600160a01b0381358116916020810135909116906040013561106f565b6102d26004803603602081101561052857600080fd5b50356001600160a01b0316611109565b6102d26004803603602081101561054e57600080fd5b50356001600160a01b03166111a1565b6105666111b3565b6040805160ff9092168252519081900360200190f35b61038d6111b8565b6102a26004803603602081101561059a57600080fd5b503515156111c8565b6102a2600480360360408110156105b957600080fd5b810190602081018135600160201b8111156105d357600080fd5b8201836020820111156105e557600080fd5b803590602001918460208302840111600160201b8311171561060657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506112319050565b61038d6004803603602081101561066557600080fd5b50356001600160a01b0316611354565b6102d26004803603602081101561068b57600080fd5b50356001600160a01b0316611369565b6102d2600480360360408110156106b157600080fd5b506001600160a01b038135811691602001351661137b565b6102a2600480360360208110156106df57600080fd5b50351515611398565b61070e600480360360208110156106fe57600080fd5b50356001600160a01b03166113f8565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561075257818101518382015260200161073a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610791578181015183820152602001610779565b5050505090500194505050505060405180910390f35b6102a2600480360360208110156107bd57600080fd5b50356001600160a01b0316611701565b6102d2600480360360208110156107e357600080fd5b50356001600160a01b0316611817565b61070e6004803603602081101561080957600080fd5b50356001600160a01b0316611832565b6102a26004803603608081101561082f57600080fd5b506001600160a01b038135811691602081013582169160408201351690606001356118e1565b6102ec611940565b61038d6004803603602081101561087357600080fd5b50356001600160a01b031661199b565b6102d26004803603602081101561089957600080fd5b50356001600160a01b03166119ff565b6102a2600480360360408110156108bf57600080fd5b506001600160a01b0381351690602001351515611a11565b61070e600480360360408110156108ed57600080fd5b506001600160a01b0381358116916020013516611a89565b6102d26004803603602081101561091b57600080fd5b50356001600160a01b0316611af9565b6102d26004803603604081101561094157600080fd5b506001600160a01b0381358116916020013516611b0b565b61038d6004803603604081101561096f57600080fd5b506001600160a01b038135169060200135611b28565b6102d2611b35565b6102a2600480360360408110156109a357600080fd5b506001600160a01b038135169060200135611b45565b61038d600480360360208110156109cf57600080fd5b50356001600160a01b0316611bec565b610413611c01565b6102a2600480360360408110156109fd57600080fd5b506001600160a01b038135169060200135611c10565b61038d611cae565b61038d60048036036020811015610a3157600080fd5b50356001600160a01b0316611cbc565b6102a260048036036020811015610a5757600080fd5b50356001600160a01b0316611e85565b6102d260048036036040811015610a7d57600080fd5b506001600160a01b0381358116916020013516611ef4565b6102d260048036036040811015610aab57600080fd5b506001600160a01b0381358116916020013516611f11565b6102d260048036036040811015610ad957600080fd5b506001600160a01b0381358116916020013516612182565b61038d6121ad565b6102a260048036036040811015610b0f57600080fd5b506001600160a01b03813516906020013515156121b6565b61038d60048036036020811015610b3d57600080fd5b50356001600160a01b031661222e565b6102d260048036036040811015610b6357600080fd5b506001600160a01b0381358116916020013516612292565b61038d6122af565b6102d260048036036060811015610b9957600080fd5b506001600160a01b0381358116916020810135821691604090910135166122be565b6001546001600160a01b03163314610c08576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b610c1c6001600160a01b03841683836123f4565b505050565b600e60209081526000928352604080842090915290825290205481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610cc15780601f10610c9657610100808354040283529160200191610cc1565b820191906000526020600020905b815481529060010190602001808311610ca457829003601f168201915b505050505081565b6000610cd6338484612446565b5060015b92915050565b60026000541415610d26576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055610d33612532565b610d3f84848484612593565b505060016000555050565b600c6020526000908152604090205481565b61271081565b6001546001600160a01b031681565b6060600460009054906101000a90046001600160a01b03166001600160a01b03166312edb24c6040518163ffffffff1660e01b815260040160006040518083038186803b158015610dc157600080fd5b505afa158015610dd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610dfe57600080fd5b8101908080516040519392919084600160201b821115610e1d57600080fd5b908301906020820185811115610e3257600080fd5b82518660208202830111600160201b82111715610e4e57600080fd5b82525081516020918201928201910280838360005b83811015610e7b578181015183820152602001610e63565b50505050905001604052505050905090565b60085481565b6001546001600160a01b03163314610ee0576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b601180549115156101000261ff0019909216919091179055565b600060026000541415610f42576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b600260005560115462010000900460ff1615610f8f5760405162461bcd60e51b8152600401808060200182810382526021815260200180613bb26021913960400191505060405180910390fd5b600460009054906101000a90046001600160a01b03166001600160a01b03166395ded45c846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d602081101561101b57600080fd5b50516110585760405162461bcd60e51b81526004018080602001828103825260238152602001806139906023913960400191505060405180910390fd5b61106333848461278f565b60016000559392505050565b3360009081526012602052604081205460ff161561109a57611092848484612830565b506001611102565b60006110e483604051806060016040528060308152602001613b58603091396001600160a01b0388166000908152600a602090815260408083203384529091529020549190612983565b90506110f1853383612446565b6110fc858585612830565b60019150505b9392505050565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663270da240836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d602081101561119757600080fd5b505190505b919050565b60096020526000908152604090205481565b601281565b600154600160a01b900460ff1681565b6001546001600160a01b03163314611215576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b60118054911515620100000262ff000019909216919091179055565b6001546001600160a01b0316331461127e576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b600154600160a01b900460ff16156112c75760405162461bcd60e51b8152600401808060200182810382526022815260200180613ac26022913960400191505060405180910390fd5b6001805460ff60a01b1916600160a01b17905560005b82518110156113305760008382815181106112f457fe5b6020908102919091018101516001600160a01b03166000908152600590915260409020805460ff191660019081179091559190910190506112dd565b50600480546001600160a01b0319166001600160a01b039290921691909117905550565b60126020526000908152604090205460ff1681565b60076020526000908152604090205481565b600a60209081526000928352604080842090915290825290205481565b6001546001600160a01b031633146113e5576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b6011805460ff1916911515919091179055565b6060806000600460009054906101000a90046001600160a01b03166001600160a01b031663abb06b956040518163ffffffff1660e01b815260040160206040518083038186803b15801561144b57600080fd5b505afa15801561145f573d6000803e3d6000fd5b505050506040513d602081101561147557600080fd5b505190506060816001600160401b038111801561149157600080fd5b506040519080825280602002602001820160405280156114bb578160200160208202803683370190505b5090506060826001600160401b03811180156114d657600080fd5b50604051908082528060200260200182016040528015611500578160200160208202803683370190505b5090506000600460009054906101000a90046001600160a01b03166001600160a01b031663286c6a946040518163ffffffff1660e01b815260040160206040518083038186803b15801561155357600080fd5b505afa158015611567573d6000803e3d6000fd5b505050506040513d602081101561157d57600080fd5b505190506000805b828110156116f25760048054604080516327ba031760e21b8152928301849052516000926001600160a01b0390921691639ee80c5c916024808301926020929190829003018186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d602081101561160457600080fd5b50516004805460408051633d6ac5b360e21b81526001600160a01b0380861694820194909452905193945091169163f5ab16cc91602480820192602092909190829003018186803b15801561165857600080fd5b505afa15801561166c573d6000803e3d6000fd5b505050506040513d602081101561168257600080fd5b505161168e57506116ea565b600061169a8b83611f11565b9050818785815181106116a957fe5b60200260200101906001600160a01b031690816001600160a01b031681525050808685815181106116d657fe5b602090810291909101015250506001909101905b600101611585565b50929550909350505050915091565b60026000541415611747576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b60026000556004805460408051632577b51760e21b81526001600160a01b0385811694820194909452905192909116916395ded45c91602480820192602092909190829003018186803b15801561179d57600080fd5b505afa1580156117b1573d6000803e3d6000fd5b505050506040513d60208110156117c757600080fd5b50516118045760405162461bcd60e51b81526004018080602001828103825260238152602001806139906023913960400191505060405180910390fd5b61180f600082612a1a565b506001600055565b6001600160a01b031660009081526009602052604090205490565b6060806002600054141561187b576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b600260005560115462010000900460ff16156118c85760405162461bcd60e51b8152600401808060200182810382526021815260200180613bb26021913960400191505060405180910390fd5b6118d23384612b51565b60016000559094909350915050565b60026000541415611927576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055611934612532565b610d3f84848484612e56565b6003805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610cc15780601f10610c9657610100808354040283529160200191610cc1565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166395ded45c836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561116d57600080fd5b600b6020526000908152604090205481565b6001546001600160a01b03163314611a5e576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152601260205260409020805460ff1916911515919091179055565b60608060026000541415611ad2576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055611adf612532565b611ae98484612b51565b6001600055909590945092505050565b60106020526000908152604090205481565b600f60209081526000928352604080842090915290825290205481565b6000610cd6338484612830565b68327cb2734119d3b7a9601e1b81565b60026000541415611b8b576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055601154610100900460ff1615611bd75760405162461bcd60e51b8152600401808060200182810382526021815260200180613bb26021913960400191505060405180910390fd5b611be333338484612e56565b50506001600055565b60056020526000908152604090205460ff1681565b6004546001600160a01b031681565b60026000541415611c56576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055601154610100900460ff1615611ca25760405162461bcd60e51b8152600401808060200182810382526021815260200180613bb26021913960400191505060405180910390fd5b611be333838333612593565b601154610100900460ff1681565b6004805460408051630a1b1aa560e21b8152905160009384936001600160a01b03169263286c6a949281830192602092829003018186803b158015611d0057600080fd5b505afa158015611d14573d6000803e3d6000fd5b505050506040513d6020811015611d2a57600080fd5b5051905060005b81811015611e7b5760048054604080516327ba031760e21b8152928301849052516000926001600160a01b0390921691639ee80c5c916024808301926020929190829003018186803b158015611d8657600080fd5b505afa158015611d9a573d6000803e3d6000fd5b505050506040513d6020811015611db057600080fd5b50516004805460408051633d6ac5b360e21b81526001600160a01b0380861694820194909452905193945091169163f5ab16cc91602480820192602092909190829003018186803b158015611e0457600080fd5b505afa158015611e18573d6000803e3d6000fd5b505050506040513d6020811015611e2e57600080fd5b5051611e3a5750611e73565b6001600160a01b038086166000908152600f602090815260408083209385168352929052205415611e71576001935050505061119c565b505b600101611d31565b5060009392505050565b6001546001600160a01b03163314611ed2576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600d60209081526000928352604080842090915290825290205481565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166395ded45c836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611f7557600080fd5b505afa158015611f89573d6000803e3d6000fd5b505050506040513d6020811015611f9f57600080fd5b5051611fdc5760405162461bcd60e51b81526004018080602001828103825260238152602001806139906023913960400191505060405180910390fd5b6001600160a01b0383166000908152600c6020526040902054806120275750506001600160a01b038083166000908152600d6020908152604080832093851683529290522054610cda565b60085460048054604080516318ebd13160e11b81526001600160a01b038881169482019490945290516000936120c09368327cb2734119d3b7a9601e1b939116916331d7a26291602480820192602092909190829003018186803b15801561208e57600080fd5b505afa1580156120a2573d6000803e3d6000fd5b505050506040513d60208110156120b857600080fd5b505190612fd3565b905060006120f06120d1838561302c565b6001600160a01b0388166000908152600b60205260409020549061306b565b6001600160a01b038089166000908152600e60209081526040808320938b16835292905220549091506121779061214b9068327cb2734119d3b7a9601e1b906121459061213e9086906130c3565b8890612fd3565b9061302c565b6001600160a01b03808a166000908152600d60209081526040808320938c16835292905220549061306b565b979650505050505050565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b60115460ff1681565b6001546001600160a01b03163314612203576040805162461bcd60e51b81526020600482015260156024820152600080516020613a08833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6000600460009054906101000a90046001600160a01b03166001600160a01b031663f5ab16cc836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561116d57600080fd5b600660209081526000928352604080842090915290825290205481565b60115462010000900460ff1681565b600060026000541415612306576040805162461bcd60e51b815260206004820152601f6024820152600080516020613945833981519152604482015290519081900360640190fd5b6002600055612313612532565b600460009054906101000a90046001600160a01b03166001600160a01b03166395ded45c846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561237557600080fd5b505afa158015612389573d6000803e3d6000fd5b505050506040513d602081101561239f57600080fd5b50516123dc5760405162461bcd60e51b81526004018080602001828103825260238152602001806139906023913960400191505060405180910390fd5b6123e784848461278f565b6001600055949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c1c908490613105565b6001600160a01b03831661248b5760405162461bcd60e51b815260040180806020018281038252602c8152602001806139b3602c913960400191505060405180910390fd5b6001600160a01b0382166124d05760405162461bcd60e51b815260040180806020018281038252602a815260200180613a77602a913960400191505060405180910390fd5b6001600160a01b038084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b3360009081526012602052604090205460ff16612591576040805162461bcd60e51b81526020600482015260186024820152772932bbb0b9322a3930b1b5b2b91d103337b93134b23232b760411b604482015290519081900360640190fd5b565b600082116125d6576040805162461bcd60e51b815260206004820152601e60248201526000805160206138fb833981519152604482015290519081900360640190fd5b6001600160a01b03831660009081526005602052604090205460ff1661262d5760405162461bcd60e51b8152600401808060200182810382526024815260200180613a536024913960400191505060405180910390fd5b612636846131b6565b6001600160a01b0384166000908152600c60205260409020548281101561268e5760405162461bcd60e51b815260040180806020018281038252602b815260200180613965602b913960400191505060405180910390fd5b61269881846130c3565b6001600160a01b038087166000908152600c6020908152604080832094909455600681528382209288168252919091522054838110156127095760405162461bcd60e51b815260040180806020018281038252602d815260200180613bd3602d913960400191505060405180910390fd5b61271381856130c3565b6001600160a01b038088166000908152600660209081526040808320938a16835292815282822093909355600790925290205461275090856130c3565b6001600160a01b0386166000908152600760205260409020556127738685613354565b6127876001600160a01b03861684866123f4565b505050505050565b600061279b8484612a1a565b6001600160a01b038481166000908152600d60209081526040808320938716835292905290812080549190558015612828576127e16001600160a01b03851684836123f4565b604080516001600160a01b038681168252602082018490528251908816927f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068928290030190a25b949350505050565b6001600160a01b0383166128755760405162461bcd60e51b815260040180806020018281038252602d815260200180613ae4602d913960400191505060405180910390fd5b6001600160a01b0382166128ba5760405162461bcd60e51b815260040180806020018281038252602b815260200180613a28602b913960400191505060405180910390fd5b60115460ff16156128cd576128cd612532565b61290a816040518060600160405280602e8152602001613c00602e91396001600160a01b0386166000908152600960205260409020549190612983565b6001600160a01b038085166000908152600960205260408082209390935590841681522054612939908261306b565b6001600160a01b038084166000818152600960209081526040918290209490945580518581529051919392871692600080516020613b3883398151915292918290030190a3505050565b60008184841115612a125760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156129d75781810151838201526020016129bf565b50505050905090810190601f168015612a045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000600460009054906101000a90046001600160a01b03166001600160a01b03166363453ae1836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b158015612a8057600080fd5b505af1158015612a94573d6000803e3d6000fd5b505050506040513d6020811015612aaa57600080fd5b50516008546001600160a01b0384166000908152600b6020526040902054919250908115801590612adb5750600083115b15612b2257612b04612afd836121458668327cb2734119d3b7a9601e1b612fd3565b829061306b565b6001600160a01b0385166000908152600b6020526040902081905590505b80612b2f57505050612b4d565b6001600160a01b03851615612b4957612b49858583613432565b5050505b5050565b6060806000600460009054906101000a90046001600160a01b03166001600160a01b031663abb06b956040518163ffffffff1660e01b815260040160206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d6020811015612bce57600080fd5b505190506060816001600160401b0381118015612bea57600080fd5b50604051908082528060200260200182016040528015612c14578160200160208202803683370190505b5090506060826001600160401b0381118015612c2f57600080fd5b50604051908082528060200260200182016040528015612c59578160200160208202803683370190505b5090506000600460009054906101000a90046001600160a01b03166001600160a01b031663286c6a946040518163ffffffff1660e01b815260040160206040518083038186803b158015612cac57600080fd5b505afa158015612cc0573d6000803e3d6000fd5b505050506040513d6020811015612cd657600080fd5b505190506000805b82811015612e465760048054604080516327ba031760e21b8152928301849052516000926001600160a01b0390921691639ee80c5c916024808301926020929190829003018186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d6020811015612d5d57600080fd5b50516004805460408051633d6ac5b360e21b81526001600160a01b0380861694820194909452905193945091169163f5ab16cc91602480820192602092909190829003018186803b158015612db157600080fd5b505afa158015612dc5573d6000803e3d6000fd5b505050506040513d6020811015612ddb57600080fd5b5051612de75750612e3e565b80868481518110612df457fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612e1f8b828c61278f565b858481518110612e2b57fe5b6020908102919091010152506001909101905b600101612cde565b5092989197509095505050505050565b60008111612e99576040805162461bcd60e51b815260206004820152601e60248201526000805160206138fb833981519152604482015290519081900360640190fd5b6001600160a01b03821660009081526005602052604090205460ff16612ef05760405162461bcd60e51b8152600401808060200182810382526024815260200180613a536024913960400191505060405180910390fd5b612f056001600160a01b0383168530846135f6565b612f0e836131b6565b6001600160a01b0383166000908152600c6020526040902054612f31908261306b565b6001600160a01b038085166000908152600c6020908152604080832094909455600681528382209286168252919091522054612f6d908261306b565b6001600160a01b0380851660009081526006602090815260408083209387168352928152828220939093556007909252902054612faa908261306b565b6001600160a01b038316600090815260076020526040902055612fcd8382613650565b50505050565b600082612fe257506000610cda565b82820282848281612fef57fe5b04146111025760405162461bcd60e51b8152600401808060200182810382526021815260200180613aa16021913960400191505060405180910390fd5b600061110283836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061370e565b600082820183811015611102576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600061110283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612983565b606061315a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137739092919063ffffffff16565b805190915015610c1c5780806020019051602081101561317957600080fd5b5051610c1c5760405162461bcd60e51b815260040180806020018281038252602a815260200180613b88602a913960400191505060405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b031663286c6a946040518163ffffffff1660e01b815260040160206040518083038186803b15801561320657600080fd5b505afa15801561321a573d6000803e3d6000fd5b505050506040513d602081101561323057600080fd5b5051905060005b81811015610c1c5760048054604080516327ba031760e21b8152928301849052516000926001600160a01b0390921691639ee80c5c916024808301926020929190829003018186803b15801561328c57600080fd5b505afa1580156132a0573d6000803e3d6000fd5b505050506040513d60208110156132b657600080fd5b50516004805460408051633d6ac5b360e21b81526001600160a01b0380861694820194909452905193945091169163f5ab16cc91602480820192602092909190829003018186803b15801561330a57600080fd5b505afa15801561331e573d6000803e3d6000fd5b505050506040513d602081101561333457600080fd5b5051613340575061334c565b61334a8482612a1a565b505b600101613237565b6001600160a01b0382166133995760405162461bcd60e51b81526004018080602001828103825260298152602001806139df6029913960400191505060405180910390fd5b6133d6816040518060600160405280602a815260200161391b602a91396001600160a01b0385166000908152600960205260409020549190612983565b6001600160a01b0383166000908152600960205260409020556008546133fc90826130c3565b6008556040805182815290516000916001600160a01b03851691600080516020613b388339815191529181900360200190a35050565b6001600160a01b038084166000908152600c6020908152604080832054600e835281842094871684529390915281205461348a9068327cb2734119d3b7a9601e1b90612145906134839087906130c3565b8590612fd3565b6001600160a01b038087166000908152600d60209081526040808320938916835292905290812054919250906134c0908361306b565b6001600160a01b038088166000818152600d60209081526040808320948b16808452948252808320869055928252600e81528282209382529290925290208590559050801580159061352957506001600160a01b0386166000908152600c602052604090205415155b15612787576001600160a01b038087166000908152600f60209081526040808320938916835292905290812054613560908461306b565b90506135bc613573826121458787612fd3565b6001600160a01b03808a166000818152600f60209081526040808320948d168352938152838220549282526010905291909120546135b691859161214591612fd3565b9061306b565b6001600160a01b03808916600090815260106020908152604080832094909455600f8152838220928a168252919091522055505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612fcd908590613105565b6001600160a01b0382166136955760405162461bcd60e51b8152600401808060200182810382526027815260200180613b116027913960400191505060405180910390fd5b6008546136a2908261306b565b6008556001600160a01b0382166000908152600960205260409020546136c8908261306b565b6001600160a01b0383166000818152600960209081526040808320949094558351858152935192939192600080516020613b388339815191529281900390910190a35050565b6000818361375d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156129d75781810151838201526020016129bf565b50600083858161376957fe5b0495945050505050565b60606128288484600085856137878561388e565b6137d8576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106138175780518252601f1990920191602091820191016137f8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613879576040519150601f19603f3d011682016040523d82523d6000602084013e61387e565b606091505b5091509150612177828286613894565b3b151590565b606083156138a3575081611102565b8251156138b35782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156129d75781810151838201526020016129bf56fe526577617264547261636b65723a20696e76616c6964205f616d6f756e740000526577617264547261636b65723a206275726e20616d6f756e7420657863656564732062616c616e63655265656e7472616e637947756172643a207265656e7472616e742063616c6c00526577617264547261636b65723a205f616d6f756e742065786365656473207374616b6564416d6f756e74526577617264547261636b65723a20696e76616c6964205f726577617264546f6b656e526577617264547261636b65723a20617070726f76652066726f6d20746865207a65726f2061646472657373526577617264547261636b65723a206275726e2066726f6d20746865207a65726f2061646472657373476f7665726e61626c653a20666f7262696464656e0000000000000000000000526577617264547261636b65723a207472616e7366657220746f20746865207a65726f2061646472657373526577617264547261636b65723a20696e76616c6964205f6465706f736974546f6b656e526577617264547261636b65723a20617070726f766520746f20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77526577617264547261636b65723a20616c726561647920696e697469616c697a6564526577617264547261636b65723a207472616e736665722066726f6d20746865207a65726f2061646472657373526577617264547261636b65723a206d696e7420746f20746865207a65726f2061646472657373ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef526577617264547261636b65723a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564526577617264547261636b65723a20616374696f6e206e6f7420656e61626c6564526577617264547261636b65723a205f616d6f756e742065786365656473206465706f73697442616c616e6365526577617264547261636b65723a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22661,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "gov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35343,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 35345,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 35347,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 35349,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "distributor",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 35353,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "isDepositToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35360,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "depositBalances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 35364,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "totalDepositSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35367,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 35371,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35377,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "allowances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 35381,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "cumulativeRewardPerToken",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35386,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "stakedAmounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35392,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "claimableReward",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 35398,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "previousCumulatedRewardPerToken",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 35405,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "cumulativeRewards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 35410,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "averageStakedAmounts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35412,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "inPrivateTransferMode",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 35414,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "inPrivateStakingMode",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 35416,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "inPrivateClaimingMode",
        "offset": 2,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 35420,
        "contract": "contracts/staking/TokenTrackers.sol:FeeQlpTracker",
        "label": "isHandler",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}