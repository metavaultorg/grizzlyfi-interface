{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TRAILING_STOP_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDM_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelEmptyDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_account",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decreaseOrderIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "cancelEmptyDecreaseOrderMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_increaseOrderIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decreaseOrderIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawETH",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "trailingStopPercentage",
          "type": "uint256"
        }
      ],
      "name": "createDecreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_orderProps",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        }
      ],
      "name": "createDecreaseOrderSLTP",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_shouldWrap",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_orderProps",
          "type": "bytes"
        }
      ],
      "name": "createIncreaseOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "withdrawETH",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trailingStopPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trailingStopRefPriceTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "decreaseOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "errors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_trailingStopRefPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_trailingStopRefPriceTimestamp",
          "type": "uint256"
        }
      ],
      "name": "executeDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "executeIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "getDecreaseOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiveToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trailingStopPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        }
      ],
      "name": "getIncreaseOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "purchaseToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "orderProps",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "increaseOrdersIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSLTPExecutionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTrailingStopExecutionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPurchaseTokenAmountUsd",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOrderKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minExecutionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPurchaseTokenAmountUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSLTPExecutionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTrailingStopExecutionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionUtils",
      "outputs": [
        {
          "internalType": "contract IPositionUtils",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_errors",
          "type": "string[]"
        }
      ],
      "name": "setErrors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minExecutionFee",
          "type": "uint256"
        }
      ],
      "name": "setMinExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minPurchaseTokenAmountUsd",
          "type": "uint256"
        }
      ],
      "name": "setMinPurchaseTokenAmountUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSLTPExecutionFee",
          "type": "uint256"
        }
      ],
      "name": "setMinSLTPExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minTrailingStopExecutionFee",
          "type": "uint256"
        }
      ],
      "name": "setMinTrailingStopExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orderExecutor",
          "type": "address"
        }
      ],
      "name": "setOrderExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setOrderKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionRouter",
          "type": "address"
        }
      ],
      "name": "setPositionRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPositionUtils",
          "name": "_positionUtils",
          "type": "address"
        }
      ],
      "name": "setPositionUtils",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trailingStopFee",
          "type": "uint256"
        }
      ],
      "name": "setTrailingStopFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trailingStopFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "trailingStopPositions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_trailingStopPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateDecreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_triggerAboveThreshold",
          "type": "bool"
        }
      ],
      "name": "updateIncreaseOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_orderIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refPriceTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateTrailingRefPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb155c3c8f788cdfdb0a9fc665727222d2be4ede899f26070d79dc11816287ff9",
  "receipt": {
    "to": null,
    "from": "0xc1048DB8e91E68b468b1d7B513fbB666C6e1622D",
    "contractAddress": "0xFAe98dE80606E25FA0E9ce523Aa196ca7BFb2410",
    "transactionIndex": 0,
    "gasUsed": "5306472",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3f15c04b26c72821056a55c0a40dc8cdc654f2c33aa7b56eaf2949039eab3b79",
    "transactionHash": "0xb155c3c8f788cdfdb0a9fc665727222d2be4ede899f26070d79dc11816287ff9",
    "logs": [],
    "blockNumber": 38480725,
    "cumulativeGasUsed": "5306472",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ed7bbfc93c843c4e1ec43a777d114cf",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TRAILING_STOP_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDM_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelEmptyDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelEmptyDecreaseOrderMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_increaseOrderIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"}],\"name\":\"createDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_orderProps\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"createDecreaseOrderSLTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldWrap\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_orderProps\",\"type\":\"bytes\"}],\"name\":\"createIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopRefPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"errors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopRefPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopRefPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"orderProps\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSLTPExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTrailingStopExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOrderKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchaseTokenAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSLTPExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrailingStopExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionUtils\",\"outputs\":[{\"internalType\":\"contract IPositionUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_errors\",\"type\":\"string[]\"}],\"name\":\"setErrors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseTokenAmountUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSLTPExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinSLTPExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTrailingStopExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinTrailingStopExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderExecutor\",\"type\":\"address\"}],\"name\":\"setOrderExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOrderKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionRouter\",\"type\":\"address\"}],\"name\":\"setPositionRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionUtils\",\"name\":\"_positionUtils\",\"type\":\"address\"}],\"name\":\"setPositionUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trailingStopFee\",\"type\":\"uint256\"}],\"name\":\"setTrailingStopFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trailingStopFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"trailingStopPositions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopPercentage\",\"type\":\"uint256\"}],\"name\":\"updateDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateTrailingRefPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/core/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IPositionUtils.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\n\\n\\ncontract OrderBook is ReentrancyGuard, IOrderBook {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n    uint256 public constant USDM_PRECISION = 1e18;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant override MAX_TRAILING_STOP_PERCENTAGE = 2000;\\n\\n    struct SLTPOrder {\\n        uint256 trailingStopPercentage;\\n        uint256 slPrice;\\n        uint256 tpPrice;\\n        address receiveToken;\\n        bool withdrawETH;    \\n    }\\n\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n        bytes orderProps;        \\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address[] path;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;  // For orderType (1,2,3) whole position will be closed , size data will be read from position\\n        bool isLong;\\n        uint256 triggerPrice;  // RefPrice for Trailing Stop\\n        bool triggerAboveThreshold;\\n        uint256 minOut;\\n        bool withdrawETH;\\n        uint256 executionFee;\\n        uint256 orderType;   // 0 - None,1 - Stop Loss,2 - Take Profit, 3 - Trailing Stop etc.\\n        uint256 trailingStopPercentage;\\n        uint256 trailingStopRefPriceTimestamp;\\n    }\\n\\n    mapping(bytes32 => bool) public trailingStopPositions;\\n\\n    mapping(address => mapping(uint256 => IncreaseOrder)) public increaseOrders;\\n    mapping(address => uint256) public increaseOrdersIndex;\\n    mapping(address => mapping(uint256 => DecreaseOrder)) public decreaseOrders;\\n    mapping(address => uint256) public decreaseOrdersIndex;\\n\\n    mapping(address => bool) public isOrderKeeper;\\n\\n    address public gov;\\n    address public weth;\\n    address public usdm;\\n    address public router;\\n    address public vault;\\n    address public orderExecutor;\\n    address public positionRouter;\\n\\n    IPositionUtils public positionUtils;\\n\\n\\n    uint256 public override minExecutionFee;\\n    uint256 public override minTrailingStopExecutionFee;  // For execution\\n    uint256 public override minSLTPExecutionFee;  // For execution\\n    uint256 public trailingStopFee;         // For maintenance, percentage 200 => %2;\\n    uint256 public minPurchaseTokenAmountUsd;\\n    bool public isInitialized = false;\\n\\n    mapping(uint256 => string) public errors;\\n\\n    mapping(address => uint256) public feeReserves;\\n\\n\\n \\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n\\n        //emit WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function _collectTrailingStopFees(\\n        address _feeToken,\\n        uint256 _amountOut,\\n        uint256 _size\\n    ) internal returns (uint256) {\\n        uint256 feeUsdToToken = positionUtils.usdToTokenMax(_feeToken,_size.mul(trailingStopFee).div(BASIS_POINTS_DIVISOR));\\n        if (feeUsdToToken < _amountOut) {\\n            uint256 afterFeeAmount = _amountOut.sub(feeUsdToToken);\\n            feeReserves[_feeToken] = feeReserves[_feeToken].add(feeUsdToToken);\\n            return afterFeeAmount;\\n        }\\n        return _amountOut;\\n    }\\n\\n\\n    function setErrors(string[] calldata _errors) external {\\n        _onlyGov();\\n        for (uint256 i = 0; i < _errors.length; i++) {\\n            errors[i] = _errors[i];\\n        }\\n    }\\n\\n    function _validate(bool _condition, uint256 _errorCode) private view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n\\n    function _onlyGov() private view {\\n        _validate(msg.sender == gov, 0);\\n    }\\n\\n    function _onlyOrderExecutor() private view {\\n        _validate(msg.sender == orderExecutor, 0);\\n    }\\n\\n    function _onlyPositionRouter() private view {\\n        _validate(msg.sender == positionRouter, 0);\\n    }\\n\\n    function _onlyOrderKeeper() private view {\\n        _validate(isOrderKeeper[msg.sender], 0);\\n    }\\n\\n    function setOrderKeeper(address _account, bool _isActive) external {\\n        _onlyGov();\\n        isOrderKeeper[_account] = _isActive;\\n    }\\n\\n    function initialize(\\n        address _router,\\n        address _vault,\\n        address _weth,\\n        address _usdm,\\n        uint256 _minExecutionFee,\\n        uint256 _minSLTPExecutionFee,\\n        uint256 _minTrailingStopExecutionFee,\\n        uint256 _minPurchaseTokenAmountUsd\\n    ) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n\\n        router = _router;\\n        vault = _vault;\\n        weth = _weth;\\n        usdm = _usdm;\\n        minExecutionFee = _minExecutionFee;\\n        minSLTPExecutionFee = _minSLTPExecutionFee;\\n        minTrailingStopExecutionFee = _minTrailingStopExecutionFee;\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n    }\\n\\n    receive() external payable {\\n        _validate(msg.sender == weth, 2);\\n    }\\n\\n    function setPositionUtils(IPositionUtils _positionUtils) external {\\n        _onlyGov();\\n        positionUtils = _positionUtils;\\n    }    \\n\\n    function setOrderExecutor(\\n        address _orderExecutor\\n    )external  {\\n        _onlyGov();\\n        orderExecutor = _orderExecutor;\\n    }\\n\\n    function setPositionRouter(\\n        address _positionRouter\\n    )external  {\\n        _onlyGov();\\n        positionRouter = _positionRouter;\\n    }\\n\\n    function setMinExecutionFee(uint256 _minExecutionFee) external  {\\n        _onlyGov();\\n        minExecutionFee = _minExecutionFee;\\n\\n    }\\n    function setTrailingStopFee(uint256 _trailingStopFee) external  {\\n        _onlyGov();\\n        trailingStopFee = _trailingStopFee;\\n\\n    }\\n\\n    function setMinTrailingStopExecutionFee(uint256 _minTrailingStopExecutionFee) external  {\\n        _onlyGov();\\n        minTrailingStopExecutionFee = _minTrailingStopExecutionFee;\\n\\n    }\\n\\n    function setMinSLTPExecutionFee(uint256 _minSLTPExecutionFee) external  {\\n        _onlyGov();\\n        minSLTPExecutionFee = _minSLTPExecutionFee;\\n\\n    }\\n\\n    function setMinPurchaseTokenAmountUsd(uint256 _minPurchaseTokenAmountUsd) external  {\\n        _onlyGov();\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n    }\\n\\n    function setGov(address _gov) external  {\\n        _onlyGov();\\n        gov = _gov;\\n\\n    }\\n\\n   \\n    function cancelMultiple(\\n        uint256[] memory _increaseOrderIndexes,\\n        uint256[] memory _decreaseOrderIndexes\\n    ) external {\\n        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\\n            cancelIncreaseOrder(_increaseOrderIndexes[i]);\\n        }\\n        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\\n            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\\n        }\\n    }\\n\\n    function cancelEmptyDecreaseOrderMultiple(\\n        address[] memory _account,\\n        uint256[] memory _decreaseOrderIndexes\\n    ) external {\\n        _onlyOrderKeeper();\\n        _validate(_account.length == _decreaseOrderIndexes.length,18);\\n        for (uint256 i = 0; i < _account.length; i++) {\\n            cancelEmptyDecreaseOrder(_account[i],_decreaseOrderIndexes[i]);\\n        }\\n    }    \\n\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex)\\n        public override\\n        view\\n        returns (\\n            address collateralToken,\\n            address receiveToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee,\\n            uint256 orderType,\\n            uint256 trailingStopPercentage\\n        )\\n    {\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        return (\\n            order.path.length > 0 ? order.path[0] : address(0),\\n            order.path.length > 1 ? order.path[1] : address(0),\\n            order.collateralDelta, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee,order.orderType,order.trailingStopPercentage);\\n    }\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex)\\n        public\\n        view\\n        override\\n        returns (\\n            address purchaseToken,\\n            uint256 purchaseTokenAmount,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        )\\n    {\\n        IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\\n        return (\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function getOrderProps(bytes memory _orderProps) private pure returns(uint256,uint256,uint256,address,bool){\\n        return abi.decode(_orderProps, (uint256,uint256,uint256,address,bool));\\n    }\\n\\n    function getOrderPropsStruct(bytes memory _orderProps) private pure returns(SLTPOrder memory){\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,address receiveToken,bool withdrawETH) = abi.decode(_orderProps, (uint256,uint256,uint256,address,bool));\\n\\n        SLTPOrder memory sltpOrder = SLTPOrder(\\n            trailingStopPercentage,\\n            slPrice,\\n            tpPrice,\\n            receiveToken,\\n            withdrawETH\\n        );\\n        return sltpOrder;\\n    }\\n\\n    function _validateIncreaseOrder(\\n        uint256 _executionFee,\\n        bytes memory _orderProps\\n        ) private view returns(uint256){\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,,) = getOrderProps(_orderProps);\\n        require(trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE,\\\"PR:invalid tsp\\\");\\n        require(trailingStopPercentage == 0 || slPrice == 0 ,\\\"PR:only one type sl\\\");\\n\\n\\n        uint256 orderTotalFee = minSLTPExecutionFee.mul((slPrice>0?1:0)+(tpPrice>0?1:0));\\n        if(trailingStopPercentage>0){\\n            orderTotalFee = orderTotalFee.add(minTrailingStopExecutionFee); \\n        }\\n        \\n        require(_executionFee > minExecutionFee.add(orderTotalFee), \\\"PR: invalid executionFee\\\");\\n        return orderTotalFee;\\n    }\\n\\n\\n\\n    function createIncreaseOrder(\\n        address _purchaseToken,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        // uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap,\\n        bytes memory _orderProps\\n    ) external payable nonReentrant {\\n        // always need this call because of mandatory executionFee user has to transfer in ETH\\n        _transferInETH();\\n        _validateIncreaseOrder(_executionFee,_orderProps);\\n\\n        if (_shouldWrap) {\\n            _validate(_purchaseToken == weth, 8);\\n            _validate(msg.value == _executionFee.add(_amountIn), 9);\\n        } else {\\n            _validate(msg.value == _executionFee, 10);\\n            IRouter(router).pluginTransfer(_purchaseToken, msg.sender, address(this), _amountIn);\\n        }\\n\\n        // address _purchaseToken = _path[_path.length - 1];\\n        // uint256 _purchaseTokenAmount;\\n        // if (_path.length > 1) {\\n        //     _validate(_path[0] != _purchaseToken, 4);\\n        //     IERC20(_path[0]).safeTransfer(vault, _amountIn);\\n        //     _purchaseTokenAmount = _swap(_path, _minOut, address(this));\\n        // } else {\\n        //     _purchaseTokenAmount = _amountIn;\\n        // }\\n\\n        {\\n            uint256 _purchaseTokenAmountUsd = IVault(vault).tokenToUsdMin(_purchaseToken, _amountIn);\\n            _validate(_purchaseTokenAmountUsd >= minPurchaseTokenAmountUsd, 13);\\n        }\\n\\n        _createIncreaseOrder(\\n            msg.sender,\\n            _purchaseToken,\\n            _amountIn,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _orderProps\\n\\n        );\\n    }\\n\\n    function _createIncreaseOrder(\\n        address _account,\\n        address _purchaseToken,\\n        uint256 _purchaseTokenAmount,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bytes memory _orderProps\\n    ) private {\\n        uint256 _orderIndex = increaseOrdersIndex[_account];\\n        IncreaseOrder memory order = IncreaseOrder(\\n            _account,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _orderProps\\n        );\\n        increaseOrdersIndex[_account] = _orderIndex.add(1);\\n        increaseOrders[_account][_orderIndex] = order;\\n\\n        positionUtils.emitCreateIncreaseOrder(_account,\\n                _orderIndex,\\n                _purchaseToken,\\n                _purchaseTokenAmount,\\n                _collateralToken,\\n                _indexToken,\\n                _sizeDelta,\\n                _isLong,\\n                _triggerPrice,\\n                _triggerAboveThreshold,\\n                _executionFee,\\n                _orderProps);\\n\\n    }\\n\\n    function updateIncreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external nonReentrant {\\n        IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n\\n        positionUtils.emitUpdateIncreaseOrder(msg.sender, _orderIndex, order.collateralToken, order.indexToken, order.isLong, _sizeDelta, _triggerPrice, _triggerAboveThreshold);\\n    }\\n\\n    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        delete increaseOrders[msg.sender][_orderIndex];\\n\\n        if (order.purchaseToken == weth) {\\n            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\\n        } else {\\n            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\\n            _transferOutETH(order.executionFee, msg.sender);\\n        }\\n\\n        positionUtils.emitCancelIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function _processOrder(IncreaseOrder memory _order) private returns (uint256 ) {\\n        // (uint256 positionSize,\\n        // ,\\n        // ,\\n        // ,\\n        // ,\\n        // ,\\n        // ,\\n        // ) = IVault(vault).getPosition(_request.account, _request.path[_request.path.length - 1], _request.indexToken,_request.isLong);\\n\\n        uint256 executionFee = _order.executionFee;\\n\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,address receiveToken,) = getOrderProps(_order.orderProps);\\n\\n        if (trailingStopPercentage>0 || slPrice>0 || tpPrice>0){ //TP and SL Order only for First Increase\\n            address[] memory path;\\n            if(receiveToken != _order.collateralToken ){\\n                path = new address[](2);\\n                path[0] = _order.collateralToken;\\n                path[1] = receiveToken;\\n            }else{\\n                path = new address[](1);\\n                path[0] = _order.collateralToken;\\n            }                 \\n\\n            _createDecreaseOrderSLTP(_order.account, path , _order.indexToken, _order.isLong,_order.orderProps,_order.sizeDelta,executionFee.sub(minExecutionFee));\\n            executionFee = minExecutionFee;\\n        }\\n        return executionFee;\\n    }    \\n\\n\\n    function executeIncreaseOrder(\\n        address _address,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver\\n    ) external override nonReentrant {\\n        _onlyOrderExecutor();\\n        IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        // increase long should use max price\\n        // increase short should use min price\\n        (uint256 currentPrice, ) = positionUtils.validateOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, order.isLong, true,0,0);\\n\\n        delete increaseOrders[_address][_orderIndex];\\n\\n        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\\n\\n        if (order.purchaseToken != order.collateralToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = order.purchaseToken;\\n            path[1] = order.collateralToken;\\n\\n            uint256 amountOut = _swap(path, 0, address(this));\\n            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\\n        }\\n\\n        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\\n\\n        uint256 executionFee = _processOrder(order);\\n            \\n        _transferOutETH(executionFee, _feeReceiver);\\n\\n        positionUtils.emitExecuteIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address[] memory _path,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _minOut,\\n        bool _withdrawETH,\\n        uint256 trailingStopPercentage\\n    ) external payable nonReentrant {\\n\\n        _transferInETH();\\n        \\n        \\n        \\n        _validate(_path.length == 1 || _path.length == 2, 3);\\n        if(trailingStopPercentage>0){\\n            _validate(msg.value >= minTrailingStopExecutionFee, 7);\\n            _validate(trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE,17);\\n        }else{\\n            _validate(msg.value >  minExecutionFee, 7);\\n        }\\n\\n        if (_withdrawETH) {\\n            _validate(_path[_path.length - 1] == weth, 4);\\n        }\\n\\n        uint256 positionSize;\\n\\n        if(trailingStopPercentage>0){\\n            bytes32 key = _getPositionKey(msg.sender, _path[0], _indexToken,_isLong);\\n            _validate(!trailingStopPositions[key],19);\\n\\n            (positionSize,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ) = IVault(vault).getPosition(msg.sender, _path[0], _indexToken,_isLong);\\n\\n            _validate(positionSize>0,20);\\n        }    \\n\\n\\n\\n        DecreaseOrder memory order = DecreaseOrder(\\n            msg.sender,\\n            _path,\\n            trailingStopPercentage>0 ? 0 :_collateralDelta,\\n            _indexToken,\\n            trailingStopPercentage>0 ? positionSize : _sizeDelta,\\n            _isLong,\\n            trailingStopPercentage>0 ? (_isLong ? IVault(vault).getMinPrice(_indexToken) : IVault(vault).getMaxPrice(_indexToken)) :  _triggerPrice,\\n            trailingStopPercentage>0 ? false : _triggerAboveThreshold,\\n            trailingStopPercentage>0 ? 0 : _minOut,\\n            _withdrawETH,\\n            msg.value,\\n            trailingStopPercentage>0 ? 3 : 0,\\n            trailingStopPercentage,\\n            trailingStopPercentage>0 ? block.timestamp : 0\\n        );\\n        \\n        _createDecreaseOrder(order);\\n    }\\n\\n    function createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta\\n    ) external payable override  nonReentrant {\\n        _onlyPositionRouter();\\n        _transferInETH();\\n        _createDecreaseOrderSLTP(_account,_path,_indexToken,_isLong,_orderProps,_sizeDelta,msg.value);\\n    }    \\n\\n    function _createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta,\\n        uint256 _executionFee\\n    ) private {\\n        \\n\\n        // _validate(trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE,17);\\n\\n        // uint256 orderTotalFee = minExecutionFee.mul((slPrice>0?1:0)+(tpPrice>0?1:0));\\n        // if(trailingStopPercentage>0){\\n        //     orderTotalFee = orderTotalFee.add(minTrailingStopExecutionFee); \\n        // }\\n       \\n        // _validate(msg.value > orderTotalFee, 7);\\n\\n        // if (withdrawETH) {\\n        //     _validate(_path[_path.length - 1] == weth, 4);\\n        // }\\n\\n\\n        uint256 executionFee = _executionFee;\\n\\n        (uint256 positionSize,\\n        ,\\n        uint256 entryPrice,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ) = IVault(vault).getPosition(_account, _path[0], _indexToken,_isLong);\\n\\n        if(positionSize == _sizeDelta){\\n            SLTPOrder memory sltpOrder = getOrderPropsStruct(_orderProps);\\n            \\n            if(sltpOrder.tpPrice>0 && ((_isLong && sltpOrder.tpPrice>entryPrice) || (!_isLong && sltpOrder.tpPrice<entryPrice))){\\n                uint256 fee = executionFee<minSLTPExecutionFee.mul(2)?executionFee:minSLTPExecutionFee;\\n                DecreaseOrder memory order = DecreaseOrder(\\n                    _account,\\n                    _path,\\n                    0,\\n                    _indexToken,\\n                    positionSize,\\n                    _isLong,\\n                    sltpOrder.tpPrice, \\n                    sltpOrder.tpPrice>entryPrice, \\n                    0, \\n                    sltpOrder.withdrawETH,\\n                    fee,\\n                    2,\\n                    0,\\n                    0\\n                );\\n                _createDecreaseOrder(order);\\n                executionFee = executionFee.sub(fee);\\n            }\\n\\n            if(sltpOrder.trailingStopPercentage>0 || (sltpOrder.slPrice>0 && ((_isLong && sltpOrder.slPrice<entryPrice) || (!_isLong && sltpOrder.slPrice>entryPrice)) )){\\n                uint256 fee = executionFee < _executionFee ? executionFee : sltpOrder.slPrice > 0 ? minSLTPExecutionFee : minTrailingStopExecutionFee;\\n\\n                DecreaseOrder memory order = DecreaseOrder(\\n                    _account,\\n                    _path,\\n                    0,\\n                    _indexToken,\\n                    positionSize,\\n                    _isLong,\\n                    sltpOrder.slPrice>0 ? sltpOrder.slPrice : entryPrice, \\n                    sltpOrder.slPrice>0 ? sltpOrder.slPrice>entryPrice : false,  // for trailing stop not needed\\n                    0, \\n                    sltpOrder.withdrawETH,\\n                    fee,\\n                    sltpOrder.slPrice>0 ? 1 : 3, \\n                    sltpOrder.slPrice>0 ? 0 : sltpOrder.trailingStopPercentage,\\n                    sltpOrder.slPrice>0 ? 0 : block.timestamp\\n                );\\n                _createDecreaseOrder(order);\\n                executionFee = executionFee.sub(fee);\\n            }\\n        }\\n        if(executionFee>=minSLTPExecutionFee){\\n             _transferOutETHWithGasLimit(executionFee, payable(_account));\\n        }\\n\\n    }\\n\\n    function _getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _collateralToken, _indexToken, _isLong));\\n    }\\n\\n\\n    function _createDecreaseOrder(\\n        DecreaseOrder memory _order\\n    ) private {\\n        uint256 orderIndex = decreaseOrdersIndex[_order.account];\\n\\n        decreaseOrdersIndex[_order.account] = orderIndex.add(1);\\n        decreaseOrders[_order.account][orderIndex] = _order;\\n\\n        if(_order.orderType == 3){\\n            bytes32 key = _getPositionKey(_order.account, _order.path[0],_order.indexToken, _order.isLong);\\n            trailingStopPositions[key] = true;\\n        }\\n\\n        \\n\\n        \\n        positionUtils.emitCreateDecreaseOrder(\\n            _order.account, \\n            orderIndex, \\n            _order.path[0], \\n            _order.path[_order.path.length-1], \\n            _order.collateralDelta, \\n            _order.indexToken, \\n            _order.sizeDelta, \\n            _order.isLong, \\n            _order.triggerPrice, \\n            _order.triggerAboveThreshold, \\n            _order.executionFee,\\n            _order.orderType,\\n            _order.trailingStopPercentage\\n            );\\n    }\\n\\n    function executeDecreaseOrder(\\n        address _address,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver,\\n        uint256 _trailingStopRefPrice,\\n        uint256 _trailingStopRefPriceTimestamp\\n    ) external override nonReentrant {\\n        _onlyOrderExecutor();\\n        DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        // decrease long should use min price\\n        // decrease short should use max price\\n        (uint256 currentPrice, ) = positionUtils.validateOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, !order.isLong, true ,order.trailingStopPercentage,_trailingStopRefPrice);\\n        uint256 positionSize = order.sizeDelta;\\n        uint256 positionCollateral = order.collateralDelta;\\n\\n        delete decreaseOrders[_address][_orderIndex];\\n        if(order.orderType == 3){\\n            bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n            trailingStopPositions[key] = false;\\n        }\\n\\n        {\\n\\n            if(order.orderType>0){\\n                (positionSize,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ) = IVault(vault).getPosition(order.account, order.path[0],order.indexToken,order.isLong);\\n\\n                positionCollateral = 0;\\n            }\\n\\n            uint256 amountOut = IRouter(router).pluginDecreasePosition(\\n                order.account,\\n                order.path[0],\\n                order.indexToken,\\n                positionCollateral,\\n                positionSize,\\n                order.isLong,\\n                address(this)\\n            );\\n\\n            if(order.orderType == 3 && amountOut>0){\\n                amountOut = _collectTrailingStopFees(order.path[0],amountOut, positionSize);\\n\\n            }\\n\\n\\n            bool isSwapExecuted;\\n\\n            if (order.path.length > 1) {\\n                uint256 maxIn =positionUtils.getMaxAmountIn(order.path[0], order.path[1]);\\n                if(amountOut<=maxIn){ \\n                    IERC20(order.path[0]).safeTransfer(vault, amountOut);\\n                    amountOut = _swap(order.path, order.minOut, address(this));\\n                    isSwapExecuted = true;\\n                }    \\n            }\\n\\n            if (order.withdrawETH) {\\n                _transferOutETHWithGasLimit(amountOut, payable(order.account));\\n            } else {\\n                if (order.path.length > 1 && isSwapExecuted) {\\n                    IERC20(order.path[order.path.length - 1]).safeTransfer(order.account, amountOut);\\n                }else{\\n                    IERC20(order.path[0]).safeTransfer(order.account, amountOut);\\n                }    \\n            }\\n\\n            _transferOutETH(order.executionFee, _feeReceiver);\\n        }    \\n\\n        positionUtils.emitExecuteDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.path[0],\\n            positionCollateral,\\n            order.indexToken,\\n            positionSize,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n\\n        if(order.orderType == 3){\\n            positionUtils.emitExecuteTrailingStopOrder(\\n                order.account,\\n                _orderIndex,\\n                order.trailingStopPercentage,\\n                _trailingStopRefPrice,\\n                _trailingStopRefPriceTimestamp,      \\n                currentPrice\\n            );\\n        }\\n\\n    }\\n\\n    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        delete decreaseOrders[msg.sender][_orderIndex];\\n        if(order.orderType == 3){\\n            bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n            trailingStopPositions[key] = false;\\n        }\\n\\n        _transferOutETH(order.executionFee, msg.sender);\\n\\n        positionUtils.emitCancelDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.path[0],\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function cancelEmptyDecreaseOrder(address _account,uint256 _orderIndex) public nonReentrant {\\n        _onlyOrderKeeper();\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        (uint256 positionSize,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ) = IVault(vault).getPosition(order.account, order.path[0],order.indexToken,order.isLong);\\n        \\n        if(positionSize == 0){\\n\\n            delete decreaseOrders[order.account][_orderIndex];\\n            if(order.orderType == 3){\\n                bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n                trailingStopPositions[key] = false;\\n            }\\n            _transferOutETH(order.executionFee, payable(order.account));\\n\\n            positionUtils.emitCancelDecreaseOrder(\\n                order.account,\\n                _orderIndex,\\n                order.path[0],\\n                order.collateralDelta,\\n                order.indexToken,\\n                order.sizeDelta,\\n                order.isLong,\\n                order.triggerPrice,\\n                order.triggerAboveThreshold,\\n                order.executionFee\\n            );\\n        }\\n    }\\n\\n\\n    function updateTrailingRefPrice(\\n        address _account,\\n        uint256 _orderIndex,\\n        uint256 _refPrice,\\n        uint256 _refPriceTimestamp\\n    ) external nonReentrant {\\n        _onlyOrderKeeper();\\n        DecreaseOrder storage order = decreaseOrders[_account][_orderIndex];\\n        _validate(order.account != address(0), 1);\\n\\n        if(order.orderType == 3){\\n            order.triggerPrice = _refPrice;\\n            order.trailingStopRefPriceTimestamp = _refPriceTimestamp;\\n        }\\n\\n    }\\n\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _trailingStopPercentage    \\n    ) external nonReentrant {\\n        DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        if(order.trailingStopPercentage>0){\\n            _validate(_trailingStopPercentage>0 && _trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE, 17);\\n            order.trailingStopPercentage = _trailingStopPercentage;\\n        }else{\\n            order.triggerPrice = _triggerPrice;\\n            order.triggerAboveThreshold = _triggerAboveThreshold;\\n            order.sizeDelta = _sizeDelta;\\n            order.collateralDelta = _collateralDelta;\\n        }\\n\\n        positionUtils.emitUpdateDecreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.path[0],\\n            _collateralDelta,\\n            order.indexToken,\\n            _sizeDelta,\\n            order.isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _trailingStopPercentage\\n        );\\n    }\\n\\n    function _transferInETH() private {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value: msg.value}();\\n        }\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n    function _transferOutETHWithGasLimit(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.transfer(_amountOut);\\n    }\\n\\n    function _swap(\\n        address[] memory _path,\\n        uint256 _minOut,\\n        address _receiver\\n    ) private returns (uint256) {\\n        _validate(_path.length == 2 , 3);\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        // if (_path.length == 3) {\\n        //     uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n        //     IERC20(_path[1]).safeTransfer(vault, midOut);\\n        //     return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n        // }\\n    }\\n\\n    function _vaultSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _minOut,\\n        address _receiver\\n    ) private returns (uint256) {\\n        uint256 amountOut;\\n        amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n\\n        _validate(amountOut >= _minOut, 16);\\n        return amountOut;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3c194aca2d26e065bdaecf776ae9d46e05894176621b3a21ccdaadc8629dd86b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.9.0;\\n\\ninterface IOrderBook {\\n    // function getSwapOrder(address _account, uint256 _orderIndex)\\n    //     external\\n    //     view\\n    //     returns (\\n    //         address path0,\\n    //         address path1,\\n    //         address path2,\\n    //         uint256 amountIn,\\n    //         uint256 minOut,\\n    //         uint256 triggerRatio,\\n    //         bool triggerAboveThreshold,\\n    //         bool shouldUnwrap,\\n    //         uint256 executionFee\\n    //     );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address purchaseToken,\\n            uint256 purchaseTokenAmount,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address collateralToken,\\n            address receiveToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee,\\n            uint256 orderType,\\n            uint256 trailingStopPercentage\\n        );\\n\\n    // function executeSwapOrder(\\n    //     address,\\n    //     uint256,\\n    //     address payable\\n    // ) external;\\n\\n    function executeDecreaseOrder(\\n        address,\\n        uint256,\\n        address payable,\\n        uint256 _trailingStopRefPrice,\\n        uint256 _trailingStopRefPriceTimestamp\\n    ) external;\\n\\n    function executeIncreaseOrder(\\n        address,\\n        uint256,\\n        address payable\\n    ) external;\\n\\n    function createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta\\n    ) external payable;\\n\\n    function minExecutionFee() external view returns (uint256);\\n    function minTrailingStopExecutionFee() external view returns (uint256);\\n    function minSLTPExecutionFee() external view returns (uint256);\\n    function MAX_TRAILING_STOP_PERCENTAGE() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xcdffaeb1afe08163354c37a56606e7ec38cf2a53d48b8fc908c72316dbf17c13\",\"license\":\"MIT\"},\"contracts/core/interfaces/IPositionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPositionUtils {\\n    function shouldDeductFee(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta,\\n        uint256 _increasePositionBufferBps\\n    ) external view returns (bool);\\n\\n    function validatePositionPrice(\\n        bool _isIncrease,\\n        bool _isLong,\\n        address _indexToken,\\n        uint256 _price,\\n        uint256 _sizeDelta,\\n        uint256 maxGlobalLongSize,\\n        uint256 maxGlobalShortSize\\n    ) external returns(uint256) ;\\n\\n    function validateOrderPrice(\\n        bool _triggerAboveThreshold,\\n        uint256 _triggerPrice,\\n        address _indexToken,\\n        bool _maximizePrice,\\n        bool _raise,\\n        uint256 trailingStopPercentage,\\n        uint256 refPrice\\n    ) external view returns (uint256, bool);\\n\\n    function emitCreateIncreaseOrder(\\n        address  account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        bytes memory orderProps         \\n    ) external;\\n\\n\\n   function emitCancelIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    ) external;\\n    function emitUpdateIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    ) external;\\n    function emitCreateDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address receiveToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 orderType,\\n        uint256 trailingStopPercentage\\n    ) external;\\n\\n    function emitCancelDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    ) external;\\n    function emitExecuteTrailingStopOrder(\\n        address account,\\n        uint256 orderIndex,\\n        uint256  trailingStopPercentage,\\n        uint256 trailingStopRefPrice,\\n        uint256 trailingStopRefPriceTimestamp,\\n        uint256 executionPrice\\n    ) external;\\n    function emitUpdateDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 trailingStopPercentage\\n    ) external;\\n    function emitCreateSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitCancelSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitUpdateSwapOrder(\\n        address account,\\n        uint256 ordexIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 amountOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n\\n    function validateSwapOrderPriceWithTriggerAboveThreshold(address[] memory _path, uint256 _triggerRatio) external view returns (bool); \\n\\n    function getMaxAmountIn(\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256);\\n\\n    function usdToTokenMax(address _token, uint256 _usdAmount) external view returns (uint256);\\n\\n    function usdToTokenMin(address _token, uint256 _usdAmount) external view returns (uint256);\\n\\n    function usdToToken(\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x38465d7ee61b947045617d9c7a96e5a75f3d0b710aae26d9030029e7352a5556\",\"license\":\"MIT\"},\"contracts/core/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n\\n    function pluginTransfer(\\n        address _token,\\n        address _account,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    function pluginIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function pluginDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function swap(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x587948a9395b2f9052ab3680124b594504ed899941ea9fa5ea5cb59f33ec89ed\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdm() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdmAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdmAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xc247c3dc87351e3bdc8dc14694ca7ee035b9e52ccfd7abcfe0f6e59f1d1598e0\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken,\\n        address _indexToken\\n    ) external returns (bool);\\n\\n    function validateIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external view;\\n\\n    function validateDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external view;\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function getEntryFundingRate(\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getPositionFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getFundingFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _usdmAmount\\n    ) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xafc12294f1c958c02e178106e3db33710a7f4c904f8ef5f1549ceba151427509\",\"license\":\"MIT\"},\"contracts/libraries/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcd6e686bb83826306dfe5831e369ac9f462705a7afe1a18c3c042940a1d59d8a\",\"license\":\"MIT\"},\"contracts/libraries/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x52455e4835fa0f6e8846c56fcd18484b8012049f38b2f465f4374d9316d557a5\",\"license\":\"MIT\"},\"contracts/libraries/token/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2179c12e4ac50e8a769b1b43f43558f42bf511fcd7236e034c13c6e4450dbe85\",\"license\":\"MIT\"},\"contracts/libraries/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ac6523715fd08440082ed1ab1db37b7b5a009f9948c29ce1e63d17171e1ba6\",\"license\":\"MIT\"},\"contracts/libraries/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x223b08d372e9f820805da8b8cbc742bf4c0b7e9fdd1cab8165006ba570ce0b52\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\",\"keccak256\":\"0x29613132c0162f9cdc8336e895d1da9aaf3660909adcf1a0134d714e53524ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526014805460ff1916905534801561001a57600080fd5b506001600055600780546001600160a01b03191633179055615e3080620000426000396000f3fe6080604052600436106102695760003560e01c8063026032ee1461028e5780630d5cc938146102ce578063126082cf146102ee57806312d43a51146103105780631ce9cb8f146103325780631e261538146103525780632152336a146103725780632b7d6290146103925780633833f5f5146103c9578063392e53cd146103f65780633fc8cef31461040b57806347e0bbd0146104205780634b8d6f3b146104405780635bb63c1e146104605780635bfb9358146104805780635e44babd146104a057806361ef161f146104c05780636344ee85146104d557806363ae2103146104ea57806373e42bc8146104ff578063756677a1146105125780637ce5ff8c14610532578063852a752c146105455780638566ba5c1461056557806387b5c4c91461058557806388f6c3b31461059a5780638de10c2e146105ba57806395082d25146105cf5780639983ee1b146105e45780639b96eae5146106045780639e71b0f014610619578063a6e9790914610639578063a849d64414610659578063ae46415b1461066e578063aec2245514610683578063bbede3fb146106a3578063c843e81c146106c3578063cfaa55eb146106e3578063cfad57a214610703578063d38ab51914610723578063d3bab1d114610743578063d566d0ca14610778578063d95423e614610798578063dc59b7b6146107ad578063e9fe8a5f146107c2578063ee138d0f146107e2578063f2555278146107f7578063f2d2e01b14610817578063f887ea4014610850578063fbfa77cf14610865578063fc2cee621461087a578063fdace2d71461089a578063fed1a606146108ad578063ff637e81146108da57610289565b3661028957600854610287906001600160a01b0316331460026108fa565b005b600080fd5b34801561029a57600080fd5b506102ae6102a9366004614dfd565b610934565b6040516102c59b9a99989796959493929190615605565b60405180910390f35b3480156102da57600080fd5b506102876102e936600461519b565b610b6a565b3480156102fa57600080fd5b50610303610b77565b6040516102c59190615d2b565b34801561031c57600080fd5b50610325610b7d565b6040516102c591906153cc565b34801561033e57600080fd5b5061030361034d366004614c59565b610b8c565b34801561035e57600080fd5b5061028761036d366004614dd0565b610b9e565b34801561037e57600080fd5b5061028761038d366004614c59565b610bd1565b34801561039e57600080fd5b506103b26103ad366004614dfd565b610bfb565b6040516102c59b9a9998979695949392919061558c565b3480156103d557600080fd5b506103e96103e4366004614c59565b610d60565b6040516102c591906159ba565b34801561040257600080fd5b506103e9610d75565b34801561041757600080fd5b50610325610d7e565b34801561042c57600080fd5b5061028761043b36600461519b565b610d8d565b34801561044c57600080fd5b5061028761045b3660046150dd565b6110c6565b34801561046c57600080fd5b5061028761047b36600461519b565b611119565b34801561048c57600080fd5b5061028761049b36600461507d565b611126565b3480156104ac57600080fd5b506102876104bb36600461519b565b611181565b3480156104cc57600080fd5b5061032561118e565b3480156104e157600080fd5b5061030361119d565b3480156104f657600080fd5b506103036111a3565b61028761050d366004614eba565b6111a9565b34801561051e57600080fd5b5061028761052d366004614c59565b611366565b610287610540366004614f8a565b611390565b34801561055157600080fd5b506103e961056036600461519b565b611793565b34801561057157600080fd5b50610287610580366004614dfd565b6117a8565b34801561059157600080fd5b50610303611bb2565b3480156105a657600080fd5b506102876105b5366004615043565b611bb8565b3480156105c657600080fd5b50610303611c46565b3480156105db57600080fd5b50610303611c4c565b3480156105f057600080fd5b506102876105ff366004615245565b611c5c565b34801561061057600080fd5b50610303611d61565b34801561062557600080fd5b5061028761063436600461519b565b611d67565b34801561064557600080fd5b50610287610654366004615285565b61205d565b34801561066557600080fd5b506103256121b9565b34801561067a57600080fd5b506103036121c8565b34801561068f57600080fd5b5061030361069e366004614c59565b6121d4565b3480156106af57600080fd5b506102876106be366004614e69565b6121e6565b3480156106cf57600080fd5b506102876106de366004614cad565b6129b4565b3480156106ef57600080fd5b506102876106fe366004614c59565b612a43565b34801561070f57600080fd5b5061028761071e366004614c59565b612a6d565b34801561072f57600080fd5b5061028761073e366004614e28565b612a97565b34801561074f57600080fd5b5061076361075e366004614dfd565b612faa565b6040516102c599989796959493929190615705565b34801561078457600080fd5b50610303610793366004614c59565b61320f565b3480156107a457600080fd5b50610325613221565b3480156107b957600080fd5b50610303613230565b3480156107ce57600080fd5b506102876107dd36600461519b565b613236565b3480156107ee57600080fd5b50610325613243565b34801561080357600080fd5b50610287610812366004614c75565b613252565b34801561082357600080fd5b50610837610832366004614dfd565b6132a6565b6040516102c59d9c9b9a99989796959493929190615906565b34801561085c57600080fd5b5061032561332c565b34801561087157600080fd5b5061032561333b565b34801561088657600080fd5b5061028761089536600461519b565b61334a565b6102876108a8366004614d2c565b613357565b3480156108b957600080fd5b506108cd6108c836600461519b565b61339e565b6040516102c59190615a02565b3480156108e657600080fd5b506102876108f536600461514b565b613439565b60008181526015602052604090208261092f5760405162461bcd60e51b81526004016109269190615a15565b60405180910390fd5b505050565b600080600080600080600080600080600061094d6147dd565b600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020604051806101c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a1757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f9575b5050509183525050600282015460208083019190915260038301546001600160a01b0316604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b830154610140830152600c830154610160830152600d909201546101809091015281015151909150610acb576000610ae5565b8060200151600081518110610adc57fe5b60200260200101515b600182602001515111610af9576000610b13565b8160200151600181518110610b0a57fe5b60200260200101515b8260400151836060015184608001518560a001518660c001518760e001518861014001518961016001518a61018001519b509b509b509b509b509b509b509b509b509b509b50509295989b509295989b9093969950565b610b7261349a565b601355565b61271081565b6007546001600160a01b031681565b60166020526000908152604090205481565b610ba661349a565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b610bd961349a565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6002602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a90046001600160a01b0316908060010160009054906101000a90046001600160a01b0316908060020154908060030160009054906101000a90046001600160a01b0316908060040160009054906101000a90046001600160a01b0316908060050154908060060160009054906101000a900460ff16908060070154908060080160009054906101000a900460ff169080600901549080600a018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d565780601f10610d2b57610100808354040283529160200191610d56565b820191906000526020600020905b815481529060010190602001808311610d3957829003601f168201915b505050505090508b565b60066020526000908152604090205460ff1681565b60145460ff1681565b6008546001600160a01b031681565b60026000541415610db05760405162461bcd60e51b815260040161092690615cc2565b6002600055610dbd614864565b33600090815260026020818152604080842086855282529283902083516101608101855281546001600160a01b039081168252600180840154821683860152838601548388015260038401548216606084015260048401549091166080830152600583015460a0830152600683015460ff908116151560c0840152600784015460e08401526008840154161515610100808401919091526009840154610120840152600a840180548851938116159092026000190190911695909504601f81018590048502820185019096528581529094919361014086019391929091830182828015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b5050509190925250508151919250610f11916001600160a01b031615159050600b6108fa565b336000908152600260208181526040808420868552909152822080546001600160a01b0319908116825560018201805482169055918101839055600381018054831690556004810180549092169091556005810182905560068101805460ff199081169091556007820183905560088201805490911690556009810182905590610f9e600a8301826148e6565b505060085460208201516001600160a01b0390811691161415610fe557610fe0610fda82604001518361012001516134b590919063ffffffff16565b336134e3565b61101a565b61100b33826040015183602001516001600160a01b03166135599092919063ffffffff16565b61101a816101200151336134e3565b600e54815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c015197516301aaf6ab60e51b81526001600160a01b03909b169a63355ed5609a61108b9a90998f99919891979196919591949193919260040161575a565b600060405180830381600087803b1580156110a557600080fd5b505af11580156110b9573d6000803e3d6000fd5b5050600160005550505050565b6110ce61349a565b60005b8181101561092f578282828181106110e557fe5b90506020028101906110f79190615d34565b600083815260156020526040902061111092909161492d565b506001016110d1565b61112161349a565b601055565b61112e6135af565b61113d815183511460126108fa565b60005b825181101561092f5761117983828151811061115857fe5b602002602001015183838151811061116c57fe5b60200260200101516117a8565b600101611140565b61118961349a565b601255565b600d546001600160a01b031681565b60115481565b600f5481565b600260005414156111cc5760405162461bcd60e51b815260040161092690615cc2565b60026000556111d96135ce565b6111e3838261363f565b5081156112245760088054611209916001600160a01b038e8116921691909114906108fa565b61121f611216848c6134b5565b341460096108fa565b6112ab565b611231833414600a6108fa565b600a60009054906101000a90046001600160a01b03166001600160a01b0316631b8278788c33308e6040518563ffffffff1660e01b815260040161127894939291906154cc565b600060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050505b600b54604051630a48d5a960e01b81526000916001600160a01b031690630a48d5a9906112de908f908f90600401615669565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e91906151b3565b9050611340601354821015600d6108fa565b50611354338c8c8a8d8d8c8c8c8c8b613722565b50506001600055505050505050505050565b61136e61349a565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156113b35760405162461bcd60e51b815260040161092690615cc2565b60026000556113c06135ce565b6113db8851600114806113d4575088516002145b60036108fa565b8015611405576113f160105434101560076108fa565b6114006107d0821060116108fa565b611414565b611414600f54341160076108fa565b8115611456576008548851611456916001600160a01b0316908a90600019810190811061143d57fe5b60200260200101516001600160a01b03161460046108fa565b6000811561155c576000611480338b60008151811061147157fe5b60200260200101518e8b613967565b6000818152600160205260409020549091506114a19060ff161560136108fa565b600b548a516001600160a01b0390911690634a3f088d9033908d906000906114c557fe5b60200260200101518f8c6040518563ffffffff1660e01b81526004016114ee94939291906153e0565b6101006040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906152d9565b5095975061155a955050508515159250601491506108fa9050565b505b6115646147dd565b604051806101c00160405280336001600160a01b031681526020018b815260200160008511611593578a611596565b60005b81526020018d6001600160a01b03168152602001600085116115b8578c6115ba565b835b81526020018915158152602001600085116115d55788611701565b8961167057600b60009054906101000a90046001600160a01b03166001600160a01b031663e124e6d28f6040518263ffffffff1660e01b815260040161161b91906153cc565b60206040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b91906151b3565b611701565b600b60009054906101000a90046001600160a01b03166001600160a01b03166381a612d68f6040518263ffffffff1660e01b81526004016116b191906153cc565b60206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170191906151b3565b8152602001600085116117145787611717565b60005b151581526020016000851161172c578661172f565b60005b8152602001851515815260200134815260200160008511611751576000611754565b60035b60ff16815260200184815260200160008511611771576000611773565b425b90529050611780816139a0565b5050600160005550505050505050505050565b60016020526000908152604090205460ff1681565b600260005414156117cb5760405162461bcd60e51b815260040161092690615cc2565b60026000556117d86135af565b6117e06147dd565b6001600160a01b03808416600090815260046020908152604080832086845282529182902082516101c0810184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561186c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161184e575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d9093015461018090920191909152825192935061192292161515906108fa565b600b548151602083015180516000936001600160a01b031692634a3f088d929091859061194b57fe5b602002602001015185606001518660a001516040518563ffffffff1660e01b815260040161197c94939291906153e0565b6101006040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd91906152d9565b5050505050505090508060001415611ba75781516001600160a01b03166000908152600460209081526040808320868452909152812080546001600160a01b031916815590611a1f60018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608301511415611ae6576000611ace83600001518460200151600081518110611ab757fe5b602002602001015185606001518660a00151613967565b6000908152600160205260409020805460ff19169055505b611af982610140015183600001516134e3565b600e548251602084015180516001600160a01b03909316926372dcb01c92918791600090611b2357fe5b60200260200101518660400151876060015188608001518960a001518a60c001518b60e001518c61014001516040518b63ffffffff1660e01b8152600401611b749a99989796959493929190615456565b600060405180830381600087803b158015611b8e57600080fd5b505af1158015611ba2573d6000803e3d6000fd5b505050505b505060016000555050565b60125481565b60026000541415611bdb5760405162461bcd60e51b815260040161092690615cc2565b6002600055611be86135af565b6001600160a01b038085166000908152600460209081526040808320878452909152902080549091611c1e9116151560016108fa565b80600b015460031415611c3a5760068101839055600d81018290555b50506001600055505050565b60135481565b68327cb2734119d3b7a9601e1b81565b60026000541415611c7f5760405162461bcd60e51b815260040161092690615cc2565b6002600081815533815260209182526040808220878352909252208054611cb2906001600160a01b03161515600b6108fa565b6007810183905560088101805460ff191683151517905560058101849055600e546003820154600480840154600685015460405163e25a729160e01b81526001600160a01b039586169563e25a729195611d239533958e959284169493169260ff909216918d918d918d910161540a565b600060405180830381600087803b158015611d3d57600080fd5b505af1158015611d51573d6000803e3d6000fd5b5050600160005550505050505050565b6107d081565b60026000541415611d8a5760405162461bcd60e51b815260040161092690615cc2565b6002600055611d976147dd565b33600090815260046020908152604080832085845282529182902082516101c08101845281546001600160a01b0316815260018201805485518186028101860190965280865291949293858101939290830182828015611e2057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e02575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d90930154610180909201919091528251929350611ed692161515906108fa565b336000908152600460209081526040808320858452909152812080546001600160a01b031916815590611f0c60018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608201511415611fd3576000611fbb82600001518360200151600081518110611fa457fe5b602002602001015184606001518560a00151613967565b6000908152600160205260409020805460ff19169055505b611fe2816101400151336134e3565b600e548151602083015180516001600160a01b03909316926372dcb01c9291869160009061200c57fe5b60200260200101518560400151866060015187608001518860a001518960c001518a60e001518b61014001516040518b63ffffffff1660e01b815260040161108b9a99989796959493929190615456565b600260005414156120805760405162461bcd60e51b815260040161092690615cc2565b60026000908155338152600460209081526040808320898452909152902080546120b6906001600160a01b03161515600b6108fa565b600c810154156120e7576120db6000831180156120d457506107d083105b60116108fa565b600c810182905561210d565b6006810184905560078101805460ff191684151517905560048101859055600281018690555b600e546001820180546001600160a01b039092169163e421001d9133918b919060009061213657fe5b600091825260209091200154600386015460058701546040516001600160e01b031960e088901b16815261218b9594936001600160a01b03908116938f939116918e9160ff16908e908e908e90600401615456565b600060405180830381600087803b1580156121a557600080fd5b505af1158015611354573d6000803e3d6000fd5b600c546001600160a01b031681565b670de0b6b3a764000081565b60036020526000908152604090205481565b600260005414156122095760405162461bcd60e51b815260040161092690615cc2565b6002600055612216613c17565b61221e6147dd565b6001600160a01b03808716600090815260046020908152604080832089845282529182902082516101c081018452815490941684526001810180548451818502810185019095528085529193858401939092908301828280156122aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161228c575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d9093015461018090920191909152825192935061236092161515906108fa565b600e5460e082015160c0830151606084015160a08501516101808601516040516287cfe560e01b81526000966001600160a01b0316956287cfe5956123b5959194909391929015916001918d906004016159c5565b604080518083038186803b1580156123cc57600080fd5b505afa1580156123e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240491906151cb565b5060808301516040808501516001600160a01b038b166000908152600460209081528382208c8352905291822080546001600160a01b031916815593945091929061245260018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608501511415612519576000612501856000015186602001516000815181106124ea57fe5b602002602001015187606001518860a00151613967565b6000908152600160205260409020805460ff19169055505b610160840151156125de57600b548451602086015180516001600160a01b0390931692634a3f088d92919060009061254d57fe5b602002602001015187606001518860a001516040518563ffffffff1660e01b815260040161257e94939291906153e0565b6101006040518083038186803b15801561259757600080fd5b505afa1580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf91906152d9565b50959750600096505050505050505b600a548451602086015180516000936001600160a01b031692632662166b929091859061260757fe5b6020026020010151886060015186888b60a00151306040518863ffffffff1660e01b815260040161263e979695949392919061554d565b602060405180830381600087803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269091906151b3565b905084610160015160031480156126a75750600081115b156126d2576126cf85602001516000815181106126c057fe5b60200260200101518285613c30565b90505b6000600186602001515111156127fe57600e54602087015180516000926001600160a01b0316916324dd285c91849061270757fe5b6020026020010151896020015160018151811061272057fe5b60200260200101516040518363ffffffff1660e01b81526004016127459291906154b2565b60206040518083038186803b15801561275d57600080fd5b505afa158015612771573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279591906151b3565b90508083116127fc57600b54602088015180516127e1926001600160a01b03169186916000906127c157fe5b60200260200101516001600160a01b03166135599092919063ffffffff16565b6127f5876020015188610100015130613d3f565b9250600191505b505b8561012001511561281c57612817828760000151613d95565b61286b565b600186602001515111801561282e5750805b15612851578551602087015180516128179291859160001981019081106127c157fe5b61286b86600001518388602001516000815181106127c157fe5b61287a8661014001518a6134e3565b5050600e548451602086015180516001600160a01b03909316926371b3f9d292918c916000906128a657fe5b6020026020010151858960600151888b60a001518c60c001518d60e001518e61014001518e6040518c63ffffffff1660e01b81526004016128f19b9a9998979695949392919061589f565b600060405180830381600087803b15801561290b57600080fd5b505af115801561291f573d6000803e3d6000fd5b5050505083610160015160031415611d5157600e548451610180860151604051631742351960e01b81526001600160a01b03909316926317423519926129729290918d91908c908c908b90600401615987565b600060405180830381600087803b15801561298c57600080fd5b505af11580156129a0573d6000803e3d6000fd5b505050505050600160005550505050505050565b6129bc61349a565b6014546129ce9060ff161560016108fa565b6014805460ff19166001179055600a80546001600160a01b03998a166001600160a01b031991821617909155600b8054988a1698821698909817909755600880549689169688169690961790955560098054949097169390951692909217909455600f93909355601192909255601055601355565b612a4b61349a565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a7561349a565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415612aba5760405162461bcd60e51b815260040161092690615cc2565b6002600055612ac7613c17565b612acf614864565b6001600160a01b038481166000908152600260208181526040808420888552825292839020835161016081018552815486168152600180830154871682850152828501548287015260038301548716606083015260048301549096166080820152600582015460a0820152600682015460ff908116151560c0830152600783015460e08301526008830154161515610100808301919091526009830154610120830152600a830180548751988116159092026000190190911694909404601f81018490048402870184019095528486529490936101408601939192830182828015612bfb5780601f10612bd057610100808354040283529160200191612bfb565b820191906000526020600020905b815481529060010190602001808311612bde57829003601f168201915b5050509190925250508151919250612c21916001600160a01b031615159050600b6108fa565b600e5461010082015160e0830151608084015160c08501516040516287cfe560e01b81526000956001600160a01b0316946287cfe594612c6e9491939092600190899081906004016159c5565b604080518083038186803b158015612c8557600080fd5b505afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906151cb565b506001600160a01b0386166000908152600260208181526040808420898552909152822080546001600160a01b0319908116825560018201805482169055918101839055600381018054831690556004810180549092169091556005810182905560068101805460ff1990811690915560078201839055600882018054909116905560098101829055919250612d56600a8301826148e6565b5050600b5460408301516020840151612d7d926001600160a01b0391821692911690613559565b81606001516001600160a01b031682602001516001600160a01b031614612e55576040805160028082526060808301845292602083019080368337019050509050826020015181600081518110612dd057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050826060015181600181518110612e0257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000612e3082600030613d3f565b600b546060860151919250612e52916001600160a01b03908116911683613559565b50505b600a5482516060840151608085015160a086015160c0870151604051630f8ee8bb60e11b81526001600160a01b0390961695631f1dd17695612ea1959094909390929091600401615519565b600060405180830381600087803b158015612ebb57600080fd5b505af1158015612ecf573d6000803e3d6000fd5b505050506000612ede83613e2d565b9050612eea81856134e3565b600e60009054906101000a90046001600160a01b03166001600160a01b03166361dcea4484600001518786602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001518e61012001518e6040518d63ffffffff1660e01b8152600401612f6b9c9b9a99989796959493929190615831565b600060405180830381600087803b158015612f8557600080fd5b505af1158015612f99573d6000803e3d6000fd5b505060016000555050505050505050565b6000806000806000806000806000612fc0614864565b600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600582015481526020016006820160009054906101000a900460ff16151515158152602001600782015481526020016008820160009054906101000a900460ff1615151515815260200160098201548152602001600a82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b55780601f1061318a576101008083540402835291602001916131b5565b820191906000526020600020905b81548152906001019060200180831161319857829003601f168201915b505050505081525050905080602001518160400151826060015183608001518460a001518560c001518660e00151876101000151886101200151995099509950995099509950995099509950509295985092959850929598565b60056020526000908152604090205481565b600e546001600160a01b031681565b60105481565b61323e61349a565b601155565b6009546001600160a01b031681565b61325a61349a565b6001600160a01b0382166000908152601660205260409020548061327e57506132a2565b6001600160a01b03831660008181526016602052604081205561092f908383613559565b5050565b600460208181526000938452604080852090915291835291208054600282015460038301549383015460058401546006850154600786015460088701546009880154600a890154600b8a0154600c8b0154600d909b01546001600160a01b039a8b169c999b99909a1699979860ff9788169896979586169694959390931693919290918d565b600a546001600160a01b031681565b600b546001600160a01b031681565b61335261349a565b600f55565b6002600054141561337a5760405162461bcd60e51b815260040161092690615cc2565b6002600055613387613fb5565b61338f6135ce565b6110b986868686868634613fce565b60156020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156134315780601f1061340657610100808354040283529160200191613431565b820191906000526020600020905b81548152906001019060200180831161341457829003601f168201915b505050505081565b60005b82518110156134695761346183828151811061345457fe5b6020026020010151610d8d565b60010161343c565b5060005b815181101561092f5761349282828151811061348557fe5b6020026020010151611d67565b60010161346d565b6007546134b3906001600160a01b0316331460006108fa565b565b6000828201838110156134da5760405162461bcd60e51b815260040161092690615a9f565b90505b92915050565b600854604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613513908590600401615d2b565b600060405180830381600087803b15801561352d57600080fd5b505af1158015613541573d6000803e3d6000fd5b506132a2925050506001600160a01b0382168361433d565b61092f8363a9059cbb60e01b8484604051602401613578929190615669565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143d9565b336000908152600660205260408120546134b39160ff909116906108fa565b34156134b357600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561362457600080fd5b505af1158015613638573d6000803e3d6000fd5b5050505050565b60008060008061364e85614468565b50509250925092506107d083106136775760405162461bcd60e51b815260040161092690615c9a565b821580613682575081155b61369e5760405162461bcd60e51b815260040161092690615ad4565b60006136d4600083116136b25760006136b5565b60015b600085116136c45760006136c7565b60015b601154910160ff16614496565b905083156136ed576010546136ea9082906134b5565b90505b600f546136fa90826134b5565b87116137185760405162461bcd60e51b815260040161092690615cf9565b9695505050505050565b6001600160a01b038b16600090815260036020526040902054613743614864565b6040518061016001604052808e6001600160a01b031681526020018d6001600160a01b031681526020018c81526020018b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001881515815260200187815260200186151581526020018581526020018481525090506137cd6001836134b590919063ffffffff16565b6001600160a01b03808f166000908152600360208181526040808420959095556002808252858420888552825292859020865181549086166001600160a01b0319918216178255878301516001830180549188169183169190911790559587015193810193909355606086015191830180549285169286169290921790915560808501516004830180549190941694169390931790915560a0830151600582015560c083015160068201805491151560ff1992831617905560e08401516007830155610100840151600883018054911515919092161790556101208301516009820155610140830151805184936138cb92600a8501929101906149c9565b50905050600e60009054906101000a90046001600160a01b03166001600160a01b03166336ed888c8e848f8f8f8f8f8f8f8f8f8f6040518d63ffffffff1660e01b81526004016139269c9b9a999897969594939291906157c2565b600060405180830381600087803b15801561394057600080fd5b505af1158015613954573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000848484846040516020016139809493929190615374565b604051602081830303815290604052805190602001209050949350505050565b80516001600160a01b03166000908152600560205260409020546139c58160016134b5565b82516001600160a01b03908116600090815260056020908152604080832094909455855183168252600481528382208583528152929020845181546001600160a01b03191692169190911781558184015180518593613a2b926001850192910190614a37565b50604082015160028201556060820151600380830180546001600160a01b0319166001600160a01b03909316929092179091556080830151600483015560a083015160058301805460ff1990811692151592909217905560c0840151600684015560e084015160078401805483169115159190911790556101008401516008840155610120840151600984018054909216901515179055610140830151600a83015561016080840151600b840155610180840151600c8401556101a090930151600d90920191909155908301511415613b37576000613b1983600001518460200151600081518110611ab757fe5b6000908152600160208190526040909120805460ff19169091179055505b600e548251602084015180516001600160a01b03909316926364813a5992918591600090613b6157fe5b6020026020010151866020015160018860200151510381518110613b8157fe5b60200260200101518760400151886060015189608001518a60a001518b60c001518c60e001518d61014001518e61016001518f61018001516040518e63ffffffff1660e01b8152600401613be19d9c9b9a99989796959493929190615682565b600060405180830381600087803b158015613bfb57600080fd5b505af1158015613c0f573d6000803e3d6000fd5b505050505050565b600c546134b3906001600160a01b0316331460006108fa565b600e5460125460009182916001600160a01b039091169063a42ab3d2908790613c689061271090613c62908990614496565b906144d0565b6040518363ffffffff1660e01b8152600401613c85929190615669565b60206040518083038186803b158015613c9d57600080fd5b505afa158015613cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd591906151b3565b905083811015613d33576000613ceb858361450f565b6001600160a01b038716600090815260166020526040902054909150613d1190836134b5565b6001600160a01b0387166000908152601660205260409020559150613d389050565b839150505b9392505050565b6000613d50845160021460036108fa565b835160021415613d3857613d8e84600081518110613d6a57fe5b602002602001015185600181518110613d7f57fe5b60200260200101518585614551565b9050613d38565b600854604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613dc5908590600401615d2b565b600060405180830381600087803b158015613ddf57600080fd5b505af1158015613df3573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f1935050505015801561092f573d6000803e3d6000fd5b6000808261012001519050600080600080613e4c876101400151614468565b5093509350935093506000841180613e645750600083115b80613e6f5750600082115b15613faa57606087606001516001600160a01b0316826001600160a01b031614613f18576040805160028082526060820183529091602083019080368337019050509050876060015181600081518110613ec557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110613ef357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050613f6b565b6040805160018082528183019092529060208083019080368337019050509050876060015181600081518110613f4a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b613fa38860000151828a608001518b60c001518c61014001518d60a00151613f9e600f548e61450f90919063ffffffff16565b613fce565b600f549550505b509295945050505050565b600d546134b3906001600160a01b0316331460006108fa565b600b548651829160009182916001600160a01b031690634a3f088d908c908c908590613ff657fe5b60200260200101518b8b6040518563ffffffff1660e01b815260040161401f94939291906153e0565b6101006040518083038186803b15801561403857600080fd5b505afa15801561404c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407091906152d9565b505050505092505091508482141561431e5761408a614a98565b614093876145f5565b9050600081604001511180156140cb57508780156140b45750818160400151115b806140cb5750871580156140cb5750818160400151105b1561419e576011546000906140e1906002614496565b85106140ef576011546140f1565b845b90506140fb6147dd565b604051806101c001604052808e6001600160a01b031681526020018d8152602001600081526020018c6001600160a01b031681526020018681526020018b151581526020018460400151815260200185856040015111151581526020016000815260200184608001511515815260200183815260200160028152602001600081526020016000815250905061418f816139a0565b614199868361450f565b955050505b80511515806141de5750600081602001511180156141de57508780156141c75750818160200151105b806141de5750871580156141de5750818160200151115b1561431c57600085851061420957600082602001511161420057601054614204565b6011545b61420b565b845b90506142156147dd565b604051806101c001604052808e6001600160a01b031681526020018d8152602001600081526020018c6001600160a01b031681526020018681526020018b15158152602001600085602001511161426c5785614272565b84602001515b8152602001600085602001511161428a576000614292565b858560200151115b151581526020016000815260200184608001511515815260200183815260200160008560200151116142c55760036142c8565b60015b60ff16815260200160008560200151116142e35784516142e6565b60005b815260200160008560200151116142fd5742614300565b60005b9052905061430d816139a0565b614317868361450f565b955050505b505b601154831061433157614331838b613d95565b50505050505050505050565b8047101561435d5760405162461bcd60e51b815260040161092690615b5b565b6000826001600160a01b031682604051614376906153c9565b60006040518083038185875af1925050503d80600081146143b3576040519150601f19603f3d011682016040523d82523d6000602084013e6143b8565b606091505b505090508061092f5760405162461bcd60e51b815260040161092690615b01565b606061442e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146639092919063ffffffff16565b80519091501561092f578080602001905181019061444c919061517f565b61092f5760405162461bcd60e51b815260040161092690615c50565b60008060008060008580602001905181019061448491906151ef565b939a9299509097509550909350915050565b6000826144a5575060006134dd565b828202828482816144b257fe5b04146134da5760405162461bcd60e51b815260040161092690615bd8565b60006134da83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061467a565b60006134da83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506146b1565b600b54604051634998b10960e11b815260009182916001600160a01b039091169063933162129061458a908990899088906004016154f6565b602060405180830381600087803b1580156145a457600080fd5b505af11580156145b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145dc91906151b3565b90506145ec8482101560106108fa565b95945050505050565b6145fd614a98565b60008060008060008680602001905181019061461991906151ef565b9450945094509450945061462b614a98565b506040805160a0810182529586526020860194909452928401919091526001600160a01b031660608301521515608082015292915050565b606061467284846000856146dd565b949350505050565b6000818361469b5760405162461bcd60e51b81526004016109269190615a02565b5060008385816146a757fe5b0495945050505050565b600081848411156146d55760405162461bcd60e51b81526004016109269190615a02565b505050900390565b6060824710156146ff5760405162461bcd60e51b815260040161092690615b92565b6147088561479e565b6147245760405162461bcd60e51b815260040161092690615c19565b60006060866001600160a01b0316858760405161474191906153ad565b60006040518083038185875af1925050503d806000811461477e576040519150601f19603f3d011682016040523d82523d6000602084013e614783565b606091505b50915091506147938282866147a4565b979650505050505050565b3b151590565b606083156147b3575081613d38565b8251156147c35782518084602001fd5b8160405162461bcd60e51b81526004016109269190615a02565b604051806101c0016040528060006001600160a01b03168152602001606081526020016000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160001515815260200160008152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061490c575061492a565b601f01602090049060005260206000209081019061492a9190614ad2565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061496e5782800160ff1982351617855561499b565b8280016001018555821561499b579182015b8281111561499b578235825591602001919060010190614980565b506149a7929150614ad2565b5090565b508054600082559060005260206000209081019061492a9190614ad2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614a0a57805160ff191683800117855561499b565b8280016001018555821561499b579182015b8281111561499b578251825591602001919060010190614a1c565b828054828255906000526020600020908101928215614a8c579160200282015b82811115614a8c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614a57565b506149a7929150614ae7565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b5b808211156149a75760008155600101614ad3565b5b808211156149a75780546001600160a01b0319168155600101614ae8565b80356134dd81615e00565b600082601f830112614b21578081fd5b8135614b34614b2f82615da5565b615d7f565b818152915060208083019084810181840286018201871015614b5557600080fd5b60005b84811015614b7d578135614b6b81615e00565b84529282019290820190600101614b58565b505050505092915050565b600082601f830112614b98578081fd5b8135614ba6614b2f82615da5565b818152915060208083019084810181840286018201871015614bc757600080fd5b60005b84811015614b7d57813584529282019290820190600101614bca565b80356134dd81615e15565b600082601f830112614c01578081fd5b81356001600160401b03811115614c16578182fd5b614c29601f8201601f1916602001615d7f565b9150808252836020828501011115614c4057600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215614c6a578081fd5b81356134da81615e00565b60008060408385031215614c87578081fd5b8235614c9281615e00565b91506020830135614ca281615e00565b809150509250929050565b600080600080600080600080610100898b031215614cc9578384fd5b8835614cd481615e00565b97506020890135614ce481615e00565b96506040890135614cf481615e00565b95506060890135614d0481615e00565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060008060c08789031215614d44578182fd5b8635614d4f81615e00565b955060208701356001600160401b0380821115614d6a578384fd5b614d768a838b01614b11565b965060408901359150614d8882615e00565b909450606088013590614d9a82615e15565b90935060808801359080821115614daf578384fd5b50614dbc89828a01614bf1565b92505060a087013590509295509295509295565b60008060408385031215614de2578182fd5b8235614ded81615e00565b91506020830135614ca281615e15565b60008060408385031215614e0f578182fd5b8235614e1a81615e00565b946020939093013593505050565b600080600060608486031215614e3c578283fd5b8335614e4781615e00565b9250602084013591506040840135614e5e81615e00565b809150509250925092565b600080600080600060a08688031215614e80578283fd5b8535614e8b81615e00565b9450602086013593506040860135614ea281615e00565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060006101608c8e031215614edb578485fd5b8b35614ee681615e00565b9a5060208c0135995060408c0135614efd81615e00565b985060608c01359750614f138d60808e01614b06565b9650614f228d60a08e01614be6565b955060c08c01359450614f388d60e08e01614be6565b93506101008c01359250614f508d6101208e01614be6565b91506101408c01356001600160401b03811115614f6b578182fd5b614f778e828f01614bf1565b9150509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d031215614fa9578384fd5b8a35614fb481615e00565b995060208b0135985060408b01356001600160401b03811115614fd5578485fd5b614fe18d828e01614b11565b98505060608b0135965060808b0135614ff981615e15565b955060a08b0135945060c08b013561501081615e15565b935060e08b013592506101008b013561502881615e15565b809250506101208b013590509295989b9194979a5092959850565b60008060008060808587031215615058578182fd5b843561506381615e00565b966020860135965060408601359560600135945092505050565b6000806040838503121561508f578182fd5b82356001600160401b03808211156150a5578384fd5b6150b186838701614b11565b935060208501359150808211156150c6578283fd5b506150d385828601614b88565b9150509250929050565b600080602083850312156150ef578182fd5b82356001600160401b0380821115615105578384fd5b818501915085601f830112615118578384fd5b813581811115615126578485fd5b8660208083028501011115615139578485fd5b60209290920196919550909350505050565b6000806040838503121561515d578182fd5b82356001600160401b0380821115615173578384fd5b6150b186838701614b88565b600060208284031215615190578081fd5b81516134da81615e15565b6000602082840312156151ac578081fd5b5035919050565b6000602082840312156151c4578081fd5b5051919050565b600080604083850312156151dd578182fd5b825191506020830151614ca281615e15565b600080600080600060a08688031215615206578283fd5b855194506020860151935060408601519250606086015161522681615e00565b608087015190925061523781615e15565b809150509295509295909350565b6000806000806080858703121561525a578182fd5b843593506020850135925060408501359150606085013561527a81615e15565b939692955090935050565b60008060008060008060c0878903121561529d578384fd5b8635955060208701359450604087013593506060870135925060808701356152c481615e15565b8092505060a087013590509295509295509295565b600080600080600080600080610100898b0312156152f5578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c089015161532a81615e15565b8092505060e089015190509295985092959890939650565b15159052565b60008151808452615360816020860160208601615dd0565b601f01601f19169290920160200192915050565b6001600160601b0319606095861b8116825293851b841660148201529190931b909116602882015290151560f81b603c820152603d0190565b600082516153bf818460208701615dd0565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b039889168152602081019790975294871660408701529290951660608501521515608084015260a083019390935260c082019290925290151560e08201526101000190565b6001600160a01b039a8b16815260208101999099529689166040890152606088019590955292909616608086015260a085015293151560c084015260e08301939093529115156101008201526101208101919091526101400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b0397881681529587166020870152938616604086015260608501929092526080840152151560a083015290911660c082015260e00190565b600061016060018060a01b03808f168452808e1660208501528c6040850152808c166060850152808b166080850152508860a084015287151560c08401528660e084015285151561010084015284610120840152806101408401526155f381840185615348565b9e9d5050505050505050505050505050565b6001600160a01b039b8c168152998b1660208b015260408a0198909852959098166060880152608087019390935290151560a086015260c0850152151560e08401526101008301939093526101208201929092526101408101919091526101600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038e81168252602082018e90528c811660408301528b81166060830152608082018b9052891660a082015260c0810188905286151560e082015261010081018690526101a081016156de610120830187615342565b8461014083015283610160830152826101808301529e9d5050505050505050505050505050565b6001600160a01b03998a168152602081019890985295881660408801529390961660608601526080850191909152151560a084015260c083019390935291151560e08201526101008101919091526101200190565b6001600160a01b039b8c168152602081019a909a52978a1660408a0152606089019690965293881660808801529190961660a086015260c085019590955293151560e08401526101008301939093529115156101208201526101408101919091526101600190565b600060018060a01b03808f1683528d6020840152808d1660408401528b6060840152808b166080840152808a1660a0840152508760c083015286151560e083015285610100830152841515610120830152836101408301526101806101608301526155f3610180830184615348565b6001600160a01b039c8d168152602081019b909b52988b1660408b015260608a019790975294891660808901529290971660a087015260c086015294151560e08501526101008401949094529215156101208301526101408201929092526101608101919091526101800190565b6001600160a01b039b8c168152602081019a909a52978a1660408a0152606089019690965293909716608087015260a0860191909152151560c085015260e08401949094529215156101008301526101208201929092526101408101919091526101600190565b6001600160a01b038e81168252602082018e90528c166040820152606081018b9052891515608082015260a0810189905287151560c082015260e081018790526101a08101615959610100830188615342565b856101208301528461014083015283610160830152826101808301529e9d5050505050505050505050505050565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b901515815260200190565b961515875260208701959095526001600160a01b0393909316604086015290151560608501521515608084015260a083015260c082015260e00190565b6000602082526134da6020830184615348565b60006020808301818452828554600180821660008114615a3c5760018114615a5a57615a92565b60028304607f16855260ff1983166040890152606088019350615a92565b60028304808652615a6a8a615dc4565b885b82811015615a885781548b820160400152908401908801615a6c565b8a01604001955050505b5091979650505050505050565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526013908201527214148e9bdb9b1e481bdb99481d1e5c19481cdb606a1b604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600e908201526d050523a696e76616c6964207473760941b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527750523a20696e76616c696420657865637574696f6e46656560401b604082015260600190565b90815260200190565b6000808335601e19843603018112615d4a578283fd5b8301803591506001600160401b03821115615d63578283fd5b602001915036819003821315615d7857600080fd5b9250929050565b6040518181016001600160401b0381118282101715615d9d57600080fd5b604052919050565b60006001600160401b03821115615dba578081fd5b5060209081020190565b60009081526020902090565b60005b83811015615deb578181015183820152602001615dd3565b83811115615dfa576000848401525b50505050565b6001600160a01b038116811461492a57600080fd5b801515811461492a57600080fdfea164736f6c634300060c000a",
  "deployedBytecode": "0x6080604052600436106102695760003560e01c8063026032ee1461028e5780630d5cc938146102ce578063126082cf146102ee57806312d43a51146103105780631ce9cb8f146103325780631e261538146103525780632152336a146103725780632b7d6290146103925780633833f5f5146103c9578063392e53cd146103f65780633fc8cef31461040b57806347e0bbd0146104205780634b8d6f3b146104405780635bb63c1e146104605780635bfb9358146104805780635e44babd146104a057806361ef161f146104c05780636344ee85146104d557806363ae2103146104ea57806373e42bc8146104ff578063756677a1146105125780637ce5ff8c14610532578063852a752c146105455780638566ba5c1461056557806387b5c4c91461058557806388f6c3b31461059a5780638de10c2e146105ba57806395082d25146105cf5780639983ee1b146105e45780639b96eae5146106045780639e71b0f014610619578063a6e9790914610639578063a849d64414610659578063ae46415b1461066e578063aec2245514610683578063bbede3fb146106a3578063c843e81c146106c3578063cfaa55eb146106e3578063cfad57a214610703578063d38ab51914610723578063d3bab1d114610743578063d566d0ca14610778578063d95423e614610798578063dc59b7b6146107ad578063e9fe8a5f146107c2578063ee138d0f146107e2578063f2555278146107f7578063f2d2e01b14610817578063f887ea4014610850578063fbfa77cf14610865578063fc2cee621461087a578063fdace2d71461089a578063fed1a606146108ad578063ff637e81146108da57610289565b3661028957600854610287906001600160a01b0316331460026108fa565b005b600080fd5b34801561029a57600080fd5b506102ae6102a9366004614dfd565b610934565b6040516102c59b9a99989796959493929190615605565b60405180910390f35b3480156102da57600080fd5b506102876102e936600461519b565b610b6a565b3480156102fa57600080fd5b50610303610b77565b6040516102c59190615d2b565b34801561031c57600080fd5b50610325610b7d565b6040516102c591906153cc565b34801561033e57600080fd5b5061030361034d366004614c59565b610b8c565b34801561035e57600080fd5b5061028761036d366004614dd0565b610b9e565b34801561037e57600080fd5b5061028761038d366004614c59565b610bd1565b34801561039e57600080fd5b506103b26103ad366004614dfd565b610bfb565b6040516102c59b9a9998979695949392919061558c565b3480156103d557600080fd5b506103e96103e4366004614c59565b610d60565b6040516102c591906159ba565b34801561040257600080fd5b506103e9610d75565b34801561041757600080fd5b50610325610d7e565b34801561042c57600080fd5b5061028761043b36600461519b565b610d8d565b34801561044c57600080fd5b5061028761045b3660046150dd565b6110c6565b34801561046c57600080fd5b5061028761047b36600461519b565b611119565b34801561048c57600080fd5b5061028761049b36600461507d565b611126565b3480156104ac57600080fd5b506102876104bb36600461519b565b611181565b3480156104cc57600080fd5b5061032561118e565b3480156104e157600080fd5b5061030361119d565b3480156104f657600080fd5b506103036111a3565b61028761050d366004614eba565b6111a9565b34801561051e57600080fd5b5061028761052d366004614c59565b611366565b610287610540366004614f8a565b611390565b34801561055157600080fd5b506103e961056036600461519b565b611793565b34801561057157600080fd5b50610287610580366004614dfd565b6117a8565b34801561059157600080fd5b50610303611bb2565b3480156105a657600080fd5b506102876105b5366004615043565b611bb8565b3480156105c657600080fd5b50610303611c46565b3480156105db57600080fd5b50610303611c4c565b3480156105f057600080fd5b506102876105ff366004615245565b611c5c565b34801561061057600080fd5b50610303611d61565b34801561062557600080fd5b5061028761063436600461519b565b611d67565b34801561064557600080fd5b50610287610654366004615285565b61205d565b34801561066557600080fd5b506103256121b9565b34801561067a57600080fd5b506103036121c8565b34801561068f57600080fd5b5061030361069e366004614c59565b6121d4565b3480156106af57600080fd5b506102876106be366004614e69565b6121e6565b3480156106cf57600080fd5b506102876106de366004614cad565b6129b4565b3480156106ef57600080fd5b506102876106fe366004614c59565b612a43565b34801561070f57600080fd5b5061028761071e366004614c59565b612a6d565b34801561072f57600080fd5b5061028761073e366004614e28565b612a97565b34801561074f57600080fd5b5061076361075e366004614dfd565b612faa565b6040516102c599989796959493929190615705565b34801561078457600080fd5b50610303610793366004614c59565b61320f565b3480156107a457600080fd5b50610325613221565b3480156107b957600080fd5b50610303613230565b3480156107ce57600080fd5b506102876107dd36600461519b565b613236565b3480156107ee57600080fd5b50610325613243565b34801561080357600080fd5b50610287610812366004614c75565b613252565b34801561082357600080fd5b50610837610832366004614dfd565b6132a6565b6040516102c59d9c9b9a99989796959493929190615906565b34801561085c57600080fd5b5061032561332c565b34801561087157600080fd5b5061032561333b565b34801561088657600080fd5b5061028761089536600461519b565b61334a565b6102876108a8366004614d2c565b613357565b3480156108b957600080fd5b506108cd6108c836600461519b565b61339e565b6040516102c59190615a02565b3480156108e657600080fd5b506102876108f536600461514b565b613439565b60008181526015602052604090208261092f5760405162461bcd60e51b81526004016109269190615a15565b60405180910390fd5b505050565b600080600080600080600080600080600061094d6147dd565b600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020604051806101c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a1757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f9575b5050509183525050600282015460208083019190915260038301546001600160a01b0316604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b830154610140830152600c830154610160830152600d909201546101809091015281015151909150610acb576000610ae5565b8060200151600081518110610adc57fe5b60200260200101515b600182602001515111610af9576000610b13565b8160200151600181518110610b0a57fe5b60200260200101515b8260400151836060015184608001518560a001518660c001518760e001518861014001518961016001518a61018001519b509b509b509b509b509b509b509b509b509b509b50509295989b509295989b9093969950565b610b7261349a565b601355565b61271081565b6007546001600160a01b031681565b60166020526000908152604090205481565b610ba661349a565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b610bd961349a565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6002602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a90046001600160a01b0316908060010160009054906101000a90046001600160a01b0316908060020154908060030160009054906101000a90046001600160a01b0316908060040160009054906101000a90046001600160a01b0316908060050154908060060160009054906101000a900460ff16908060070154908060080160009054906101000a900460ff169080600901549080600a018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d565780601f10610d2b57610100808354040283529160200191610d56565b820191906000526020600020905b815481529060010190602001808311610d3957829003601f168201915b505050505090508b565b60066020526000908152604090205460ff1681565b60145460ff1681565b6008546001600160a01b031681565b60026000541415610db05760405162461bcd60e51b815260040161092690615cc2565b6002600055610dbd614864565b33600090815260026020818152604080842086855282529283902083516101608101855281546001600160a01b039081168252600180840154821683860152838601548388015260038401548216606084015260048401549091166080830152600583015460a0830152600683015460ff908116151560c0840152600784015460e08401526008840154161515610100808401919091526009840154610120840152600a840180548851938116159092026000190190911695909504601f81018590048502820185019096528581529094919361014086019391929091830182828015610eeb5780601f10610ec057610100808354040283529160200191610eeb565b820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b5050509190925250508151919250610f11916001600160a01b031615159050600b6108fa565b336000908152600260208181526040808420868552909152822080546001600160a01b0319908116825560018201805482169055918101839055600381018054831690556004810180549092169091556005810182905560068101805460ff199081169091556007820183905560088201805490911690556009810182905590610f9e600a8301826148e6565b505060085460208201516001600160a01b0390811691161415610fe557610fe0610fda82604001518361012001516134b590919063ffffffff16565b336134e3565b61101a565b61100b33826040015183602001516001600160a01b03166135599092919063ffffffff16565b61101a816101200151336134e3565b600e54815160208301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c015197516301aaf6ab60e51b81526001600160a01b03909b169a63355ed5609a61108b9a90998f99919891979196919591949193919260040161575a565b600060405180830381600087803b1580156110a557600080fd5b505af11580156110b9573d6000803e3d6000fd5b5050600160005550505050565b6110ce61349a565b60005b8181101561092f578282828181106110e557fe5b90506020028101906110f79190615d34565b600083815260156020526040902061111092909161492d565b506001016110d1565b61112161349a565b601055565b61112e6135af565b61113d815183511460126108fa565b60005b825181101561092f5761117983828151811061115857fe5b602002602001015183838151811061116c57fe5b60200260200101516117a8565b600101611140565b61118961349a565b601255565b600d546001600160a01b031681565b60115481565b600f5481565b600260005414156111cc5760405162461bcd60e51b815260040161092690615cc2565b60026000556111d96135ce565b6111e3838261363f565b5081156112245760088054611209916001600160a01b038e8116921691909114906108fa565b61121f611216848c6134b5565b341460096108fa565b6112ab565b611231833414600a6108fa565b600a60009054906101000a90046001600160a01b03166001600160a01b0316631b8278788c33308e6040518563ffffffff1660e01b815260040161127894939291906154cc565b600060405180830381600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050505b600b54604051630a48d5a960e01b81526000916001600160a01b031690630a48d5a9906112de908f908f90600401615669565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e91906151b3565b9050611340601354821015600d6108fa565b50611354338c8c8a8d8d8c8c8c8c8b613722565b50506001600055505050505050505050565b61136e61349a565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b600260005414156113b35760405162461bcd60e51b815260040161092690615cc2565b60026000556113c06135ce565b6113db8851600114806113d4575088516002145b60036108fa565b8015611405576113f160105434101560076108fa565b6114006107d0821060116108fa565b611414565b611414600f54341160076108fa565b8115611456576008548851611456916001600160a01b0316908a90600019810190811061143d57fe5b60200260200101516001600160a01b03161460046108fa565b6000811561155c576000611480338b60008151811061147157fe5b60200260200101518e8b613967565b6000818152600160205260409020549091506114a19060ff161560136108fa565b600b548a516001600160a01b0390911690634a3f088d9033908d906000906114c557fe5b60200260200101518f8c6040518563ffffffff1660e01b81526004016114ee94939291906153e0565b6101006040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906152d9565b5095975061155a955050508515159250601491506108fa9050565b505b6115646147dd565b604051806101c00160405280336001600160a01b031681526020018b815260200160008511611593578a611596565b60005b81526020018d6001600160a01b03168152602001600085116115b8578c6115ba565b835b81526020018915158152602001600085116115d55788611701565b8961167057600b60009054906101000a90046001600160a01b03166001600160a01b031663e124e6d28f6040518263ffffffff1660e01b815260040161161b91906153cc565b60206040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166b91906151b3565b611701565b600b60009054906101000a90046001600160a01b03166001600160a01b03166381a612d68f6040518263ffffffff1660e01b81526004016116b191906153cc565b60206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170191906151b3565b8152602001600085116117145787611717565b60005b151581526020016000851161172c578661172f565b60005b8152602001851515815260200134815260200160008511611751576000611754565b60035b60ff16815260200184815260200160008511611771576000611773565b425b90529050611780816139a0565b5050600160005550505050505050505050565b60016020526000908152604090205460ff1681565b600260005414156117cb5760405162461bcd60e51b815260040161092690615cc2565b60026000556117d86135af565b6117e06147dd565b6001600160a01b03808416600090815260046020908152604080832086845282529182902082516101c0810184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561186c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161184e575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d9093015461018090920191909152825192935061192292161515906108fa565b600b548151602083015180516000936001600160a01b031692634a3f088d929091859061194b57fe5b602002602001015185606001518660a001516040518563ffffffff1660e01b815260040161197c94939291906153e0565b6101006040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd91906152d9565b5050505050505090508060001415611ba75781516001600160a01b03166000908152600460209081526040808320868452909152812080546001600160a01b031916815590611a1f60018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608301511415611ae6576000611ace83600001518460200151600081518110611ab757fe5b602002602001015185606001518660a00151613967565b6000908152600160205260409020805460ff19169055505b611af982610140015183600001516134e3565b600e548251602084015180516001600160a01b03909316926372dcb01c92918791600090611b2357fe5b60200260200101518660400151876060015188608001518960a001518a60c001518b60e001518c61014001516040518b63ffffffff1660e01b8152600401611b749a99989796959493929190615456565b600060405180830381600087803b158015611b8e57600080fd5b505af1158015611ba2573d6000803e3d6000fd5b505050505b505060016000555050565b60125481565b60026000541415611bdb5760405162461bcd60e51b815260040161092690615cc2565b6002600055611be86135af565b6001600160a01b038085166000908152600460209081526040808320878452909152902080549091611c1e9116151560016108fa565b80600b015460031415611c3a5760068101839055600d81018290555b50506001600055505050565b60135481565b68327cb2734119d3b7a9601e1b81565b60026000541415611c7f5760405162461bcd60e51b815260040161092690615cc2565b6002600081815533815260209182526040808220878352909252208054611cb2906001600160a01b03161515600b6108fa565b6007810183905560088101805460ff191683151517905560058101849055600e546003820154600480840154600685015460405163e25a729160e01b81526001600160a01b039586169563e25a729195611d239533958e959284169493169260ff909216918d918d918d910161540a565b600060405180830381600087803b158015611d3d57600080fd5b505af1158015611d51573d6000803e3d6000fd5b5050600160005550505050505050565b6107d081565b60026000541415611d8a5760405162461bcd60e51b815260040161092690615cc2565b6002600055611d976147dd565b33600090815260046020908152604080832085845282529182902082516101c08101845281546001600160a01b0316815260018201805485518186028101860190965280865291949293858101939290830182828015611e2057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e02575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d90930154610180909201919091528251929350611ed692161515906108fa565b336000908152600460209081526040808320858452909152812080546001600160a01b031916815590611f0c60018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608201511415611fd3576000611fbb82600001518360200151600081518110611fa457fe5b602002602001015184606001518560a00151613967565b6000908152600160205260409020805460ff19169055505b611fe2816101400151336134e3565b600e548151602083015180516001600160a01b03909316926372dcb01c9291869160009061200c57fe5b60200260200101518560400151866060015187608001518860a001518960c001518a60e001518b61014001516040518b63ffffffff1660e01b815260040161108b9a99989796959493929190615456565b600260005414156120805760405162461bcd60e51b815260040161092690615cc2565b60026000908155338152600460209081526040808320898452909152902080546120b6906001600160a01b03161515600b6108fa565b600c810154156120e7576120db6000831180156120d457506107d083105b60116108fa565b600c810182905561210d565b6006810184905560078101805460ff191684151517905560048101859055600281018690555b600e546001820180546001600160a01b039092169163e421001d9133918b919060009061213657fe5b600091825260209091200154600386015460058701546040516001600160e01b031960e088901b16815261218b9594936001600160a01b03908116938f939116918e9160ff16908e908e908e90600401615456565b600060405180830381600087803b1580156121a557600080fd5b505af1158015611354573d6000803e3d6000fd5b600c546001600160a01b031681565b670de0b6b3a764000081565b60036020526000908152604090205481565b600260005414156122095760405162461bcd60e51b815260040161092690615cc2565b6002600055612216613c17565b61221e6147dd565b6001600160a01b03808716600090815260046020908152604080832089845282529182902082516101c081018452815490941684526001810180548451818502810185019095528085529193858401939092908301828280156122aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161228c575b50505091835250506002820154602082015260038201546001600160a01b03908116604083015260048301546060830152600583015460ff90811615156080840152600684015460a084015260078401548116151560c0840152600884015460e08401526009840154161515610100830152600a830154610120830152600b80840154610140840152600c840154610160840152600d9093015461018090920191909152825192935061236092161515906108fa565b600e5460e082015160c0830151606084015160a08501516101808601516040516287cfe560e01b81526000966001600160a01b0316956287cfe5956123b5959194909391929015916001918d906004016159c5565b604080518083038186803b1580156123cc57600080fd5b505afa1580156123e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240491906151cb565b5060808301516040808501516001600160a01b038b166000908152600460209081528382208c8352905291822080546001600160a01b031916815593945091929061245260018301826149ab565b50600060028201819055600380830180546001600160a01b03191690556004830182905560058301805460ff199081169091556006840183905560078401805482169055600884018390556009840180549091169055600a8301829055600b8301829055600c8301829055600d909201556101608501511415612519576000612501856000015186602001516000815181106124ea57fe5b602002602001015187606001518860a00151613967565b6000908152600160205260409020805460ff19169055505b610160840151156125de57600b548451602086015180516001600160a01b0390931692634a3f088d92919060009061254d57fe5b602002602001015187606001518860a001516040518563ffffffff1660e01b815260040161257e94939291906153e0565b6101006040518083038186803b15801561259757600080fd5b505afa1580156125ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125cf91906152d9565b50959750600096505050505050505b600a548451602086015180516000936001600160a01b031692632662166b929091859061260757fe5b6020026020010151886060015186888b60a00151306040518863ffffffff1660e01b815260040161263e979695949392919061554d565b602060405180830381600087803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269091906151b3565b905084610160015160031480156126a75750600081115b156126d2576126cf85602001516000815181106126c057fe5b60200260200101518285613c30565b90505b6000600186602001515111156127fe57600e54602087015180516000926001600160a01b0316916324dd285c91849061270757fe5b6020026020010151896020015160018151811061272057fe5b60200260200101516040518363ffffffff1660e01b81526004016127459291906154b2565b60206040518083038186803b15801561275d57600080fd5b505afa158015612771573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279591906151b3565b90508083116127fc57600b54602088015180516127e1926001600160a01b03169186916000906127c157fe5b60200260200101516001600160a01b03166135599092919063ffffffff16565b6127f5876020015188610100015130613d3f565b9250600191505b505b8561012001511561281c57612817828760000151613d95565b61286b565b600186602001515111801561282e5750805b15612851578551602087015180516128179291859160001981019081106127c157fe5b61286b86600001518388602001516000815181106127c157fe5b61287a8661014001518a6134e3565b5050600e548451602086015180516001600160a01b03909316926371b3f9d292918c916000906128a657fe5b6020026020010151858960600151888b60a001518c60c001518d60e001518e61014001518e6040518c63ffffffff1660e01b81526004016128f19b9a9998979695949392919061589f565b600060405180830381600087803b15801561290b57600080fd5b505af115801561291f573d6000803e3d6000fd5b5050505083610160015160031415611d5157600e548451610180860151604051631742351960e01b81526001600160a01b03909316926317423519926129729290918d91908c908c908b90600401615987565b600060405180830381600087803b15801561298c57600080fd5b505af11580156129a0573d6000803e3d6000fd5b505050505050600160005550505050505050565b6129bc61349a565b6014546129ce9060ff161560016108fa565b6014805460ff19166001179055600a80546001600160a01b03998a166001600160a01b031991821617909155600b8054988a1698821698909817909755600880549689169688169690961790955560098054949097169390951692909217909455600f93909355601192909255601055601355565b612a4b61349a565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612a7561349a565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415612aba5760405162461bcd60e51b815260040161092690615cc2565b6002600055612ac7613c17565b612acf614864565b6001600160a01b038481166000908152600260208181526040808420888552825292839020835161016081018552815486168152600180830154871682850152828501548287015260038301548716606083015260048301549096166080820152600582015460a0820152600682015460ff908116151560c0830152600783015460e08301526008830154161515610100808301919091526009830154610120830152600a830180548751988116159092026000190190911694909404601f81018490048402870184019095528486529490936101408601939192830182828015612bfb5780601f10612bd057610100808354040283529160200191612bfb565b820191906000526020600020905b815481529060010190602001808311612bde57829003601f168201915b5050509190925250508151919250612c21916001600160a01b031615159050600b6108fa565b600e5461010082015160e0830151608084015160c08501516040516287cfe560e01b81526000956001600160a01b0316946287cfe594612c6e9491939092600190899081906004016159c5565b604080518083038186803b158015612c8557600080fd5b505afa158015612c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbd91906151cb565b506001600160a01b0386166000908152600260208181526040808420898552909152822080546001600160a01b0319908116825560018201805482169055918101839055600381018054831690556004810180549092169091556005810182905560068101805460ff1990811690915560078201839055600882018054909116905560098101829055919250612d56600a8301826148e6565b5050600b5460408301516020840151612d7d926001600160a01b0391821692911690613559565b81606001516001600160a01b031682602001516001600160a01b031614612e55576040805160028082526060808301845292602083019080368337019050509050826020015181600081518110612dd057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050826060015181600181518110612e0257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000612e3082600030613d3f565b600b546060860151919250612e52916001600160a01b03908116911683613559565b50505b600a5482516060840151608085015160a086015160c0870151604051630f8ee8bb60e11b81526001600160a01b0390961695631f1dd17695612ea1959094909390929091600401615519565b600060405180830381600087803b158015612ebb57600080fd5b505af1158015612ecf573d6000803e3d6000fd5b505050506000612ede83613e2d565b9050612eea81856134e3565b600e60009054906101000a90046001600160a01b03166001600160a01b03166361dcea4484600001518786602001518760400151886060015189608001518a60a001518b60c001518c60e001518d61010001518e61012001518e6040518d63ffffffff1660e01b8152600401612f6b9c9b9a99989796959493929190615831565b600060405180830381600087803b158015612f8557600080fd5b505af1158015612f99573d6000803e3d6000fd5b505060016000555050505050505050565b6000806000806000806000806000612fc0614864565b600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020604051806101600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600282015481526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600582015481526020016006820160009054906101000a900460ff16151515158152602001600782015481526020016008820160009054906101000a900460ff1615151515815260200160098201548152602001600a82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131b55780601f1061318a576101008083540402835291602001916131b5565b820191906000526020600020905b81548152906001019060200180831161319857829003601f168201915b505050505081525050905080602001518160400151826060015183608001518460a001518560c001518660e00151876101000151886101200151995099509950995099509950995099509950509295985092959850929598565b60056020526000908152604090205481565b600e546001600160a01b031681565b60105481565b61323e61349a565b601155565b6009546001600160a01b031681565b61325a61349a565b6001600160a01b0382166000908152601660205260409020548061327e57506132a2565b6001600160a01b03831660008181526016602052604081205561092f908383613559565b5050565b600460208181526000938452604080852090915291835291208054600282015460038301549383015460058401546006850154600786015460088701546009880154600a890154600b8a0154600c8b0154600d909b01546001600160a01b039a8b169c999b99909a1699979860ff9788169896979586169694959390931693919290918d565b600a546001600160a01b031681565b600b546001600160a01b031681565b61335261349a565b600f55565b6002600054141561337a5760405162461bcd60e51b815260040161092690615cc2565b6002600055613387613fb5565b61338f6135ce565b6110b986868686868634613fce565b60156020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156134315780601f1061340657610100808354040283529160200191613431565b820191906000526020600020905b81548152906001019060200180831161341457829003601f168201915b505050505081565b60005b82518110156134695761346183828151811061345457fe5b6020026020010151610d8d565b60010161343c565b5060005b815181101561092f5761349282828151811061348557fe5b6020026020010151611d67565b60010161346d565b6007546134b3906001600160a01b0316331460006108fa565b565b6000828201838110156134da5760405162461bcd60e51b815260040161092690615a9f565b90505b92915050565b600854604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613513908590600401615d2b565b600060405180830381600087803b15801561352d57600080fd5b505af1158015613541573d6000803e3d6000fd5b506132a2925050506001600160a01b0382168361433d565b61092f8363a9059cbb60e01b8484604051602401613578929190615669565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143d9565b336000908152600660205260408120546134b39160ff909116906108fa565b34156134b357600860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561362457600080fd5b505af1158015613638573d6000803e3d6000fd5b5050505050565b60008060008061364e85614468565b50509250925092506107d083106136775760405162461bcd60e51b815260040161092690615c9a565b821580613682575081155b61369e5760405162461bcd60e51b815260040161092690615ad4565b60006136d4600083116136b25760006136b5565b60015b600085116136c45760006136c7565b60015b601154910160ff16614496565b905083156136ed576010546136ea9082906134b5565b90505b600f546136fa90826134b5565b87116137185760405162461bcd60e51b815260040161092690615cf9565b9695505050505050565b6001600160a01b038b16600090815260036020526040902054613743614864565b6040518061016001604052808e6001600160a01b031681526020018d6001600160a01b031681526020018c81526020018b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001881515815260200187815260200186151581526020018581526020018481525090506137cd6001836134b590919063ffffffff16565b6001600160a01b03808f166000908152600360208181526040808420959095556002808252858420888552825292859020865181549086166001600160a01b0319918216178255878301516001830180549188169183169190911790559587015193810193909355606086015191830180549285169286169290921790915560808501516004830180549190941694169390931790915560a0830151600582015560c083015160068201805491151560ff1992831617905560e08401516007830155610100840151600883018054911515919092161790556101208301516009820155610140830151805184936138cb92600a8501929101906149c9565b50905050600e60009054906101000a90046001600160a01b03166001600160a01b03166336ed888c8e848f8f8f8f8f8f8f8f8f8f6040518d63ffffffff1660e01b81526004016139269c9b9a999897969594939291906157c2565b600060405180830381600087803b15801561394057600080fd5b505af1158015613954573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000848484846040516020016139809493929190615374565b604051602081830303815290604052805190602001209050949350505050565b80516001600160a01b03166000908152600560205260409020546139c58160016134b5565b82516001600160a01b03908116600090815260056020908152604080832094909455855183168252600481528382208583528152929020845181546001600160a01b03191692169190911781558184015180518593613a2b926001850192910190614a37565b50604082015160028201556060820151600380830180546001600160a01b0319166001600160a01b03909316929092179091556080830151600483015560a083015160058301805460ff1990811692151592909217905560c0840151600684015560e084015160078401805483169115159190911790556101008401516008840155610120840151600984018054909216901515179055610140830151600a83015561016080840151600b840155610180840151600c8401556101a090930151600d90920191909155908301511415613b37576000613b1983600001518460200151600081518110611ab757fe5b6000908152600160208190526040909120805460ff19169091179055505b600e548251602084015180516001600160a01b03909316926364813a5992918591600090613b6157fe5b6020026020010151866020015160018860200151510381518110613b8157fe5b60200260200101518760400151886060015189608001518a60a001518b60c001518c60e001518d61014001518e61016001518f61018001516040518e63ffffffff1660e01b8152600401613be19d9c9b9a99989796959493929190615682565b600060405180830381600087803b158015613bfb57600080fd5b505af1158015613c0f573d6000803e3d6000fd5b505050505050565b600c546134b3906001600160a01b0316331460006108fa565b600e5460125460009182916001600160a01b039091169063a42ab3d2908790613c689061271090613c62908990614496565b906144d0565b6040518363ffffffff1660e01b8152600401613c85929190615669565b60206040518083038186803b158015613c9d57600080fd5b505afa158015613cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd591906151b3565b905083811015613d33576000613ceb858361450f565b6001600160a01b038716600090815260166020526040902054909150613d1190836134b5565b6001600160a01b0387166000908152601660205260409020559150613d389050565b839150505b9392505050565b6000613d50845160021460036108fa565b835160021415613d3857613d8e84600081518110613d6a57fe5b602002602001015185600181518110613d7f57fe5b60200260200101518585614551565b9050613d38565b600854604051632e1a7d4d60e01b81526001600160a01b0390911690632e1a7d4d90613dc5908590600401615d2b565b600060405180830381600087803b158015613ddf57600080fd5b505af1158015613df3573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f1935050505015801561092f573d6000803e3d6000fd5b6000808261012001519050600080600080613e4c876101400151614468565b5093509350935093506000841180613e645750600083115b80613e6f5750600082115b15613faa57606087606001516001600160a01b0316826001600160a01b031614613f18576040805160028082526060820183529091602083019080368337019050509050876060015181600081518110613ec557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600181518110613ef357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050613f6b565b6040805160018082528183019092529060208083019080368337019050509050876060015181600081518110613f4a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b613fa38860000151828a608001518b60c001518c61014001518d60a00151613f9e600f548e61450f90919063ffffffff16565b613fce565b600f549550505b509295945050505050565b600d546134b3906001600160a01b0316331460006108fa565b600b548651829160009182916001600160a01b031690634a3f088d908c908c908590613ff657fe5b60200260200101518b8b6040518563ffffffff1660e01b815260040161401f94939291906153e0565b6101006040518083038186803b15801561403857600080fd5b505afa15801561404c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407091906152d9565b505050505092505091508482141561431e5761408a614a98565b614093876145f5565b9050600081604001511180156140cb57508780156140b45750818160400151115b806140cb5750871580156140cb5750818160400151105b1561419e576011546000906140e1906002614496565b85106140ef576011546140f1565b845b90506140fb6147dd565b604051806101c001604052808e6001600160a01b031681526020018d8152602001600081526020018c6001600160a01b031681526020018681526020018b151581526020018460400151815260200185856040015111151581526020016000815260200184608001511515815260200183815260200160028152602001600081526020016000815250905061418f816139a0565b614199868361450f565b955050505b80511515806141de5750600081602001511180156141de57508780156141c75750818160200151105b806141de5750871580156141de5750818160200151115b1561431c57600085851061420957600082602001511161420057601054614204565b6011545b61420b565b845b90506142156147dd565b604051806101c001604052808e6001600160a01b031681526020018d8152602001600081526020018c6001600160a01b031681526020018681526020018b15158152602001600085602001511161426c5785614272565b84602001515b8152602001600085602001511161428a576000614292565b858560200151115b151581526020016000815260200184608001511515815260200183815260200160008560200151116142c55760036142c8565b60015b60ff16815260200160008560200151116142e35784516142e6565b60005b815260200160008560200151116142fd5742614300565b60005b9052905061430d816139a0565b614317868361450f565b955050505b505b601154831061433157614331838b613d95565b50505050505050505050565b8047101561435d5760405162461bcd60e51b815260040161092690615b5b565b6000826001600160a01b031682604051614376906153c9565b60006040518083038185875af1925050503d80600081146143b3576040519150601f19603f3d011682016040523d82523d6000602084013e6143b8565b606091505b505090508061092f5760405162461bcd60e51b815260040161092690615b01565b606061442e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146639092919063ffffffff16565b80519091501561092f578080602001905181019061444c919061517f565b61092f5760405162461bcd60e51b815260040161092690615c50565b60008060008060008580602001905181019061448491906151ef565b939a9299509097509550909350915050565b6000826144a5575060006134dd565b828202828482816144b257fe5b04146134da5760405162461bcd60e51b815260040161092690615bd8565b60006134da83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b81525061467a565b60006134da83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506146b1565b600b54604051634998b10960e11b815260009182916001600160a01b039091169063933162129061458a908990899088906004016154f6565b602060405180830381600087803b1580156145a457600080fd5b505af11580156145b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145dc91906151b3565b90506145ec8482101560106108fa565b95945050505050565b6145fd614a98565b60008060008060008680602001905181019061461991906151ef565b9450945094509450945061462b614a98565b506040805160a0810182529586526020860194909452928401919091526001600160a01b031660608301521515608082015292915050565b606061467284846000856146dd565b949350505050565b6000818361469b5760405162461bcd60e51b81526004016109269190615a02565b5060008385816146a757fe5b0495945050505050565b600081848411156146d55760405162461bcd60e51b81526004016109269190615a02565b505050900390565b6060824710156146ff5760405162461bcd60e51b815260040161092690615b92565b6147088561479e565b6147245760405162461bcd60e51b815260040161092690615c19565b60006060866001600160a01b0316858760405161474191906153ad565b60006040518083038185875af1925050503d806000811461477e576040519150601f19603f3d011682016040523d82523d6000602084013e614783565b606091505b50915091506147938282866147a4565b979650505050505050565b3b151590565b606083156147b3575081613d38565b8251156147c35782518084602001fd5b8160405162461bcd60e51b81526004016109269190615a02565b604051806101c0016040528060006001600160a01b03168152602001606081526020016000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081525090565b60405180610160016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160001515815260200160008152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061490c575061492a565b601f01602090049060005260206000209081019061492a9190614ad2565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061496e5782800160ff1982351617855561499b565b8280016001018555821561499b579182015b8281111561499b578235825591602001919060010190614980565b506149a7929150614ad2565b5090565b508054600082559060005260206000209081019061492a9190614ad2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614a0a57805160ff191683800117855561499b565b8280016001018555821561499b579182015b8281111561499b578251825591602001919060010190614a1c565b828054828255906000526020600020908101928215614a8c579160200282015b82811115614a8c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614a57565b506149a7929150614ae7565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b5b808211156149a75760008155600101614ad3565b5b808211156149a75780546001600160a01b0319168155600101614ae8565b80356134dd81615e00565b600082601f830112614b21578081fd5b8135614b34614b2f82615da5565b615d7f565b818152915060208083019084810181840286018201871015614b5557600080fd5b60005b84811015614b7d578135614b6b81615e00565b84529282019290820190600101614b58565b505050505092915050565b600082601f830112614b98578081fd5b8135614ba6614b2f82615da5565b818152915060208083019084810181840286018201871015614bc757600080fd5b60005b84811015614b7d57813584529282019290820190600101614bca565b80356134dd81615e15565b600082601f830112614c01578081fd5b81356001600160401b03811115614c16578182fd5b614c29601f8201601f1916602001615d7f565b9150808252836020828501011115614c4057600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215614c6a578081fd5b81356134da81615e00565b60008060408385031215614c87578081fd5b8235614c9281615e00565b91506020830135614ca281615e00565b809150509250929050565b600080600080600080600080610100898b031215614cc9578384fd5b8835614cd481615e00565b97506020890135614ce481615e00565b96506040890135614cf481615e00565b95506060890135614d0481615e00565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060008060c08789031215614d44578182fd5b8635614d4f81615e00565b955060208701356001600160401b0380821115614d6a578384fd5b614d768a838b01614b11565b965060408901359150614d8882615e00565b909450606088013590614d9a82615e15565b90935060808801359080821115614daf578384fd5b50614dbc89828a01614bf1565b92505060a087013590509295509295509295565b60008060408385031215614de2578182fd5b8235614ded81615e00565b91506020830135614ca281615e15565b60008060408385031215614e0f578182fd5b8235614e1a81615e00565b946020939093013593505050565b600080600060608486031215614e3c578283fd5b8335614e4781615e00565b9250602084013591506040840135614e5e81615e00565b809150509250925092565b600080600080600060a08688031215614e80578283fd5b8535614e8b81615e00565b9450602086013593506040860135614ea281615e00565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060006101608c8e031215614edb578485fd5b8b35614ee681615e00565b9a5060208c0135995060408c0135614efd81615e00565b985060608c01359750614f138d60808e01614b06565b9650614f228d60a08e01614be6565b955060c08c01359450614f388d60e08e01614be6565b93506101008c01359250614f508d6101208e01614be6565b91506101408c01356001600160401b03811115614f6b578182fd5b614f778e828f01614bf1565b9150509295989b509295989b9093969950565b6000806000806000806000806000806101408b8d031215614fa9578384fd5b8a35614fb481615e00565b995060208b0135985060408b01356001600160401b03811115614fd5578485fd5b614fe18d828e01614b11565b98505060608b0135965060808b0135614ff981615e15565b955060a08b0135945060c08b013561501081615e15565b935060e08b013592506101008b013561502881615e15565b809250506101208b013590509295989b9194979a5092959850565b60008060008060808587031215615058578182fd5b843561506381615e00565b966020860135965060408601359560600135945092505050565b6000806040838503121561508f578182fd5b82356001600160401b03808211156150a5578384fd5b6150b186838701614b11565b935060208501359150808211156150c6578283fd5b506150d385828601614b88565b9150509250929050565b600080602083850312156150ef578182fd5b82356001600160401b0380821115615105578384fd5b818501915085601f830112615118578384fd5b813581811115615126578485fd5b8660208083028501011115615139578485fd5b60209290920196919550909350505050565b6000806040838503121561515d578182fd5b82356001600160401b0380821115615173578384fd5b6150b186838701614b88565b600060208284031215615190578081fd5b81516134da81615e15565b6000602082840312156151ac578081fd5b5035919050565b6000602082840312156151c4578081fd5b5051919050565b600080604083850312156151dd578182fd5b825191506020830151614ca281615e15565b600080600080600060a08688031215615206578283fd5b855194506020860151935060408601519250606086015161522681615e00565b608087015190925061523781615e15565b809150509295509295909350565b6000806000806080858703121561525a578182fd5b843593506020850135925060408501359150606085013561527a81615e15565b939692955090935050565b60008060008060008060c0878903121561529d578384fd5b8635955060208701359450604087013593506060870135925060808701356152c481615e15565b8092505060a087013590509295509295509295565b600080600080600080600080610100898b0312156152f5578182fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c089015161532a81615e15565b8092505060e089015190509295985092959890939650565b15159052565b60008151808452615360816020860160208601615dd0565b601f01601f19169290920160200192915050565b6001600160601b0319606095861b8116825293851b841660148201529190931b909116602882015290151560f81b603c820152603d0190565b600082516153bf818460208701615dd0565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b039889168152602081019790975294871660408701529290951660608501521515608084015260a083019390935260c082019290925290151560e08201526101000190565b6001600160a01b039a8b16815260208101999099529689166040890152606088019590955292909616608086015260a085015293151560c084015260e08301939093529115156101008201526101208101919091526101400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252901515608082015260a00190565b6001600160a01b0397881681529587166020870152938616604086015260608501929092526080840152151560a083015290911660c082015260e00190565b600061016060018060a01b03808f168452808e1660208501528c6040850152808c166060850152808b166080850152508860a084015287151560c08401528660e084015285151561010084015284610120840152806101408401526155f381840185615348565b9e9d5050505050505050505050505050565b6001600160a01b039b8c168152998b1660208b015260408a0198909852959098166060880152608087019390935290151560a086015260c0850152151560e08401526101008301939093526101208201929092526101408101919091526101600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038e81168252602082018e90528c811660408301528b81166060830152608082018b9052891660a082015260c0810188905286151560e082015261010081018690526101a081016156de610120830187615342565b8461014083015283610160830152826101808301529e9d5050505050505050505050505050565b6001600160a01b03998a168152602081019890985295881660408801529390961660608601526080850191909152151560a084015260c083019390935291151560e08201526101008101919091526101200190565b6001600160a01b039b8c168152602081019a909a52978a1660408a0152606089019690965293881660808801529190961660a086015260c085019590955293151560e08401526101008301939093529115156101208201526101408101919091526101600190565b600060018060a01b03808f1683528d6020840152808d1660408401528b6060840152808b166080840152808a1660a0840152508760c083015286151560e083015285610100830152841515610120830152836101408301526101806101608301526155f3610180830184615348565b6001600160a01b039c8d168152602081019b909b52988b1660408b015260608a019790975294891660808901529290971660a087015260c086015294151560e08501526101008401949094529215156101208301526101408201929092526101608101919091526101800190565b6001600160a01b039b8c168152602081019a909a52978a1660408a0152606089019690965293909716608087015260a0860191909152151560c085015260e08401949094529215156101008301526101208201929092526101408101919091526101600190565b6001600160a01b038e81168252602082018e90528c166040820152606081018b9052891515608082015260a0810189905287151560c082015260e081018790526101a08101615959610100830188615342565b856101208301528461014083015283610160830152826101808301529e9d5050505050505050505050505050565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b901515815260200190565b961515875260208701959095526001600160a01b0393909316604086015290151560608501521515608084015260a083015260c082015260e00190565b6000602082526134da6020830184615348565b60006020808301818452828554600180821660008114615a3c5760018114615a5a57615a92565b60028304607f16855260ff1983166040890152606088019350615a92565b60028304808652615a6a8a615dc4565b885b82811015615a885781548b820160400152908401908801615a6c565b8a01604001955050505b5091979650505050505050565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b60208082526013908201527214148e9bdb9b1e481bdb99481d1e5c19481cdb606a1b604082015260600190565b6020808252603a908201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726040820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606082015260800190565b6020808252601d908201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252600e908201526d050523a696e76616c6964207473760941b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526018908201527750523a20696e76616c696420657865637574696f6e46656560401b604082015260600190565b90815260200190565b6000808335601e19843603018112615d4a578283fd5b8301803591506001600160401b03821115615d63578283fd5b602001915036819003821315615d7857600080fd5b9250929050565b6040518181016001600160401b0381118282101715615d9d57600080fd5b604052919050565b60006001600160401b03821115615dba578081fd5b5060209081020190565b60009081526020902090565b60005b83811015615deb578181015183820152602001615dd3565b83811115615dfa576000848401525b50505050565b6001600160a01b038116811461492a57600080fd5b801515811461492a57600080fdfea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28968,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4082,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "trailingStopPositions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4088,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "increaseOrders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(IncreaseOrder)4048_storage))"
      },
      {
        "astId": 4092,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "increaseOrdersIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4098,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "decreaseOrders",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(DecreaseOrder)4078_storage))"
      },
      {
        "astId": 4102,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "decreaseOrdersIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4106,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "isOrderKeeper",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4108,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "gov",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4110,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "weth",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4112,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "usdm",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4114,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "router",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4116,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "vault",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4118,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "orderExecutor",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4120,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "positionRouter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4122,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "positionUtils",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IPositionUtils)24322"
      },
      {
        "astId": 4125,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minExecutionFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4128,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minTrailingStopExecutionFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4131,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minSLTPExecutionFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4133,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "trailingStopFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4135,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "minPurchaseTokenAmountUsd",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4138,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "isInitialized",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 4142,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "errors",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4146,
        "contract": "contracts/core/OrderBook.sol:OrderBook",
        "label": "feeReserves",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IPositionUtils)24322": {
        "encoding": "inplace",
        "label": "contract IPositionUtils",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(DecreaseOrder)4078_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OrderBook.DecreaseOrder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DecreaseOrder)4078_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(IncreaseOrder)4048_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OrderBook.IncreaseOrder))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(IncreaseOrder)4048_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(DecreaseOrder)4078_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderBook.DecreaseOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(DecreaseOrder)4078_storage"
      },
      "t_mapping(t_uint256,t_struct(IncreaseOrder)4048_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderBook.IncreaseOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(IncreaseOrder)4048_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DecreaseOrder)4078_storage": {
        "encoding": "inplace",
        "label": "struct OrderBook.DecreaseOrder",
        "members": [
          {
            "astId": 4050,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4053,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "path",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4055,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "collateralDelta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4057,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "indexToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4059,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "sizeDelta",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4061,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "isLong",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 4063,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4065,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerAboveThreshold",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 4067,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "minOut",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4069,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "withdrawETH",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 4071,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "executionFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4073,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "orderType",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4075,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "trailingStopPercentage",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 4077,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "trailingStopRefPriceTimestamp",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(IncreaseOrder)4048_storage": {
        "encoding": "inplace",
        "label": "struct OrderBook.IncreaseOrder",
        "members": [
          {
            "astId": 4027,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4029,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "purchaseToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4031,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "purchaseTokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4033,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "collateralToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4035,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "indexToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4037,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "sizeDelta",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4039,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "isLong",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 4041,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4043,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "triggerAboveThreshold",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4045,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "executionFee",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4047,
            "contract": "contracts/core/OrderBook.sol:OrderBook",
            "label": "orderProps",
            "offset": 0,
            "slot": "10",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}